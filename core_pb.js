/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.v2ray = (function() {

    /**
     * Namespace v2ray.
     * @exports v2ray
     * @namespace
     */
    var v2ray = {};

    v2ray.core = (function() {

        /**
         * Namespace core.
         * @memberof v2ray
         * @namespace
         */
        var core = {};

        core.app = (function() {

            /**
             * Namespace app.
             * @memberof v2ray.core
             * @namespace
             */
            var app = {};

            app.commander = (function() {

                /**
                 * Namespace commander.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var commander = {};

                commander.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.commander
                     * @interface IConfig
                     * @property {string|null} [tag] Config tag
                     * @property {Array.<v2ray.core.common.serial.ITypedMessage>|null} [service] Config service
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.commander
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.commander.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        this.service = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config tag.
                     * @member {string} tag
                     * @memberof v2ray.core.app.commander.Config
                     * @instance
                     */
                    Config.prototype.tag = "";

                    /**
                     * Config service.
                     * @member {Array.<v2ray.core.common.serial.ITypedMessage>} service
                     * @memberof v2ray.core.app.commander.Config
                     * @instance
                     */
                    Config.prototype.service = $util.emptyArray;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {v2ray.core.app.commander.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.commander.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.commander.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {v2ray.core.app.commander.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                        if (message.service != null && message.service.length)
                            for (var i = 0; i < message.service.length; ++i)
                                $root.v2ray.core.common.serial.TypedMessage.encode(message.service[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.commander.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {v2ray.core.app.commander.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.commander.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.commander.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tag = reader.string();
                                break;
                            case 2:
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.commander.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        if (message.service != null && message.hasOwnProperty("service")) {
                            if (!Array.isArray(message.service))
                                return "service: array expected";
                            for (var i = 0; i < message.service.length; ++i) {
                                var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.service[i]);
                                if (error)
                                    return "service." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.commander.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.commander.Config)
                            return object;
                        var message = new $root.v2ray.core.app.commander.Config();
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        if (object.service) {
                            if (!Array.isArray(object.service))
                                throw TypeError(".v2ray.core.app.commander.Config.service: array expected");
                            message.service = [];
                            for (var i = 0; i < object.service.length; ++i) {
                                if (typeof object.service[i] !== "object")
                                    throw TypeError(".v2ray.core.app.commander.Config.service: object expected");
                                message.service[i] = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.service[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.commander.Config
                     * @static
                     * @param {v2ray.core.app.commander.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.service = [];
                        if (options.defaults)
                            object.tag = "";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            object.tag = message.tag;
                        if (message.service && message.service.length) {
                            object.service = [];
                            for (var j = 0; j < message.service.length; ++j)
                                object.service[j] = $root.v2ray.core.common.serial.TypedMessage.toObject(message.service[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.commander.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return commander;
            })();

            app.dispatcher = (function() {

                /**
                 * Namespace dispatcher.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var dispatcher = {};

                dispatcher.SessionConfig = (function() {

                    /**
                     * Properties of a SessionConfig.
                     * @memberof v2ray.core.app.dispatcher
                     * @interface ISessionConfig
                     */

                    /**
                     * Constructs a new SessionConfig.
                     * @memberof v2ray.core.app.dispatcher
                     * @classdesc Represents a SessionConfig.
                     * @implements ISessionConfig
                     * @constructor
                     * @param {v2ray.core.app.dispatcher.ISessionConfig=} [properties] Properties to set
                     */
                    function SessionConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new SessionConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {v2ray.core.app.dispatcher.ISessionConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.dispatcher.SessionConfig} SessionConfig instance
                     */
                    SessionConfig.create = function create(properties) {
                        return new SessionConfig(properties);
                    };

                    /**
                     * Encodes the specified SessionConfig message. Does not implicitly {@link v2ray.core.app.dispatcher.SessionConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {v2ray.core.app.dispatcher.ISessionConfig} message SessionConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SessionConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified SessionConfig message, length delimited. Does not implicitly {@link v2ray.core.app.dispatcher.SessionConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {v2ray.core.app.dispatcher.ISessionConfig} message SessionConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SessionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SessionConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.dispatcher.SessionConfig} SessionConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SessionConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.dispatcher.SessionConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SessionConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.dispatcher.SessionConfig} SessionConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SessionConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SessionConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SessionConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a SessionConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.dispatcher.SessionConfig} SessionConfig
                     */
                    SessionConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.dispatcher.SessionConfig)
                            return object;
                        return new $root.v2ray.core.app.dispatcher.SessionConfig();
                    };

                    /**
                     * Creates a plain object from a SessionConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @static
                     * @param {v2ray.core.app.dispatcher.SessionConfig} message SessionConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SessionConfig.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this SessionConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.dispatcher.SessionConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SessionConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SessionConfig;
                })();

                dispatcher.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.dispatcher
                     * @interface IConfig
                     * @property {v2ray.core.app.dispatcher.ISessionConfig|null} [settings] Config settings
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.dispatcher
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.dispatcher.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config settings.
                     * @member {v2ray.core.app.dispatcher.ISessionConfig|null|undefined} settings
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @instance
                     */
                    Config.prototype.settings = null;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {v2ray.core.app.dispatcher.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.dispatcher.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.dispatcher.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {v2ray.core.app.dispatcher.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.settings != null && message.hasOwnProperty("settings"))
                            $root.v2ray.core.app.dispatcher.SessionConfig.encode(message.settings, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.dispatcher.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {v2ray.core.app.dispatcher.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.dispatcher.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.dispatcher.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.settings = $root.v2ray.core.app.dispatcher.SessionConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.dispatcher.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.settings != null && message.hasOwnProperty("settings")) {
                            var error = $root.v2ray.core.app.dispatcher.SessionConfig.verify(message.settings);
                            if (error)
                                return "settings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.dispatcher.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.dispatcher.Config)
                            return object;
                        var message = new $root.v2ray.core.app.dispatcher.Config();
                        if (object.settings != null) {
                            if (typeof object.settings !== "object")
                                throw TypeError(".v2ray.core.app.dispatcher.Config.settings: object expected");
                            message.settings = $root.v2ray.core.app.dispatcher.SessionConfig.fromObject(object.settings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @static
                     * @param {v2ray.core.app.dispatcher.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.settings = null;
                        if (message.settings != null && message.hasOwnProperty("settings"))
                            object.settings = $root.v2ray.core.app.dispatcher.SessionConfig.toObject(message.settings, options);
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.dispatcher.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return dispatcher;
            })();

            app.dns = (function() {

                /**
                 * Namespace dns.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var dns = {};

                dns.NameServer = (function() {

                    /**
                     * Properties of a NameServer.
                     * @memberof v2ray.core.app.dns
                     * @interface INameServer
                     * @property {v2ray.core.common.net.IEndpoint|null} [address] NameServer address
                     * @property {Array.<v2ray.core.app.dns.NameServer.IPriorityDomain>|null} [prioritizedDomain] NameServer prioritizedDomain
                     */

                    /**
                     * Constructs a new NameServer.
                     * @memberof v2ray.core.app.dns
                     * @classdesc Represents a NameServer.
                     * @implements INameServer
                     * @constructor
                     * @param {v2ray.core.app.dns.INameServer=} [properties] Properties to set
                     */
                    function NameServer(properties) {
                        this.prioritizedDomain = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NameServer address.
                     * @member {v2ray.core.common.net.IEndpoint|null|undefined} address
                     * @memberof v2ray.core.app.dns.NameServer
                     * @instance
                     */
                    NameServer.prototype.address = null;

                    /**
                     * NameServer prioritizedDomain.
                     * @member {Array.<v2ray.core.app.dns.NameServer.IPriorityDomain>} prioritizedDomain
                     * @memberof v2ray.core.app.dns.NameServer
                     * @instance
                     */
                    NameServer.prototype.prioritizedDomain = $util.emptyArray;

                    /**
                     * Creates a new NameServer instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {v2ray.core.app.dns.INameServer=} [properties] Properties to set
                     * @returns {v2ray.core.app.dns.NameServer} NameServer instance
                     */
                    NameServer.create = function create(properties) {
                        return new NameServer(properties);
                    };

                    /**
                     * Encodes the specified NameServer message. Does not implicitly {@link v2ray.core.app.dns.NameServer.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {v2ray.core.app.dns.INameServer} message NameServer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NameServer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && message.hasOwnProperty("address"))
                            $root.v2ray.core.common.net.Endpoint.encode(message.address, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.prioritizedDomain != null && message.prioritizedDomain.length)
                            for (var i = 0; i < message.prioritizedDomain.length; ++i)
                                $root.v2ray.core.app.dns.NameServer.PriorityDomain.encode(message.prioritizedDomain[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified NameServer message, length delimited. Does not implicitly {@link v2ray.core.app.dns.NameServer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {v2ray.core.app.dns.INameServer} message NameServer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NameServer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NameServer message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.dns.NameServer} NameServer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NameServer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.dns.NameServer();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = $root.v2ray.core.common.net.Endpoint.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.prioritizedDomain && message.prioritizedDomain.length))
                                    message.prioritizedDomain = [];
                                message.prioritizedDomain.push($root.v2ray.core.app.dns.NameServer.PriorityDomain.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NameServer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.dns.NameServer} NameServer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NameServer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NameServer message.
                     * @function verify
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NameServer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address")) {
                            var error = $root.v2ray.core.common.net.Endpoint.verify(message.address);
                            if (error)
                                return "address." + error;
                        }
                        if (message.prioritizedDomain != null && message.hasOwnProperty("prioritizedDomain")) {
                            if (!Array.isArray(message.prioritizedDomain))
                                return "prioritizedDomain: array expected";
                            for (var i = 0; i < message.prioritizedDomain.length; ++i) {
                                var error = $root.v2ray.core.app.dns.NameServer.PriorityDomain.verify(message.prioritizedDomain[i]);
                                if (error)
                                    return "prioritizedDomain." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a NameServer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.dns.NameServer} NameServer
                     */
                    NameServer.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.dns.NameServer)
                            return object;
                        var message = new $root.v2ray.core.app.dns.NameServer();
                        if (object.address != null) {
                            if (typeof object.address !== "object")
                                throw TypeError(".v2ray.core.app.dns.NameServer.address: object expected");
                            message.address = $root.v2ray.core.common.net.Endpoint.fromObject(object.address);
                        }
                        if (object.prioritizedDomain) {
                            if (!Array.isArray(object.prioritizedDomain))
                                throw TypeError(".v2ray.core.app.dns.NameServer.prioritizedDomain: array expected");
                            message.prioritizedDomain = [];
                            for (var i = 0; i < object.prioritizedDomain.length; ++i) {
                                if (typeof object.prioritizedDomain[i] !== "object")
                                    throw TypeError(".v2ray.core.app.dns.NameServer.prioritizedDomain: object expected");
                                message.prioritizedDomain[i] = $root.v2ray.core.app.dns.NameServer.PriorityDomain.fromObject(object.prioritizedDomain[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a NameServer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.dns.NameServer
                     * @static
                     * @param {v2ray.core.app.dns.NameServer} message NameServer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NameServer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.prioritizedDomain = [];
                        if (options.defaults)
                            object.address = null;
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = $root.v2ray.core.common.net.Endpoint.toObject(message.address, options);
                        if (message.prioritizedDomain && message.prioritizedDomain.length) {
                            object.prioritizedDomain = [];
                            for (var j = 0; j < message.prioritizedDomain.length; ++j)
                                object.prioritizedDomain[j] = $root.v2ray.core.app.dns.NameServer.PriorityDomain.toObject(message.prioritizedDomain[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this NameServer to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.dns.NameServer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NameServer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    NameServer.PriorityDomain = (function() {

                        /**
                         * Properties of a PriorityDomain.
                         * @memberof v2ray.core.app.dns.NameServer
                         * @interface IPriorityDomain
                         * @property {v2ray.core.app.dns.DomainMatchingType|null} [type] PriorityDomain type
                         * @property {string|null} [domain] PriorityDomain domain
                         */

                        /**
                         * Constructs a new PriorityDomain.
                         * @memberof v2ray.core.app.dns.NameServer
                         * @classdesc Represents a PriorityDomain.
                         * @implements IPriorityDomain
                         * @constructor
                         * @param {v2ray.core.app.dns.NameServer.IPriorityDomain=} [properties] Properties to set
                         */
                        function PriorityDomain(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PriorityDomain type.
                         * @member {v2ray.core.app.dns.DomainMatchingType} type
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @instance
                         */
                        PriorityDomain.prototype.type = 0;

                        /**
                         * PriorityDomain domain.
                         * @member {string} domain
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @instance
                         */
                        PriorityDomain.prototype.domain = "";

                        /**
                         * Creates a new PriorityDomain instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {v2ray.core.app.dns.NameServer.IPriorityDomain=} [properties] Properties to set
                         * @returns {v2ray.core.app.dns.NameServer.PriorityDomain} PriorityDomain instance
                         */
                        PriorityDomain.create = function create(properties) {
                            return new PriorityDomain(properties);
                        };

                        /**
                         * Encodes the specified PriorityDomain message. Does not implicitly {@link v2ray.core.app.dns.NameServer.PriorityDomain.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {v2ray.core.app.dns.NameServer.IPriorityDomain} message PriorityDomain message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PriorityDomain.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.domain != null && message.hasOwnProperty("domain"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.domain);
                            return writer;
                        };

                        /**
                         * Encodes the specified PriorityDomain message, length delimited. Does not implicitly {@link v2ray.core.app.dns.NameServer.PriorityDomain.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {v2ray.core.app.dns.NameServer.IPriorityDomain} message PriorityDomain message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PriorityDomain.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PriorityDomain message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.dns.NameServer.PriorityDomain} PriorityDomain
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PriorityDomain.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.dns.NameServer.PriorityDomain();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.int32();
                                    break;
                                case 2:
                                    message.domain = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PriorityDomain message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.dns.NameServer.PriorityDomain} PriorityDomain
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PriorityDomain.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PriorityDomain message.
                         * @function verify
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PriorityDomain.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.domain != null && message.hasOwnProperty("domain"))
                                if (!$util.isString(message.domain))
                                    return "domain: string expected";
                            return null;
                        };

                        /**
                         * Creates a PriorityDomain message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.dns.NameServer.PriorityDomain} PriorityDomain
                         */
                        PriorityDomain.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.dns.NameServer.PriorityDomain)
                                return object;
                            var message = new $root.v2ray.core.app.dns.NameServer.PriorityDomain();
                            switch (object.type) {
                            case "Full":
                            case 0:
                                message.type = 0;
                                break;
                            case "Subdomain":
                            case 1:
                                message.type = 1;
                                break;
                            case "Keyword":
                            case 2:
                                message.type = 2;
                                break;
                            case "Regex":
                            case 3:
                                message.type = 3;
                                break;
                            }
                            if (object.domain != null)
                                message.domain = String(object.domain);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PriorityDomain message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @static
                         * @param {v2ray.core.app.dns.NameServer.PriorityDomain} message PriorityDomain
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PriorityDomain.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "Full" : 0;
                                object.domain = "";
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.v2ray.core.app.dns.DomainMatchingType[message.type] : message.type;
                            if (message.domain != null && message.hasOwnProperty("domain"))
                                object.domain = message.domain;
                            return object;
                        };

                        /**
                         * Converts this PriorityDomain to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.dns.NameServer.PriorityDomain
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PriorityDomain.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return PriorityDomain;
                    })();

                    return NameServer;
                })();

                /**
                 * DomainMatchingType enum.
                 * @name v2ray.core.app.dns.DomainMatchingType
                 * @enum {string}
                 * @property {number} Full=0 Full value
                 * @property {number} Subdomain=1 Subdomain value
                 * @property {number} Keyword=2 Keyword value
                 * @property {number} Regex=3 Regex value
                 */
                dns.DomainMatchingType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "Full"] = 0;
                    values[valuesById[1] = "Subdomain"] = 1;
                    values[valuesById[2] = "Keyword"] = 2;
                    values[valuesById[3] = "Regex"] = 3;
                    return values;
                })();

                dns.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.dns
                     * @interface IConfig
                     * @property {Array.<v2ray.core.common.net.IEndpoint>|null} [NameServers] Config NameServers
                     * @property {Array.<v2ray.core.app.dns.INameServer>|null} [nameServer] Config nameServer
                     * @property {Object.<string,v2ray.core.common.net.IIPOrDomain>|null} [Hosts] Config Hosts
                     * @property {Uint8Array|null} [clientIp] Config clientIp
                     * @property {Array.<v2ray.core.app.dns.Config.IHostMapping>|null} [staticHosts] Config staticHosts
                     * @property {string|null} [tag] Config tag
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.dns
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.dns.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        this.NameServers = [];
                        this.nameServer = [];
                        this.Hosts = {};
                        this.staticHosts = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config NameServers.
                     * @member {Array.<v2ray.core.common.net.IEndpoint>} NameServers
                     * @memberof v2ray.core.app.dns.Config
                     * @instance
                     */
                    Config.prototype.NameServers = $util.emptyArray;

                    /**
                     * Config nameServer.
                     * @member {Array.<v2ray.core.app.dns.INameServer>} nameServer
                     * @memberof v2ray.core.app.dns.Config
                     * @instance
                     */
                    Config.prototype.nameServer = $util.emptyArray;

                    /**
                     * Config Hosts.
                     * @member {Object.<string,v2ray.core.common.net.IIPOrDomain>} Hosts
                     * @memberof v2ray.core.app.dns.Config
                     * @instance
                     */
                    Config.prototype.Hosts = $util.emptyObject;

                    /**
                     * Config clientIp.
                     * @member {Uint8Array} clientIp
                     * @memberof v2ray.core.app.dns.Config
                     * @instance
                     */
                    Config.prototype.clientIp = $util.newBuffer([]);

                    /**
                     * Config staticHosts.
                     * @member {Array.<v2ray.core.app.dns.Config.IHostMapping>} staticHosts
                     * @memberof v2ray.core.app.dns.Config
                     * @instance
                     */
                    Config.prototype.staticHosts = $util.emptyArray;

                    /**
                     * Config tag.
                     * @member {string} tag
                     * @memberof v2ray.core.app.dns.Config
                     * @instance
                     */
                    Config.prototype.tag = "";

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {v2ray.core.app.dns.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.dns.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.dns.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {v2ray.core.app.dns.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.NameServers != null && message.NameServers.length)
                            for (var i = 0; i < message.NameServers.length; ++i)
                                $root.v2ray.core.common.net.Endpoint.encode(message.NameServers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.Hosts != null && message.hasOwnProperty("Hosts"))
                            for (var keys = Object.keys(message.Hosts), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.v2ray.core.common.net.IPOrDomain.encode(message.Hosts[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.clientIp != null && message.hasOwnProperty("clientIp"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.clientIp);
                        if (message.staticHosts != null && message.staticHosts.length)
                            for (var i = 0; i < message.staticHosts.length; ++i)
                                $root.v2ray.core.app.dns.Config.HostMapping.encode(message.staticHosts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.nameServer != null && message.nameServer.length)
                            for (var i = 0; i < message.nameServer.length; ++i)
                                $root.v2ray.core.app.dns.NameServer.encode(message.nameServer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.tag);
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.dns.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {v2ray.core.app.dns.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.dns.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.dns.Config(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.NameServers && message.NameServers.length))
                                    message.NameServers = [];
                                message.NameServers.push($root.v2ray.core.common.net.Endpoint.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                if (!(message.nameServer && message.nameServer.length))
                                    message.nameServer = [];
                                message.nameServer.push($root.v2ray.core.app.dns.NameServer.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.Hosts === $util.emptyObject)
                                    message.Hosts = {};
                                key = reader.string();
                                reader.pos++;
                                message.Hosts[key] = $root.v2ray.core.common.net.IPOrDomain.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.clientIp = reader.bytes();
                                break;
                            case 4:
                                if (!(message.staticHosts && message.staticHosts.length))
                                    message.staticHosts = [];
                                message.staticHosts.push($root.v2ray.core.app.dns.Config.HostMapping.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                message.tag = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.dns.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.NameServers != null && message.hasOwnProperty("NameServers")) {
                            if (!Array.isArray(message.NameServers))
                                return "NameServers: array expected";
                            for (var i = 0; i < message.NameServers.length; ++i) {
                                var error = $root.v2ray.core.common.net.Endpoint.verify(message.NameServers[i]);
                                if (error)
                                    return "NameServers." + error;
                            }
                        }
                        if (message.nameServer != null && message.hasOwnProperty("nameServer")) {
                            if (!Array.isArray(message.nameServer))
                                return "nameServer: array expected";
                            for (var i = 0; i < message.nameServer.length; ++i) {
                                var error = $root.v2ray.core.app.dns.NameServer.verify(message.nameServer[i]);
                                if (error)
                                    return "nameServer." + error;
                            }
                        }
                        if (message.Hosts != null && message.hasOwnProperty("Hosts")) {
                            if (!$util.isObject(message.Hosts))
                                return "Hosts: object expected";
                            var key = Object.keys(message.Hosts);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.v2ray.core.common.net.IPOrDomain.verify(message.Hosts[key[i]]);
                                if (error)
                                    return "Hosts." + error;
                            }
                        }
                        if (message.clientIp != null && message.hasOwnProperty("clientIp"))
                            if (!(message.clientIp && typeof message.clientIp.length === "number" || $util.isString(message.clientIp)))
                                return "clientIp: buffer expected";
                        if (message.staticHosts != null && message.hasOwnProperty("staticHosts")) {
                            if (!Array.isArray(message.staticHosts))
                                return "staticHosts: array expected";
                            for (var i = 0; i < message.staticHosts.length; ++i) {
                                var error = $root.v2ray.core.app.dns.Config.HostMapping.verify(message.staticHosts[i]);
                                if (error)
                                    return "staticHosts." + error;
                            }
                        }
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.dns.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.dns.Config)
                            return object;
                        var message = new $root.v2ray.core.app.dns.Config();
                        if (object.NameServers) {
                            if (!Array.isArray(object.NameServers))
                                throw TypeError(".v2ray.core.app.dns.Config.NameServers: array expected");
                            message.NameServers = [];
                            for (var i = 0; i < object.NameServers.length; ++i) {
                                if (typeof object.NameServers[i] !== "object")
                                    throw TypeError(".v2ray.core.app.dns.Config.NameServers: object expected");
                                message.NameServers[i] = $root.v2ray.core.common.net.Endpoint.fromObject(object.NameServers[i]);
                            }
                        }
                        if (object.nameServer) {
                            if (!Array.isArray(object.nameServer))
                                throw TypeError(".v2ray.core.app.dns.Config.nameServer: array expected");
                            message.nameServer = [];
                            for (var i = 0; i < object.nameServer.length; ++i) {
                                if (typeof object.nameServer[i] !== "object")
                                    throw TypeError(".v2ray.core.app.dns.Config.nameServer: object expected");
                                message.nameServer[i] = $root.v2ray.core.app.dns.NameServer.fromObject(object.nameServer[i]);
                            }
                        }
                        if (object.Hosts) {
                            if (typeof object.Hosts !== "object")
                                throw TypeError(".v2ray.core.app.dns.Config.Hosts: object expected");
                            message.Hosts = {};
                            for (var keys = Object.keys(object.Hosts), i = 0; i < keys.length; ++i) {
                                if (typeof object.Hosts[keys[i]] !== "object")
                                    throw TypeError(".v2ray.core.app.dns.Config.Hosts: object expected");
                                message.Hosts[keys[i]] = $root.v2ray.core.common.net.IPOrDomain.fromObject(object.Hosts[keys[i]]);
                            }
                        }
                        if (object.clientIp != null)
                            if (typeof object.clientIp === "string")
                                $util.base64.decode(object.clientIp, message.clientIp = $util.newBuffer($util.base64.length(object.clientIp)), 0);
                            else if (object.clientIp.length)
                                message.clientIp = object.clientIp;
                        if (object.staticHosts) {
                            if (!Array.isArray(object.staticHosts))
                                throw TypeError(".v2ray.core.app.dns.Config.staticHosts: array expected");
                            message.staticHosts = [];
                            for (var i = 0; i < object.staticHosts.length; ++i) {
                                if (typeof object.staticHosts[i] !== "object")
                                    throw TypeError(".v2ray.core.app.dns.Config.staticHosts: object expected");
                                message.staticHosts[i] = $root.v2ray.core.app.dns.Config.HostMapping.fromObject(object.staticHosts[i]);
                            }
                        }
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.dns.Config
                     * @static
                     * @param {v2ray.core.app.dns.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.NameServers = [];
                            object.staticHosts = [];
                            object.nameServer = [];
                        }
                        if (options.objects || options.defaults)
                            object.Hosts = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.clientIp = "";
                            else {
                                object.clientIp = [];
                                if (options.bytes !== Array)
                                    object.clientIp = $util.newBuffer(object.clientIp);
                            }
                            object.tag = "";
                        }
                        if (message.NameServers && message.NameServers.length) {
                            object.NameServers = [];
                            for (var j = 0; j < message.NameServers.length; ++j)
                                object.NameServers[j] = $root.v2ray.core.common.net.Endpoint.toObject(message.NameServers[j], options);
                        }
                        var keys2;
                        if (message.Hosts && (keys2 = Object.keys(message.Hosts)).length) {
                            object.Hosts = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.Hosts[keys2[j]] = $root.v2ray.core.common.net.IPOrDomain.toObject(message.Hosts[keys2[j]], options);
                        }
                        if (message.clientIp != null && message.hasOwnProperty("clientIp"))
                            object.clientIp = options.bytes === String ? $util.base64.encode(message.clientIp, 0, message.clientIp.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientIp) : message.clientIp;
                        if (message.staticHosts && message.staticHosts.length) {
                            object.staticHosts = [];
                            for (var j = 0; j < message.staticHosts.length; ++j)
                                object.staticHosts[j] = $root.v2ray.core.app.dns.Config.HostMapping.toObject(message.staticHosts[j], options);
                        }
                        if (message.nameServer && message.nameServer.length) {
                            object.nameServer = [];
                            for (var j = 0; j < message.nameServer.length; ++j)
                                object.nameServer[j] = $root.v2ray.core.app.dns.NameServer.toObject(message.nameServer[j], options);
                        }
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            object.tag = message.tag;
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.dns.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    Config.HostMapping = (function() {

                        /**
                         * Properties of a HostMapping.
                         * @memberof v2ray.core.app.dns.Config
                         * @interface IHostMapping
                         * @property {v2ray.core.app.dns.DomainMatchingType|null} [type] HostMapping type
                         * @property {string|null} [domain] HostMapping domain
                         * @property {Array.<Uint8Array>|null} [ip] HostMapping ip
                         * @property {string|null} [proxiedDomain] HostMapping proxiedDomain
                         */

                        /**
                         * Constructs a new HostMapping.
                         * @memberof v2ray.core.app.dns.Config
                         * @classdesc Represents a HostMapping.
                         * @implements IHostMapping
                         * @constructor
                         * @param {v2ray.core.app.dns.Config.IHostMapping=} [properties] Properties to set
                         */
                        function HostMapping(properties) {
                            this.ip = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * HostMapping type.
                         * @member {v2ray.core.app.dns.DomainMatchingType} type
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @instance
                         */
                        HostMapping.prototype.type = 0;

                        /**
                         * HostMapping domain.
                         * @member {string} domain
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @instance
                         */
                        HostMapping.prototype.domain = "";

                        /**
                         * HostMapping ip.
                         * @member {Array.<Uint8Array>} ip
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @instance
                         */
                        HostMapping.prototype.ip = $util.emptyArray;

                        /**
                         * HostMapping proxiedDomain.
                         * @member {string} proxiedDomain
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @instance
                         */
                        HostMapping.prototype.proxiedDomain = "";

                        /**
                         * Creates a new HostMapping instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {v2ray.core.app.dns.Config.IHostMapping=} [properties] Properties to set
                         * @returns {v2ray.core.app.dns.Config.HostMapping} HostMapping instance
                         */
                        HostMapping.create = function create(properties) {
                            return new HostMapping(properties);
                        };

                        /**
                         * Encodes the specified HostMapping message. Does not implicitly {@link v2ray.core.app.dns.Config.HostMapping.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {v2ray.core.app.dns.Config.IHostMapping} message HostMapping message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HostMapping.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.domain != null && message.hasOwnProperty("domain"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.domain);
                            if (message.ip != null && message.ip.length)
                                for (var i = 0; i < message.ip.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.ip[i]);
                            if (message.proxiedDomain != null && message.hasOwnProperty("proxiedDomain"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.proxiedDomain);
                            return writer;
                        };

                        /**
                         * Encodes the specified HostMapping message, length delimited. Does not implicitly {@link v2ray.core.app.dns.Config.HostMapping.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {v2ray.core.app.dns.Config.IHostMapping} message HostMapping message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HostMapping.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a HostMapping message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.dns.Config.HostMapping} HostMapping
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HostMapping.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.dns.Config.HostMapping();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.int32();
                                    break;
                                case 2:
                                    message.domain = reader.string();
                                    break;
                                case 3:
                                    if (!(message.ip && message.ip.length))
                                        message.ip = [];
                                    message.ip.push(reader.bytes());
                                    break;
                                case 4:
                                    message.proxiedDomain = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a HostMapping message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.dns.Config.HostMapping} HostMapping
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HostMapping.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a HostMapping message.
                         * @function verify
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HostMapping.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.domain != null && message.hasOwnProperty("domain"))
                                if (!$util.isString(message.domain))
                                    return "domain: string expected";
                            if (message.ip != null && message.hasOwnProperty("ip")) {
                                if (!Array.isArray(message.ip))
                                    return "ip: array expected";
                                for (var i = 0; i < message.ip.length; ++i)
                                    if (!(message.ip[i] && typeof message.ip[i].length === "number" || $util.isString(message.ip[i])))
                                        return "ip: buffer[] expected";
                            }
                            if (message.proxiedDomain != null && message.hasOwnProperty("proxiedDomain"))
                                if (!$util.isString(message.proxiedDomain))
                                    return "proxiedDomain: string expected";
                            return null;
                        };

                        /**
                         * Creates a HostMapping message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.dns.Config.HostMapping} HostMapping
                         */
                        HostMapping.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.dns.Config.HostMapping)
                                return object;
                            var message = new $root.v2ray.core.app.dns.Config.HostMapping();
                            switch (object.type) {
                            case "Full":
                            case 0:
                                message.type = 0;
                                break;
                            case "Subdomain":
                            case 1:
                                message.type = 1;
                                break;
                            case "Keyword":
                            case 2:
                                message.type = 2;
                                break;
                            case "Regex":
                            case 3:
                                message.type = 3;
                                break;
                            }
                            if (object.domain != null)
                                message.domain = String(object.domain);
                            if (object.ip) {
                                if (!Array.isArray(object.ip))
                                    throw TypeError(".v2ray.core.app.dns.Config.HostMapping.ip: array expected");
                                message.ip = [];
                                for (var i = 0; i < object.ip.length; ++i)
                                    if (typeof object.ip[i] === "string")
                                        $util.base64.decode(object.ip[i], message.ip[i] = $util.newBuffer($util.base64.length(object.ip[i])), 0);
                                    else if (object.ip[i].length)
                                        message.ip[i] = object.ip[i];
                            }
                            if (object.proxiedDomain != null)
                                message.proxiedDomain = String(object.proxiedDomain);
                            return message;
                        };

                        /**
                         * Creates a plain object from a HostMapping message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @static
                         * @param {v2ray.core.app.dns.Config.HostMapping} message HostMapping
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HostMapping.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.ip = [];
                            if (options.defaults) {
                                object.type = options.enums === String ? "Full" : 0;
                                object.domain = "";
                                object.proxiedDomain = "";
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.v2ray.core.app.dns.DomainMatchingType[message.type] : message.type;
                            if (message.domain != null && message.hasOwnProperty("domain"))
                                object.domain = message.domain;
                            if (message.ip && message.ip.length) {
                                object.ip = [];
                                for (var j = 0; j < message.ip.length; ++j)
                                    object.ip[j] = options.bytes === String ? $util.base64.encode(message.ip[j], 0, message.ip[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.ip[j]) : message.ip[j];
                            }
                            if (message.proxiedDomain != null && message.hasOwnProperty("proxiedDomain"))
                                object.proxiedDomain = message.proxiedDomain;
                            return object;
                        };

                        /**
                         * Converts this HostMapping to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.dns.Config.HostMapping
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HostMapping.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return HostMapping;
                    })();

                    return Config;
                })();

                return dns;
            })();

            app.log = (function() {

                /**
                 * Namespace log.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var log = {};

                log.command = (function() {

                    /**
                     * Namespace command.
                     * @memberof v2ray.core.app.log
                     * @namespace
                     */
                    var command = {};

                    command.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.app.log.command
                         * @interface IConfig
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.app.log.command
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.app.log.command.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {v2ray.core.app.log.command.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.app.log.command.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.log.command.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {v2ray.core.app.log.command.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.log.command.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {v2ray.core.app.log.command.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.log.command.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.log.command.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.log.command.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.log.command.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.log.command.Config)
                                return object;
                            return new $root.v2ray.core.app.log.command.Config();
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.log.command.Config
                         * @static
                         * @param {v2ray.core.app.log.command.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.log.command.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    command.RestartLoggerRequest = (function() {

                        /**
                         * Properties of a RestartLoggerRequest.
                         * @memberof v2ray.core.app.log.command
                         * @interface IRestartLoggerRequest
                         */

                        /**
                         * Constructs a new RestartLoggerRequest.
                         * @memberof v2ray.core.app.log.command
                         * @classdesc Represents a RestartLoggerRequest.
                         * @implements IRestartLoggerRequest
                         * @constructor
                         * @param {v2ray.core.app.log.command.IRestartLoggerRequest=} [properties] Properties to set
                         */
                        function RestartLoggerRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new RestartLoggerRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {v2ray.core.app.log.command.IRestartLoggerRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.log.command.RestartLoggerRequest} RestartLoggerRequest instance
                         */
                        RestartLoggerRequest.create = function create(properties) {
                            return new RestartLoggerRequest(properties);
                        };

                        /**
                         * Encodes the specified RestartLoggerRequest message. Does not implicitly {@link v2ray.core.app.log.command.RestartLoggerRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {v2ray.core.app.log.command.IRestartLoggerRequest} message RestartLoggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestartLoggerRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified RestartLoggerRequest message, length delimited. Does not implicitly {@link v2ray.core.app.log.command.RestartLoggerRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {v2ray.core.app.log.command.IRestartLoggerRequest} message RestartLoggerRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestartLoggerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RestartLoggerRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.log.command.RestartLoggerRequest} RestartLoggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestartLoggerRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.log.command.RestartLoggerRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RestartLoggerRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.log.command.RestartLoggerRequest} RestartLoggerRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestartLoggerRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RestartLoggerRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RestartLoggerRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a RestartLoggerRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.log.command.RestartLoggerRequest} RestartLoggerRequest
                         */
                        RestartLoggerRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.log.command.RestartLoggerRequest)
                                return object;
                            return new $root.v2ray.core.app.log.command.RestartLoggerRequest();
                        };

                        /**
                         * Creates a plain object from a RestartLoggerRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @static
                         * @param {v2ray.core.app.log.command.RestartLoggerRequest} message RestartLoggerRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RestartLoggerRequest.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this RestartLoggerRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.log.command.RestartLoggerRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RestartLoggerRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return RestartLoggerRequest;
                    })();

                    command.RestartLoggerResponse = (function() {

                        /**
                         * Properties of a RestartLoggerResponse.
                         * @memberof v2ray.core.app.log.command
                         * @interface IRestartLoggerResponse
                         */

                        /**
                         * Constructs a new RestartLoggerResponse.
                         * @memberof v2ray.core.app.log.command
                         * @classdesc Represents a RestartLoggerResponse.
                         * @implements IRestartLoggerResponse
                         * @constructor
                         * @param {v2ray.core.app.log.command.IRestartLoggerResponse=} [properties] Properties to set
                         */
                        function RestartLoggerResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new RestartLoggerResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {v2ray.core.app.log.command.IRestartLoggerResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.log.command.RestartLoggerResponse} RestartLoggerResponse instance
                         */
                        RestartLoggerResponse.create = function create(properties) {
                            return new RestartLoggerResponse(properties);
                        };

                        /**
                         * Encodes the specified RestartLoggerResponse message. Does not implicitly {@link v2ray.core.app.log.command.RestartLoggerResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {v2ray.core.app.log.command.IRestartLoggerResponse} message RestartLoggerResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestartLoggerResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified RestartLoggerResponse message, length delimited. Does not implicitly {@link v2ray.core.app.log.command.RestartLoggerResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {v2ray.core.app.log.command.IRestartLoggerResponse} message RestartLoggerResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RestartLoggerResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RestartLoggerResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.log.command.RestartLoggerResponse} RestartLoggerResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestartLoggerResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.log.command.RestartLoggerResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RestartLoggerResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.log.command.RestartLoggerResponse} RestartLoggerResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RestartLoggerResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RestartLoggerResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RestartLoggerResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a RestartLoggerResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.log.command.RestartLoggerResponse} RestartLoggerResponse
                         */
                        RestartLoggerResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.log.command.RestartLoggerResponse)
                                return object;
                            return new $root.v2ray.core.app.log.command.RestartLoggerResponse();
                        };

                        /**
                         * Creates a plain object from a RestartLoggerResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @static
                         * @param {v2ray.core.app.log.command.RestartLoggerResponse} message RestartLoggerResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RestartLoggerResponse.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this RestartLoggerResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.log.command.RestartLoggerResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RestartLoggerResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return RestartLoggerResponse;
                    })();

                    command.LoggerService = (function() {

                        /**
                         * Constructs a new LoggerService service.
                         * @memberof v2ray.core.app.log.command
                         * @classdesc Represents a LoggerService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function LoggerService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }

                        (LoggerService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LoggerService;

                        /**
                         * Creates new LoggerService service using the specified rpc implementation.
                         * @function create
                         * @memberof v2ray.core.app.log.command.LoggerService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {LoggerService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        LoggerService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };

                        /**
                         * Callback as used by {@link v2ray.core.app.log.command.LoggerService#restartLogger}.
                         * @memberof v2ray.core.app.log.command.LoggerService
                         * @typedef RestartLoggerCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.log.command.RestartLoggerResponse} [response] RestartLoggerResponse
                         */

                        /**
                         * Calls RestartLogger.
                         * @function restartLogger
                         * @memberof v2ray.core.app.log.command.LoggerService
                         * @instance
                         * @param {v2ray.core.app.log.command.IRestartLoggerRequest} request RestartLoggerRequest message or plain object
                         * @param {v2ray.core.app.log.command.LoggerService.RestartLoggerCallback} callback Node-style callback called with the error, if any, and RestartLoggerResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LoggerService.prototype.restartLogger = function restartLogger(request, callback) {
                            return this.rpcCall(restartLogger, $root.v2ray.core.app.log.command.RestartLoggerRequest, $root.v2ray.core.app.log.command.RestartLoggerResponse, request, callback);
                        }, "name", { value: "RestartLogger" });

                        /**
                         * Calls RestartLogger.
                         * @function restartLogger
                         * @memberof v2ray.core.app.log.command.LoggerService
                         * @instance
                         * @param {v2ray.core.app.log.command.IRestartLoggerRequest} request RestartLoggerRequest message or plain object
                         * @returns {Promise<v2ray.core.app.log.command.RestartLoggerResponse>} Promise
                         * @variation 2
                         */

                        return LoggerService;
                    })();

                    return command;
                })();

                /**
                 * LogType enum.
                 * @name v2ray.core.app.log.LogType
                 * @enum {string}
                 * @property {number} None=0 None value
                 * @property {number} Console=1 Console value
                 * @property {number} File=2 File value
                 * @property {number} Event=3 Event value
                 */
                log.LogType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "None"] = 0;
                    values[valuesById[1] = "Console"] = 1;
                    values[valuesById[2] = "File"] = 2;
                    values[valuesById[3] = "Event"] = 3;
                    return values;
                })();

                log.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.log
                     * @interface IConfig
                     * @property {v2ray.core.app.log.LogType|null} [errorLogType] Config errorLogType
                     * @property {v2ray.core.common.log.Severity|null} [errorLogLevel] Config errorLogLevel
                     * @property {string|null} [errorLogPath] Config errorLogPath
                     * @property {v2ray.core.app.log.LogType|null} [accessLogType] Config accessLogType
                     * @property {string|null} [accessLogPath] Config accessLogPath
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.log
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.log.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config errorLogType.
                     * @member {v2ray.core.app.log.LogType} errorLogType
                     * @memberof v2ray.core.app.log.Config
                     * @instance
                     */
                    Config.prototype.errorLogType = 0;

                    /**
                     * Config errorLogLevel.
                     * @member {v2ray.core.common.log.Severity} errorLogLevel
                     * @memberof v2ray.core.app.log.Config
                     * @instance
                     */
                    Config.prototype.errorLogLevel = 0;

                    /**
                     * Config errorLogPath.
                     * @member {string} errorLogPath
                     * @memberof v2ray.core.app.log.Config
                     * @instance
                     */
                    Config.prototype.errorLogPath = "";

                    /**
                     * Config accessLogType.
                     * @member {v2ray.core.app.log.LogType} accessLogType
                     * @memberof v2ray.core.app.log.Config
                     * @instance
                     */
                    Config.prototype.accessLogType = 0;

                    /**
                     * Config accessLogPath.
                     * @member {string} accessLogPath
                     * @memberof v2ray.core.app.log.Config
                     * @instance
                     */
                    Config.prototype.accessLogPath = "";

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {v2ray.core.app.log.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.log.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.log.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {v2ray.core.app.log.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.errorLogType != null && message.hasOwnProperty("errorLogType"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.errorLogType);
                        if (message.errorLogLevel != null && message.hasOwnProperty("errorLogLevel"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorLogLevel);
                        if (message.errorLogPath != null && message.hasOwnProperty("errorLogPath"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.errorLogPath);
                        if (message.accessLogType != null && message.hasOwnProperty("accessLogType"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.accessLogType);
                        if (message.accessLogPath != null && message.hasOwnProperty("accessLogPath"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.accessLogPath);
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.log.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {v2ray.core.app.log.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.log.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.log.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.errorLogType = reader.int32();
                                break;
                            case 2:
                                message.errorLogLevel = reader.int32();
                                break;
                            case 3:
                                message.errorLogPath = reader.string();
                                break;
                            case 4:
                                message.accessLogType = reader.int32();
                                break;
                            case 5:
                                message.accessLogPath = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.log.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.errorLogType != null && message.hasOwnProperty("errorLogType"))
                            switch (message.errorLogType) {
                            default:
                                return "errorLogType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.errorLogLevel != null && message.hasOwnProperty("errorLogLevel"))
                            switch (message.errorLogLevel) {
                            default:
                                return "errorLogLevel: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.errorLogPath != null && message.hasOwnProperty("errorLogPath"))
                            if (!$util.isString(message.errorLogPath))
                                return "errorLogPath: string expected";
                        if (message.accessLogType != null && message.hasOwnProperty("accessLogType"))
                            switch (message.accessLogType) {
                            default:
                                return "accessLogType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.accessLogPath != null && message.hasOwnProperty("accessLogPath"))
                            if (!$util.isString(message.accessLogPath))
                                return "accessLogPath: string expected";
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.log.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.log.Config)
                            return object;
                        var message = new $root.v2ray.core.app.log.Config();
                        switch (object.errorLogType) {
                        case "None":
                        case 0:
                            message.errorLogType = 0;
                            break;
                        case "Console":
                        case 1:
                            message.errorLogType = 1;
                            break;
                        case "File":
                        case 2:
                            message.errorLogType = 2;
                            break;
                        case "Event":
                        case 3:
                            message.errorLogType = 3;
                            break;
                        }
                        switch (object.errorLogLevel) {
                        case "Unknown":
                        case 0:
                            message.errorLogLevel = 0;
                            break;
                        case "Error":
                        case 1:
                            message.errorLogLevel = 1;
                            break;
                        case "Warning":
                        case 2:
                            message.errorLogLevel = 2;
                            break;
                        case "Info":
                        case 3:
                            message.errorLogLevel = 3;
                            break;
                        case "Debug":
                        case 4:
                            message.errorLogLevel = 4;
                            break;
                        }
                        if (object.errorLogPath != null)
                            message.errorLogPath = String(object.errorLogPath);
                        switch (object.accessLogType) {
                        case "None":
                        case 0:
                            message.accessLogType = 0;
                            break;
                        case "Console":
                        case 1:
                            message.accessLogType = 1;
                            break;
                        case "File":
                        case 2:
                            message.accessLogType = 2;
                            break;
                        case "Event":
                        case 3:
                            message.accessLogType = 3;
                            break;
                        }
                        if (object.accessLogPath != null)
                            message.accessLogPath = String(object.accessLogPath);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.log.Config
                     * @static
                     * @param {v2ray.core.app.log.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.errorLogType = options.enums === String ? "None" : 0;
                            object.errorLogLevel = options.enums === String ? "Unknown" : 0;
                            object.errorLogPath = "";
                            object.accessLogType = options.enums === String ? "None" : 0;
                            object.accessLogPath = "";
                        }
                        if (message.errorLogType != null && message.hasOwnProperty("errorLogType"))
                            object.errorLogType = options.enums === String ? $root.v2ray.core.app.log.LogType[message.errorLogType] : message.errorLogType;
                        if (message.errorLogLevel != null && message.hasOwnProperty("errorLogLevel"))
                            object.errorLogLevel = options.enums === String ? $root.v2ray.core.common.log.Severity[message.errorLogLevel] : message.errorLogLevel;
                        if (message.errorLogPath != null && message.hasOwnProperty("errorLogPath"))
                            object.errorLogPath = message.errorLogPath;
                        if (message.accessLogType != null && message.hasOwnProperty("accessLogType"))
                            object.accessLogType = options.enums === String ? $root.v2ray.core.app.log.LogType[message.accessLogType] : message.accessLogType;
                        if (message.accessLogPath != null && message.hasOwnProperty("accessLogPath"))
                            object.accessLogPath = message.accessLogPath;
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.log.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return log;
            })();

            app.policy = (function() {

                /**
                 * Namespace policy.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var policy = {};

                policy.Second = (function() {

                    /**
                     * Properties of a Second.
                     * @memberof v2ray.core.app.policy
                     * @interface ISecond
                     * @property {number|null} [value] Second value
                     */

                    /**
                     * Constructs a new Second.
                     * @memberof v2ray.core.app.policy
                     * @classdesc Represents a Second.
                     * @implements ISecond
                     * @constructor
                     * @param {v2ray.core.app.policy.ISecond=} [properties] Properties to set
                     */
                    function Second(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Second value.
                     * @member {number} value
                     * @memberof v2ray.core.app.policy.Second
                     * @instance
                     */
                    Second.prototype.value = 0;

                    /**
                     * Creates a new Second instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {v2ray.core.app.policy.ISecond=} [properties] Properties to set
                     * @returns {v2ray.core.app.policy.Second} Second instance
                     */
                    Second.create = function create(properties) {
                        return new Second(properties);
                    };

                    /**
                     * Encodes the specified Second message. Does not implicitly {@link v2ray.core.app.policy.Second.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {v2ray.core.app.policy.ISecond} message Second message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Second.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.value != null && message.hasOwnProperty("value"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                        return writer;
                    };

                    /**
                     * Encodes the specified Second message, length delimited. Does not implicitly {@link v2ray.core.app.policy.Second.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {v2ray.core.app.policy.ISecond} message Second message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Second.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Second message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.policy.Second} Second
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Second.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.Second();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.value = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Second message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.policy.Second} Second
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Second.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Second message.
                     * @function verify
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Second.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isInteger(message.value))
                                return "value: integer expected";
                        return null;
                    };

                    /**
                     * Creates a Second message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.policy.Second} Second
                     */
                    Second.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.policy.Second)
                            return object;
                        var message = new $root.v2ray.core.app.policy.Second();
                        if (object.value != null)
                            message.value = object.value >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Second message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.policy.Second
                     * @static
                     * @param {v2ray.core.app.policy.Second} message Second
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Second.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.value = 0;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        return object;
                    };

                    /**
                     * Converts this Second to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.policy.Second
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Second.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Second;
                })();

                policy.Policy = (function() {

                    /**
                     * Properties of a Policy.
                     * @memberof v2ray.core.app.policy
                     * @interface IPolicy
                     * @property {v2ray.core.app.policy.Policy.ITimeout|null} [timeout] Policy timeout
                     * @property {v2ray.core.app.policy.Policy.IStats|null} [stats] Policy stats
                     * @property {v2ray.core.app.policy.Policy.IBuffer|null} [buffer] Policy buffer
                     */

                    /**
                     * Constructs a new Policy.
                     * @memberof v2ray.core.app.policy
                     * @classdesc Represents a Policy.
                     * @implements IPolicy
                     * @constructor
                     * @param {v2ray.core.app.policy.IPolicy=} [properties] Properties to set
                     */
                    function Policy(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Policy timeout.
                     * @member {v2ray.core.app.policy.Policy.ITimeout|null|undefined} timeout
                     * @memberof v2ray.core.app.policy.Policy
                     * @instance
                     */
                    Policy.prototype.timeout = null;

                    /**
                     * Policy stats.
                     * @member {v2ray.core.app.policy.Policy.IStats|null|undefined} stats
                     * @memberof v2ray.core.app.policy.Policy
                     * @instance
                     */
                    Policy.prototype.stats = null;

                    /**
                     * Policy buffer.
                     * @member {v2ray.core.app.policy.Policy.IBuffer|null|undefined} buffer
                     * @memberof v2ray.core.app.policy.Policy
                     * @instance
                     */
                    Policy.prototype.buffer = null;

                    /**
                     * Creates a new Policy instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {v2ray.core.app.policy.IPolicy=} [properties] Properties to set
                     * @returns {v2ray.core.app.policy.Policy} Policy instance
                     */
                    Policy.create = function create(properties) {
                        return new Policy(properties);
                    };

                    /**
                     * Encodes the specified Policy message. Does not implicitly {@link v2ray.core.app.policy.Policy.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {v2ray.core.app.policy.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            $root.v2ray.core.app.policy.Policy.Timeout.encode(message.timeout, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.stats != null && message.hasOwnProperty("stats"))
                            $root.v2ray.core.app.policy.Policy.Stats.encode(message.stats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.buffer != null && message.hasOwnProperty("buffer"))
                            $root.v2ray.core.app.policy.Policy.Buffer.encode(message.buffer, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Policy message, length delimited. Does not implicitly {@link v2ray.core.app.policy.Policy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {v2ray.core.app.policy.IPolicy} message Policy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Policy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Policy message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.policy.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.Policy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.timeout = $root.v2ray.core.app.policy.Policy.Timeout.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.stats = $root.v2ray.core.app.policy.Policy.Stats.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.buffer = $root.v2ray.core.app.policy.Policy.Buffer.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Policy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.policy.Policy} Policy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Policy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Policy message.
                     * @function verify
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Policy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timeout != null && message.hasOwnProperty("timeout")) {
                            var error = $root.v2ray.core.app.policy.Policy.Timeout.verify(message.timeout);
                            if (error)
                                return "timeout." + error;
                        }
                        if (message.stats != null && message.hasOwnProperty("stats")) {
                            var error = $root.v2ray.core.app.policy.Policy.Stats.verify(message.stats);
                            if (error)
                                return "stats." + error;
                        }
                        if (message.buffer != null && message.hasOwnProperty("buffer")) {
                            var error = $root.v2ray.core.app.policy.Policy.Buffer.verify(message.buffer);
                            if (error)
                                return "buffer." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Policy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.policy.Policy} Policy
                     */
                    Policy.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.policy.Policy)
                            return object;
                        var message = new $root.v2ray.core.app.policy.Policy();
                        if (object.timeout != null) {
                            if (typeof object.timeout !== "object")
                                throw TypeError(".v2ray.core.app.policy.Policy.timeout: object expected");
                            message.timeout = $root.v2ray.core.app.policy.Policy.Timeout.fromObject(object.timeout);
                        }
                        if (object.stats != null) {
                            if (typeof object.stats !== "object")
                                throw TypeError(".v2ray.core.app.policy.Policy.stats: object expected");
                            message.stats = $root.v2ray.core.app.policy.Policy.Stats.fromObject(object.stats);
                        }
                        if (object.buffer != null) {
                            if (typeof object.buffer !== "object")
                                throw TypeError(".v2ray.core.app.policy.Policy.buffer: object expected");
                            message.buffer = $root.v2ray.core.app.policy.Policy.Buffer.fromObject(object.buffer);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Policy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.policy.Policy
                     * @static
                     * @param {v2ray.core.app.policy.Policy} message Policy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Policy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.timeout = null;
                            object.stats = null;
                            object.buffer = null;
                        }
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            object.timeout = $root.v2ray.core.app.policy.Policy.Timeout.toObject(message.timeout, options);
                        if (message.stats != null && message.hasOwnProperty("stats"))
                            object.stats = $root.v2ray.core.app.policy.Policy.Stats.toObject(message.stats, options);
                        if (message.buffer != null && message.hasOwnProperty("buffer"))
                            object.buffer = $root.v2ray.core.app.policy.Policy.Buffer.toObject(message.buffer, options);
                        return object;
                    };

                    /**
                     * Converts this Policy to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.policy.Policy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Policy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    Policy.Timeout = (function() {

                        /**
                         * Properties of a Timeout.
                         * @memberof v2ray.core.app.policy.Policy
                         * @interface ITimeout
                         * @property {v2ray.core.app.policy.ISecond|null} [handshake] Timeout handshake
                         * @property {v2ray.core.app.policy.ISecond|null} [connectionIdle] Timeout connectionIdle
                         * @property {v2ray.core.app.policy.ISecond|null} [uplinkOnly] Timeout uplinkOnly
                         * @property {v2ray.core.app.policy.ISecond|null} [downlinkOnly] Timeout downlinkOnly
                         */

                        /**
                         * Constructs a new Timeout.
                         * @memberof v2ray.core.app.policy.Policy
                         * @classdesc Represents a Timeout.
                         * @implements ITimeout
                         * @constructor
                         * @param {v2ray.core.app.policy.Policy.ITimeout=} [properties] Properties to set
                         */
                        function Timeout(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Timeout handshake.
                         * @member {v2ray.core.app.policy.ISecond|null|undefined} handshake
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @instance
                         */
                        Timeout.prototype.handshake = null;

                        /**
                         * Timeout connectionIdle.
                         * @member {v2ray.core.app.policy.ISecond|null|undefined} connectionIdle
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @instance
                         */
                        Timeout.prototype.connectionIdle = null;

                        /**
                         * Timeout uplinkOnly.
                         * @member {v2ray.core.app.policy.ISecond|null|undefined} uplinkOnly
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @instance
                         */
                        Timeout.prototype.uplinkOnly = null;

                        /**
                         * Timeout downlinkOnly.
                         * @member {v2ray.core.app.policy.ISecond|null|undefined} downlinkOnly
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @instance
                         */
                        Timeout.prototype.downlinkOnly = null;

                        /**
                         * Creates a new Timeout instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {v2ray.core.app.policy.Policy.ITimeout=} [properties] Properties to set
                         * @returns {v2ray.core.app.policy.Policy.Timeout} Timeout instance
                         */
                        Timeout.create = function create(properties) {
                            return new Timeout(properties);
                        };

                        /**
                         * Encodes the specified Timeout message. Does not implicitly {@link v2ray.core.app.policy.Policy.Timeout.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {v2ray.core.app.policy.Policy.ITimeout} message Timeout message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Timeout.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.handshake != null && message.hasOwnProperty("handshake"))
                                $root.v2ray.core.app.policy.Second.encode(message.handshake, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.connectionIdle != null && message.hasOwnProperty("connectionIdle"))
                                $root.v2ray.core.app.policy.Second.encode(message.connectionIdle, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.uplinkOnly != null && message.hasOwnProperty("uplinkOnly"))
                                $root.v2ray.core.app.policy.Second.encode(message.uplinkOnly, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.downlinkOnly != null && message.hasOwnProperty("downlinkOnly"))
                                $root.v2ray.core.app.policy.Second.encode(message.downlinkOnly, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Timeout message, length delimited. Does not implicitly {@link v2ray.core.app.policy.Policy.Timeout.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {v2ray.core.app.policy.Policy.ITimeout} message Timeout message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Timeout.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Timeout message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.policy.Policy.Timeout} Timeout
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Timeout.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.Policy.Timeout();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.handshake = $root.v2ray.core.app.policy.Second.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.connectionIdle = $root.v2ray.core.app.policy.Second.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.uplinkOnly = $root.v2ray.core.app.policy.Second.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.downlinkOnly = $root.v2ray.core.app.policy.Second.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Timeout message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.policy.Policy.Timeout} Timeout
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Timeout.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Timeout message.
                         * @function verify
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Timeout.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.handshake != null && message.hasOwnProperty("handshake")) {
                                var error = $root.v2ray.core.app.policy.Second.verify(message.handshake);
                                if (error)
                                    return "handshake." + error;
                            }
                            if (message.connectionIdle != null && message.hasOwnProperty("connectionIdle")) {
                                var error = $root.v2ray.core.app.policy.Second.verify(message.connectionIdle);
                                if (error)
                                    return "connectionIdle." + error;
                            }
                            if (message.uplinkOnly != null && message.hasOwnProperty("uplinkOnly")) {
                                var error = $root.v2ray.core.app.policy.Second.verify(message.uplinkOnly);
                                if (error)
                                    return "uplinkOnly." + error;
                            }
                            if (message.downlinkOnly != null && message.hasOwnProperty("downlinkOnly")) {
                                var error = $root.v2ray.core.app.policy.Second.verify(message.downlinkOnly);
                                if (error)
                                    return "downlinkOnly." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a Timeout message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.policy.Policy.Timeout} Timeout
                         */
                        Timeout.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.policy.Policy.Timeout)
                                return object;
                            var message = new $root.v2ray.core.app.policy.Policy.Timeout();
                            if (object.handshake != null) {
                                if (typeof object.handshake !== "object")
                                    throw TypeError(".v2ray.core.app.policy.Policy.Timeout.handshake: object expected");
                                message.handshake = $root.v2ray.core.app.policy.Second.fromObject(object.handshake);
                            }
                            if (object.connectionIdle != null) {
                                if (typeof object.connectionIdle !== "object")
                                    throw TypeError(".v2ray.core.app.policy.Policy.Timeout.connectionIdle: object expected");
                                message.connectionIdle = $root.v2ray.core.app.policy.Second.fromObject(object.connectionIdle);
                            }
                            if (object.uplinkOnly != null) {
                                if (typeof object.uplinkOnly !== "object")
                                    throw TypeError(".v2ray.core.app.policy.Policy.Timeout.uplinkOnly: object expected");
                                message.uplinkOnly = $root.v2ray.core.app.policy.Second.fromObject(object.uplinkOnly);
                            }
                            if (object.downlinkOnly != null) {
                                if (typeof object.downlinkOnly !== "object")
                                    throw TypeError(".v2ray.core.app.policy.Policy.Timeout.downlinkOnly: object expected");
                                message.downlinkOnly = $root.v2ray.core.app.policy.Second.fromObject(object.downlinkOnly);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Timeout message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @static
                         * @param {v2ray.core.app.policy.Policy.Timeout} message Timeout
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Timeout.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.handshake = null;
                                object.connectionIdle = null;
                                object.uplinkOnly = null;
                                object.downlinkOnly = null;
                            }
                            if (message.handshake != null && message.hasOwnProperty("handshake"))
                                object.handshake = $root.v2ray.core.app.policy.Second.toObject(message.handshake, options);
                            if (message.connectionIdle != null && message.hasOwnProperty("connectionIdle"))
                                object.connectionIdle = $root.v2ray.core.app.policy.Second.toObject(message.connectionIdle, options);
                            if (message.uplinkOnly != null && message.hasOwnProperty("uplinkOnly"))
                                object.uplinkOnly = $root.v2ray.core.app.policy.Second.toObject(message.uplinkOnly, options);
                            if (message.downlinkOnly != null && message.hasOwnProperty("downlinkOnly"))
                                object.downlinkOnly = $root.v2ray.core.app.policy.Second.toObject(message.downlinkOnly, options);
                            return object;
                        };

                        /**
                         * Converts this Timeout to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.policy.Policy.Timeout
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Timeout.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Timeout;
                    })();

                    Policy.Stats = (function() {

                        /**
                         * Properties of a Stats.
                         * @memberof v2ray.core.app.policy.Policy
                         * @interface IStats
                         * @property {boolean|null} [userUplink] Stats userUplink
                         * @property {boolean|null} [userDownlink] Stats userDownlink
                         */

                        /**
                         * Constructs a new Stats.
                         * @memberof v2ray.core.app.policy.Policy
                         * @classdesc Represents a Stats.
                         * @implements IStats
                         * @constructor
                         * @param {v2ray.core.app.policy.Policy.IStats=} [properties] Properties to set
                         */
                        function Stats(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Stats userUplink.
                         * @member {boolean} userUplink
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @instance
                         */
                        Stats.prototype.userUplink = false;

                        /**
                         * Stats userDownlink.
                         * @member {boolean} userDownlink
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @instance
                         */
                        Stats.prototype.userDownlink = false;

                        /**
                         * Creates a new Stats instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.Policy.IStats=} [properties] Properties to set
                         * @returns {v2ray.core.app.policy.Policy.Stats} Stats instance
                         */
                        Stats.create = function create(properties) {
                            return new Stats(properties);
                        };

                        /**
                         * Encodes the specified Stats message. Does not implicitly {@link v2ray.core.app.policy.Policy.Stats.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.Policy.IStats} message Stats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Stats.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.userUplink != null && message.hasOwnProperty("userUplink"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.userUplink);
                            if (message.userDownlink != null && message.hasOwnProperty("userDownlink"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.userDownlink);
                            return writer;
                        };

                        /**
                         * Encodes the specified Stats message, length delimited. Does not implicitly {@link v2ray.core.app.policy.Policy.Stats.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.Policy.IStats} message Stats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Stats.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Stats message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.policy.Policy.Stats} Stats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Stats.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.Policy.Stats();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.userUplink = reader.bool();
                                    break;
                                case 2:
                                    message.userDownlink = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Stats message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.policy.Policy.Stats} Stats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Stats.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Stats message.
                         * @function verify
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Stats.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.userUplink != null && message.hasOwnProperty("userUplink"))
                                if (typeof message.userUplink !== "boolean")
                                    return "userUplink: boolean expected";
                            if (message.userDownlink != null && message.hasOwnProperty("userDownlink"))
                                if (typeof message.userDownlink !== "boolean")
                                    return "userDownlink: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a Stats message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.policy.Policy.Stats} Stats
                         */
                        Stats.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.policy.Policy.Stats)
                                return object;
                            var message = new $root.v2ray.core.app.policy.Policy.Stats();
                            if (object.userUplink != null)
                                message.userUplink = Boolean(object.userUplink);
                            if (object.userDownlink != null)
                                message.userDownlink = Boolean(object.userDownlink);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Stats message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.Policy.Stats} message Stats
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Stats.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.userUplink = false;
                                object.userDownlink = false;
                            }
                            if (message.userUplink != null && message.hasOwnProperty("userUplink"))
                                object.userUplink = message.userUplink;
                            if (message.userDownlink != null && message.hasOwnProperty("userDownlink"))
                                object.userDownlink = message.userDownlink;
                            return object;
                        };

                        /**
                         * Converts this Stats to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.policy.Policy.Stats
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Stats.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Stats;
                    })();

                    Policy.Buffer = (function() {

                        /**
                         * Properties of a Buffer.
                         * @memberof v2ray.core.app.policy.Policy
                         * @interface IBuffer
                         * @property {number|null} [connection] Buffer connection
                         */

                        /**
                         * Constructs a new Buffer.
                         * @memberof v2ray.core.app.policy.Policy
                         * @classdesc Represents a Buffer.
                         * @implements IBuffer
                         * @constructor
                         * @param {v2ray.core.app.policy.Policy.IBuffer=} [properties] Properties to set
                         */
                        function Buffer(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Buffer connection.
                         * @member {number} connection
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @instance
                         */
                        Buffer.prototype.connection = 0;

                        /**
                         * Creates a new Buffer instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {v2ray.core.app.policy.Policy.IBuffer=} [properties] Properties to set
                         * @returns {v2ray.core.app.policy.Policy.Buffer} Buffer instance
                         */
                        Buffer.create = function create(properties) {
                            return new Buffer(properties);
                        };

                        /**
                         * Encodes the specified Buffer message. Does not implicitly {@link v2ray.core.app.policy.Policy.Buffer.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {v2ray.core.app.policy.Policy.IBuffer} message Buffer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Buffer.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.connection != null && message.hasOwnProperty("connection"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.connection);
                            return writer;
                        };

                        /**
                         * Encodes the specified Buffer message, length delimited. Does not implicitly {@link v2ray.core.app.policy.Policy.Buffer.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {v2ray.core.app.policy.Policy.IBuffer} message Buffer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Buffer.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Buffer message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.policy.Policy.Buffer} Buffer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Buffer.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.Policy.Buffer();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.connection = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Buffer message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.policy.Policy.Buffer} Buffer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Buffer.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Buffer message.
                         * @function verify
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Buffer.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.connection != null && message.hasOwnProperty("connection"))
                                if (!$util.isInteger(message.connection))
                                    return "connection: integer expected";
                            return null;
                        };

                        /**
                         * Creates a Buffer message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.policy.Policy.Buffer} Buffer
                         */
                        Buffer.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.policy.Policy.Buffer)
                                return object;
                            var message = new $root.v2ray.core.app.policy.Policy.Buffer();
                            if (object.connection != null)
                                message.connection = object.connection | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a Buffer message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @static
                         * @param {v2ray.core.app.policy.Policy.Buffer} message Buffer
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Buffer.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.connection = 0;
                            if (message.connection != null && message.hasOwnProperty("connection"))
                                object.connection = message.connection;
                            return object;
                        };

                        /**
                         * Converts this Buffer to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.policy.Policy.Buffer
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Buffer.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Buffer;
                    })();

                    return Policy;
                })();

                policy.SystemPolicy = (function() {

                    /**
                     * Properties of a SystemPolicy.
                     * @memberof v2ray.core.app.policy
                     * @interface ISystemPolicy
                     * @property {v2ray.core.app.policy.SystemPolicy.IStats|null} [stats] SystemPolicy stats
                     */

                    /**
                     * Constructs a new SystemPolicy.
                     * @memberof v2ray.core.app.policy
                     * @classdesc Represents a SystemPolicy.
                     * @implements ISystemPolicy
                     * @constructor
                     * @param {v2ray.core.app.policy.ISystemPolicy=} [properties] Properties to set
                     */
                    function SystemPolicy(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SystemPolicy stats.
                     * @member {v2ray.core.app.policy.SystemPolicy.IStats|null|undefined} stats
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @instance
                     */
                    SystemPolicy.prototype.stats = null;

                    /**
                     * Creates a new SystemPolicy instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {v2ray.core.app.policy.ISystemPolicy=} [properties] Properties to set
                     * @returns {v2ray.core.app.policy.SystemPolicy} SystemPolicy instance
                     */
                    SystemPolicy.create = function create(properties) {
                        return new SystemPolicy(properties);
                    };

                    /**
                     * Encodes the specified SystemPolicy message. Does not implicitly {@link v2ray.core.app.policy.SystemPolicy.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {v2ray.core.app.policy.ISystemPolicy} message SystemPolicy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SystemPolicy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.stats != null && message.hasOwnProperty("stats"))
                            $root.v2ray.core.app.policy.SystemPolicy.Stats.encode(message.stats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SystemPolicy message, length delimited. Does not implicitly {@link v2ray.core.app.policy.SystemPolicy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {v2ray.core.app.policy.ISystemPolicy} message SystemPolicy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SystemPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SystemPolicy message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.policy.SystemPolicy} SystemPolicy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SystemPolicy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.SystemPolicy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.stats = $root.v2ray.core.app.policy.SystemPolicy.Stats.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SystemPolicy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.policy.SystemPolicy} SystemPolicy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SystemPolicy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SystemPolicy message.
                     * @function verify
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SystemPolicy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.stats != null && message.hasOwnProperty("stats")) {
                            var error = $root.v2ray.core.app.policy.SystemPolicy.Stats.verify(message.stats);
                            if (error)
                                return "stats." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a SystemPolicy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.policy.SystemPolicy} SystemPolicy
                     */
                    SystemPolicy.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.policy.SystemPolicy)
                            return object;
                        var message = new $root.v2ray.core.app.policy.SystemPolicy();
                        if (object.stats != null) {
                            if (typeof object.stats !== "object")
                                throw TypeError(".v2ray.core.app.policy.SystemPolicy.stats: object expected");
                            message.stats = $root.v2ray.core.app.policy.SystemPolicy.Stats.fromObject(object.stats);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SystemPolicy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @static
                     * @param {v2ray.core.app.policy.SystemPolicy} message SystemPolicy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SystemPolicy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.stats = null;
                        if (message.stats != null && message.hasOwnProperty("stats"))
                            object.stats = $root.v2ray.core.app.policy.SystemPolicy.Stats.toObject(message.stats, options);
                        return object;
                    };

                    /**
                     * Converts this SystemPolicy to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.policy.SystemPolicy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SystemPolicy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    SystemPolicy.Stats = (function() {

                        /**
                         * Properties of a Stats.
                         * @memberof v2ray.core.app.policy.SystemPolicy
                         * @interface IStats
                         * @property {boolean|null} [inboundUplink] Stats inboundUplink
                         * @property {boolean|null} [inboundDownlink] Stats inboundDownlink
                         */

                        /**
                         * Constructs a new Stats.
                         * @memberof v2ray.core.app.policy.SystemPolicy
                         * @classdesc Represents a Stats.
                         * @implements IStats
                         * @constructor
                         * @param {v2ray.core.app.policy.SystemPolicy.IStats=} [properties] Properties to set
                         */
                        function Stats(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Stats inboundUplink.
                         * @member {boolean} inboundUplink
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @instance
                         */
                        Stats.prototype.inboundUplink = false;

                        /**
                         * Stats inboundDownlink.
                         * @member {boolean} inboundDownlink
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @instance
                         */
                        Stats.prototype.inboundDownlink = false;

                        /**
                         * Creates a new Stats instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.SystemPolicy.IStats=} [properties] Properties to set
                         * @returns {v2ray.core.app.policy.SystemPolicy.Stats} Stats instance
                         */
                        Stats.create = function create(properties) {
                            return new Stats(properties);
                        };

                        /**
                         * Encodes the specified Stats message. Does not implicitly {@link v2ray.core.app.policy.SystemPolicy.Stats.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.SystemPolicy.IStats} message Stats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Stats.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inboundUplink != null && message.hasOwnProperty("inboundUplink"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.inboundUplink);
                            if (message.inboundDownlink != null && message.hasOwnProperty("inboundDownlink"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.inboundDownlink);
                            return writer;
                        };

                        /**
                         * Encodes the specified Stats message, length delimited. Does not implicitly {@link v2ray.core.app.policy.SystemPolicy.Stats.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.SystemPolicy.IStats} message Stats message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Stats.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Stats message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.policy.SystemPolicy.Stats} Stats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Stats.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.SystemPolicy.Stats();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.inboundUplink = reader.bool();
                                    break;
                                case 2:
                                    message.inboundDownlink = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Stats message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.policy.SystemPolicy.Stats} Stats
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Stats.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Stats message.
                         * @function verify
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Stats.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inboundUplink != null && message.hasOwnProperty("inboundUplink"))
                                if (typeof message.inboundUplink !== "boolean")
                                    return "inboundUplink: boolean expected";
                            if (message.inboundDownlink != null && message.hasOwnProperty("inboundDownlink"))
                                if (typeof message.inboundDownlink !== "boolean")
                                    return "inboundDownlink: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a Stats message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.policy.SystemPolicy.Stats} Stats
                         */
                        Stats.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.policy.SystemPolicy.Stats)
                                return object;
                            var message = new $root.v2ray.core.app.policy.SystemPolicy.Stats();
                            if (object.inboundUplink != null)
                                message.inboundUplink = Boolean(object.inboundUplink);
                            if (object.inboundDownlink != null)
                                message.inboundDownlink = Boolean(object.inboundDownlink);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Stats message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @static
                         * @param {v2ray.core.app.policy.SystemPolicy.Stats} message Stats
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Stats.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.inboundUplink = false;
                                object.inboundDownlink = false;
                            }
                            if (message.inboundUplink != null && message.hasOwnProperty("inboundUplink"))
                                object.inboundUplink = message.inboundUplink;
                            if (message.inboundDownlink != null && message.hasOwnProperty("inboundDownlink"))
                                object.inboundDownlink = message.inboundDownlink;
                            return object;
                        };

                        /**
                         * Converts this Stats to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.policy.SystemPolicy.Stats
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Stats.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Stats;
                    })();

                    return SystemPolicy;
                })();

                policy.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.policy
                     * @interface IConfig
                     * @property {Object.<string,v2ray.core.app.policy.IPolicy>|null} [level] Config level
                     * @property {v2ray.core.app.policy.ISystemPolicy|null} [system] Config system
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.policy
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.policy.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        this.level = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config level.
                     * @member {Object.<string,v2ray.core.app.policy.IPolicy>} level
                     * @memberof v2ray.core.app.policy.Config
                     * @instance
                     */
                    Config.prototype.level = $util.emptyObject;

                    /**
                     * Config system.
                     * @member {v2ray.core.app.policy.ISystemPolicy|null|undefined} system
                     * @memberof v2ray.core.app.policy.Config
                     * @instance
                     */
                    Config.prototype.system = null;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {v2ray.core.app.policy.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.policy.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.policy.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {v2ray.core.app.policy.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.level != null && message.hasOwnProperty("level"))
                            for (var keys = Object.keys(message.level), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).uint32(keys[i]);
                                $root.v2ray.core.app.policy.Policy.encode(message.level[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.system != null && message.hasOwnProperty("system"))
                            $root.v2ray.core.app.policy.SystemPolicy.encode(message.system, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.policy.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {v2ray.core.app.policy.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.policy.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.policy.Config(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                reader.skip().pos++;
                                if (message.level === $util.emptyObject)
                                    message.level = {};
                                key = reader.uint32();
                                reader.pos++;
                                message.level[key] = $root.v2ray.core.app.policy.Policy.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.system = $root.v2ray.core.app.policy.SystemPolicy.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.policy.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.level != null && message.hasOwnProperty("level")) {
                            if (!$util.isObject(message.level))
                                return "level: object expected";
                            var key = Object.keys(message.level);
                            for (var i = 0; i < key.length; ++i) {
                                if (!$util.key32Re.test(key[i]))
                                    return "level: integer key{k:uint32} expected";
                                {
                                    var error = $root.v2ray.core.app.policy.Policy.verify(message.level[key[i]]);
                                    if (error)
                                        return "level." + error;
                                }
                            }
                        }
                        if (message.system != null && message.hasOwnProperty("system")) {
                            var error = $root.v2ray.core.app.policy.SystemPolicy.verify(message.system);
                            if (error)
                                return "system." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.policy.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.policy.Config)
                            return object;
                        var message = new $root.v2ray.core.app.policy.Config();
                        if (object.level) {
                            if (typeof object.level !== "object")
                                throw TypeError(".v2ray.core.app.policy.Config.level: object expected");
                            message.level = {};
                            for (var keys = Object.keys(object.level), i = 0; i < keys.length; ++i) {
                                if (typeof object.level[keys[i]] !== "object")
                                    throw TypeError(".v2ray.core.app.policy.Config.level: object expected");
                                message.level[keys[i]] = $root.v2ray.core.app.policy.Policy.fromObject(object.level[keys[i]]);
                            }
                        }
                        if (object.system != null) {
                            if (typeof object.system !== "object")
                                throw TypeError(".v2ray.core.app.policy.Config.system: object expected");
                            message.system = $root.v2ray.core.app.policy.SystemPolicy.fromObject(object.system);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.policy.Config
                     * @static
                     * @param {v2ray.core.app.policy.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.level = {};
                        if (options.defaults)
                            object.system = null;
                        var keys2;
                        if (message.level && (keys2 = Object.keys(message.level)).length) {
                            object.level = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.level[keys2[j]] = $root.v2ray.core.app.policy.Policy.toObject(message.level[keys2[j]], options);
                        }
                        if (message.system != null && message.hasOwnProperty("system"))
                            object.system = $root.v2ray.core.app.policy.SystemPolicy.toObject(message.system, options);
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.policy.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return policy;
            })();

            app.proxyman = (function() {

                /**
                 * Namespace proxyman.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var proxyman = {};

                proxyman.command = (function() {

                    /**
                     * Namespace command.
                     * @memberof v2ray.core.app.proxyman
                     * @namespace
                     */
                    var command = {};

                    command.AddUserOperation = (function() {

                        /**
                         * Properties of an AddUserOperation.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAddUserOperation
                         * @property {v2ray.core.common.protocol.IUser|null} [user] AddUserOperation user
                         */

                        /**
                         * Constructs a new AddUserOperation.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AddUserOperation.
                         * @implements IAddUserOperation
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAddUserOperation=} [properties] Properties to set
                         */
                        function AddUserOperation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AddUserOperation user.
                         * @member {v2ray.core.common.protocol.IUser|null|undefined} user
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @instance
                         */
                        AddUserOperation.prototype.user = null;

                        /**
                         * Creates a new AddUserOperation instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddUserOperation=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AddUserOperation} AddUserOperation instance
                         */
                        AddUserOperation.create = function create(properties) {
                            return new AddUserOperation(properties);
                        };

                        /**
                         * Encodes the specified AddUserOperation message. Does not implicitly {@link v2ray.core.app.proxyman.command.AddUserOperation.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddUserOperation} message AddUserOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddUserOperation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.user != null && message.hasOwnProperty("user"))
                                $root.v2ray.core.common.protocol.User.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AddUserOperation message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AddUserOperation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddUserOperation} message AddUserOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddUserOperation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AddUserOperation message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AddUserOperation} AddUserOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddUserOperation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AddUserOperation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.user = $root.v2ray.core.common.protocol.User.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AddUserOperation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AddUserOperation} AddUserOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddUserOperation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AddUserOperation message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AddUserOperation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.user != null && message.hasOwnProperty("user")) {
                                var error = $root.v2ray.core.common.protocol.User.verify(message.user);
                                if (error)
                                    return "user." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AddUserOperation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AddUserOperation} AddUserOperation
                         */
                        AddUserOperation.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AddUserOperation)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.AddUserOperation();
                            if (object.user != null) {
                                if (typeof object.user !== "object")
                                    throw TypeError(".v2ray.core.app.proxyman.command.AddUserOperation.user: object expected");
                                message.user = $root.v2ray.core.common.protocol.User.fromObject(object.user);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AddUserOperation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AddUserOperation} message AddUserOperation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AddUserOperation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.user = null;
                            if (message.user != null && message.hasOwnProperty("user"))
                                object.user = $root.v2ray.core.common.protocol.User.toObject(message.user, options);
                            return object;
                        };

                        /**
                         * Converts this AddUserOperation to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AddUserOperation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AddUserOperation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AddUserOperation;
                    })();

                    command.RemoveUserOperation = (function() {

                        /**
                         * Properties of a RemoveUserOperation.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IRemoveUserOperation
                         * @property {string|null} [email] RemoveUserOperation email
                         */

                        /**
                         * Constructs a new RemoveUserOperation.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents a RemoveUserOperation.
                         * @implements IRemoveUserOperation
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IRemoveUserOperation=} [properties] Properties to set
                         */
                        function RemoveUserOperation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * RemoveUserOperation email.
                         * @member {string} email
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @instance
                         */
                        RemoveUserOperation.prototype.email = "";

                        /**
                         * Creates a new RemoveUserOperation instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveUserOperation=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.RemoveUserOperation} RemoveUserOperation instance
                         */
                        RemoveUserOperation.create = function create(properties) {
                            return new RemoveUserOperation(properties);
                        };

                        /**
                         * Encodes the specified RemoveUserOperation message. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveUserOperation.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveUserOperation} message RemoveUserOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveUserOperation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.email != null && message.hasOwnProperty("email"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.email);
                            return writer;
                        };

                        /**
                         * Encodes the specified RemoveUserOperation message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveUserOperation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveUserOperation} message RemoveUserOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveUserOperation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RemoveUserOperation message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.RemoveUserOperation} RemoveUserOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveUserOperation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.RemoveUserOperation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.email = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RemoveUserOperation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.RemoveUserOperation} RemoveUserOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveUserOperation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RemoveUserOperation message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RemoveUserOperation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.email != null && message.hasOwnProperty("email"))
                                if (!$util.isString(message.email))
                                    return "email: string expected";
                            return null;
                        };

                        /**
                         * Creates a RemoveUserOperation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.RemoveUserOperation} RemoveUserOperation
                         */
                        RemoveUserOperation.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.RemoveUserOperation)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.RemoveUserOperation();
                            if (object.email != null)
                                message.email = String(object.email);
                            return message;
                        };

                        /**
                         * Creates a plain object from a RemoveUserOperation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @static
                         * @param {v2ray.core.app.proxyman.command.RemoveUserOperation} message RemoveUserOperation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RemoveUserOperation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.email = "";
                            if (message.email != null && message.hasOwnProperty("email"))
                                object.email = message.email;
                            return object;
                        };

                        /**
                         * Converts this RemoveUserOperation to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.RemoveUserOperation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RemoveUserOperation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return RemoveUserOperation;
                    })();

                    command.AddInboundRequest = (function() {

                        /**
                         * Properties of an AddInboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAddInboundRequest
                         * @property {v2ray.core.IInboundHandlerConfig|null} [inbound] AddInboundRequest inbound
                         */

                        /**
                         * Constructs a new AddInboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AddInboundRequest.
                         * @implements IAddInboundRequest
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAddInboundRequest=} [properties] Properties to set
                         */
                        function AddInboundRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AddInboundRequest inbound.
                         * @member {v2ray.core.IInboundHandlerConfig|null|undefined} inbound
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @instance
                         */
                        AddInboundRequest.prototype.inbound = null;

                        /**
                         * Creates a new AddInboundRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddInboundRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AddInboundRequest} AddInboundRequest instance
                         */
                        AddInboundRequest.create = function create(properties) {
                            return new AddInboundRequest(properties);
                        };

                        /**
                         * Encodes the specified AddInboundRequest message. Does not implicitly {@link v2ray.core.app.proxyman.command.AddInboundRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddInboundRequest} message AddInboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddInboundRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inbound != null && message.hasOwnProperty("inbound"))
                                $root.v2ray.core.InboundHandlerConfig.encode(message.inbound, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AddInboundRequest message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AddInboundRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddInboundRequest} message AddInboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddInboundRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AddInboundRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AddInboundRequest} AddInboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddInboundRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AddInboundRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.inbound = $root.v2ray.core.InboundHandlerConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AddInboundRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AddInboundRequest} AddInboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddInboundRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AddInboundRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AddInboundRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inbound != null && message.hasOwnProperty("inbound")) {
                                var error = $root.v2ray.core.InboundHandlerConfig.verify(message.inbound);
                                if (error)
                                    return "inbound." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AddInboundRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AddInboundRequest} AddInboundRequest
                         */
                        AddInboundRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AddInboundRequest)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.AddInboundRequest();
                            if (object.inbound != null) {
                                if (typeof object.inbound !== "object")
                                    throw TypeError(".v2ray.core.app.proxyman.command.AddInboundRequest.inbound: object expected");
                                message.inbound = $root.v2ray.core.InboundHandlerConfig.fromObject(object.inbound);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AddInboundRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AddInboundRequest} message AddInboundRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AddInboundRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.inbound = null;
                            if (message.inbound != null && message.hasOwnProperty("inbound"))
                                object.inbound = $root.v2ray.core.InboundHandlerConfig.toObject(message.inbound, options);
                            return object;
                        };

                        /**
                         * Converts this AddInboundRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AddInboundRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AddInboundRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AddInboundRequest;
                    })();

                    command.AddInboundResponse = (function() {

                        /**
                         * Properties of an AddInboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAddInboundResponse
                         */

                        /**
                         * Constructs a new AddInboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AddInboundResponse.
                         * @implements IAddInboundResponse
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAddInboundResponse=} [properties] Properties to set
                         */
                        function AddInboundResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new AddInboundResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddInboundResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AddInboundResponse} AddInboundResponse instance
                         */
                        AddInboundResponse.create = function create(properties) {
                            return new AddInboundResponse(properties);
                        };

                        /**
                         * Encodes the specified AddInboundResponse message. Does not implicitly {@link v2ray.core.app.proxyman.command.AddInboundResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddInboundResponse} message AddInboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddInboundResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified AddInboundResponse message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AddInboundResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddInboundResponse} message AddInboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddInboundResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AddInboundResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AddInboundResponse} AddInboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddInboundResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AddInboundResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AddInboundResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AddInboundResponse} AddInboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddInboundResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AddInboundResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AddInboundResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates an AddInboundResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AddInboundResponse} AddInboundResponse
                         */
                        AddInboundResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AddInboundResponse)
                                return object;
                            return new $root.v2ray.core.app.proxyman.command.AddInboundResponse();
                        };

                        /**
                         * Creates a plain object from an AddInboundResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AddInboundResponse} message AddInboundResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AddInboundResponse.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this AddInboundResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AddInboundResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AddInboundResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AddInboundResponse;
                    })();

                    command.RemoveInboundRequest = (function() {

                        /**
                         * Properties of a RemoveInboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IRemoveInboundRequest
                         * @property {string|null} [tag] RemoveInboundRequest tag
                         */

                        /**
                         * Constructs a new RemoveInboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents a RemoveInboundRequest.
                         * @implements IRemoveInboundRequest
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundRequest=} [properties] Properties to set
                         */
                        function RemoveInboundRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * RemoveInboundRequest tag.
                         * @member {string} tag
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @instance
                         */
                        RemoveInboundRequest.prototype.tag = "";

                        /**
                         * Creates a new RemoveInboundRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundRequest} RemoveInboundRequest instance
                         */
                        RemoveInboundRequest.create = function create(properties) {
                            return new RemoveInboundRequest(properties);
                        };

                        /**
                         * Encodes the specified RemoveInboundRequest message. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveInboundRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundRequest} message RemoveInboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveInboundRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                            return writer;
                        };

                        /**
                         * Encodes the specified RemoveInboundRequest message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveInboundRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundRequest} message RemoveInboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveInboundRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RemoveInboundRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundRequest} RemoveInboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveInboundRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.RemoveInboundRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.tag = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RemoveInboundRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundRequest} RemoveInboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveInboundRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RemoveInboundRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RemoveInboundRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                if (!$util.isString(message.tag))
                                    return "tag: string expected";
                            return null;
                        };

                        /**
                         * Creates a RemoveInboundRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundRequest} RemoveInboundRequest
                         */
                        RemoveInboundRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.RemoveInboundRequest)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.RemoveInboundRequest();
                            if (object.tag != null)
                                message.tag = String(object.tag);
                            return message;
                        };

                        /**
                         * Creates a plain object from a RemoveInboundRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.RemoveInboundRequest} message RemoveInboundRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RemoveInboundRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.tag = "";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                object.tag = message.tag;
                            return object;
                        };

                        /**
                         * Converts this RemoveInboundRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RemoveInboundRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return RemoveInboundRequest;
                    })();

                    command.RemoveInboundResponse = (function() {

                        /**
                         * Properties of a RemoveInboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IRemoveInboundResponse
                         */

                        /**
                         * Constructs a new RemoveInboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents a RemoveInboundResponse.
                         * @implements IRemoveInboundResponse
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundResponse=} [properties] Properties to set
                         */
                        function RemoveInboundResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new RemoveInboundResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundResponse} RemoveInboundResponse instance
                         */
                        RemoveInboundResponse.create = function create(properties) {
                            return new RemoveInboundResponse(properties);
                        };

                        /**
                         * Encodes the specified RemoveInboundResponse message. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveInboundResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundResponse} message RemoveInboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveInboundResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified RemoveInboundResponse message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveInboundResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundResponse} message RemoveInboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveInboundResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RemoveInboundResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundResponse} RemoveInboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveInboundResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.RemoveInboundResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RemoveInboundResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundResponse} RemoveInboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveInboundResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RemoveInboundResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RemoveInboundResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a RemoveInboundResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.RemoveInboundResponse} RemoveInboundResponse
                         */
                        RemoveInboundResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.RemoveInboundResponse)
                                return object;
                            return new $root.v2ray.core.app.proxyman.command.RemoveInboundResponse();
                        };

                        /**
                         * Creates a plain object from a RemoveInboundResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.RemoveInboundResponse} message RemoveInboundResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RemoveInboundResponse.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this RemoveInboundResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.RemoveInboundResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RemoveInboundResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return RemoveInboundResponse;
                    })();

                    command.AlterInboundRequest = (function() {

                        /**
                         * Properties of an AlterInboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAlterInboundRequest
                         * @property {string|null} [tag] AlterInboundRequest tag
                         * @property {v2ray.core.common.serial.ITypedMessage|null} [operation] AlterInboundRequest operation
                         */

                        /**
                         * Constructs a new AlterInboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AlterInboundRequest.
                         * @implements IAlterInboundRequest
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundRequest=} [properties] Properties to set
                         */
                        function AlterInboundRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AlterInboundRequest tag.
                         * @member {string} tag
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @instance
                         */
                        AlterInboundRequest.prototype.tag = "";

                        /**
                         * AlterInboundRequest operation.
                         * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} operation
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @instance
                         */
                        AlterInboundRequest.prototype.operation = null;

                        /**
                         * Creates a new AlterInboundRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundRequest} AlterInboundRequest instance
                         */
                        AlterInboundRequest.create = function create(properties) {
                            return new AlterInboundRequest(properties);
                        };

                        /**
                         * Encodes the specified AlterInboundRequest message. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterInboundRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundRequest} message AlterInboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterInboundRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                $root.v2ray.core.common.serial.TypedMessage.encode(message.operation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AlterInboundRequest message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterInboundRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundRequest} message AlterInboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterInboundRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AlterInboundRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundRequest} AlterInboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterInboundRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AlterInboundRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.tag = reader.string();
                                    break;
                                case 2:
                                    message.operation = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AlterInboundRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundRequest} AlterInboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterInboundRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AlterInboundRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AlterInboundRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                if (!$util.isString(message.tag))
                                    return "tag: string expected";
                            if (message.operation != null && message.hasOwnProperty("operation")) {
                                var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.operation);
                                if (error)
                                    return "operation." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AlterInboundRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundRequest} AlterInboundRequest
                         */
                        AlterInboundRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AlterInboundRequest)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.AlterInboundRequest();
                            if (object.tag != null)
                                message.tag = String(object.tag);
                            if (object.operation != null) {
                                if (typeof object.operation !== "object")
                                    throw TypeError(".v2ray.core.app.proxyman.command.AlterInboundRequest.operation: object expected");
                                message.operation = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.operation);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AlterInboundRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AlterInboundRequest} message AlterInboundRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AlterInboundRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.tag = "";
                                object.operation = null;
                            }
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                object.tag = message.tag;
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                object.operation = $root.v2ray.core.common.serial.TypedMessage.toObject(message.operation, options);
                            return object;
                        };

                        /**
                         * Converts this AlterInboundRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AlterInboundRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AlterInboundRequest;
                    })();

                    command.AlterInboundResponse = (function() {

                        /**
                         * Properties of an AlterInboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAlterInboundResponse
                         */

                        /**
                         * Constructs a new AlterInboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AlterInboundResponse.
                         * @implements IAlterInboundResponse
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundResponse=} [properties] Properties to set
                         */
                        function AlterInboundResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new AlterInboundResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundResponse} AlterInboundResponse instance
                         */
                        AlterInboundResponse.create = function create(properties) {
                            return new AlterInboundResponse(properties);
                        };

                        /**
                         * Encodes the specified AlterInboundResponse message. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterInboundResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundResponse} message AlterInboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterInboundResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified AlterInboundResponse message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterInboundResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundResponse} message AlterInboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterInboundResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AlterInboundResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundResponse} AlterInboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterInboundResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AlterInboundResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AlterInboundResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundResponse} AlterInboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterInboundResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AlterInboundResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AlterInboundResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates an AlterInboundResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AlterInboundResponse} AlterInboundResponse
                         */
                        AlterInboundResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AlterInboundResponse)
                                return object;
                            return new $root.v2ray.core.app.proxyman.command.AlterInboundResponse();
                        };

                        /**
                         * Creates a plain object from an AlterInboundResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AlterInboundResponse} message AlterInboundResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AlterInboundResponse.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this AlterInboundResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AlterInboundResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AlterInboundResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AlterInboundResponse;
                    })();

                    command.AddOutboundRequest = (function() {

                        /**
                         * Properties of an AddOutboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAddOutboundRequest
                         * @property {v2ray.core.IOutboundHandlerConfig|null} [outbound] AddOutboundRequest outbound
                         */

                        /**
                         * Constructs a new AddOutboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AddOutboundRequest.
                         * @implements IAddOutboundRequest
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundRequest=} [properties] Properties to set
                         */
                        function AddOutboundRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AddOutboundRequest outbound.
                         * @member {v2ray.core.IOutboundHandlerConfig|null|undefined} outbound
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @instance
                         */
                        AddOutboundRequest.prototype.outbound = null;

                        /**
                         * Creates a new AddOutboundRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundRequest} AddOutboundRequest instance
                         */
                        AddOutboundRequest.create = function create(properties) {
                            return new AddOutboundRequest(properties);
                        };

                        /**
                         * Encodes the specified AddOutboundRequest message. Does not implicitly {@link v2ray.core.app.proxyman.command.AddOutboundRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundRequest} message AddOutboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddOutboundRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.outbound != null && message.hasOwnProperty("outbound"))
                                $root.v2ray.core.OutboundHandlerConfig.encode(message.outbound, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AddOutboundRequest message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AddOutboundRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundRequest} message AddOutboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddOutboundRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AddOutboundRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundRequest} AddOutboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddOutboundRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AddOutboundRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.outbound = $root.v2ray.core.OutboundHandlerConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AddOutboundRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundRequest} AddOutboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddOutboundRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AddOutboundRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AddOutboundRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.outbound != null && message.hasOwnProperty("outbound")) {
                                var error = $root.v2ray.core.OutboundHandlerConfig.verify(message.outbound);
                                if (error)
                                    return "outbound." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AddOutboundRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundRequest} AddOutboundRequest
                         */
                        AddOutboundRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AddOutboundRequest)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.AddOutboundRequest();
                            if (object.outbound != null) {
                                if (typeof object.outbound !== "object")
                                    throw TypeError(".v2ray.core.app.proxyman.command.AddOutboundRequest.outbound: object expected");
                                message.outbound = $root.v2ray.core.OutboundHandlerConfig.fromObject(object.outbound);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AddOutboundRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AddOutboundRequest} message AddOutboundRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AddOutboundRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.outbound = null;
                            if (message.outbound != null && message.hasOwnProperty("outbound"))
                                object.outbound = $root.v2ray.core.OutboundHandlerConfig.toObject(message.outbound, options);
                            return object;
                        };

                        /**
                         * Converts this AddOutboundRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AddOutboundRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AddOutboundRequest;
                    })();

                    command.AddOutboundResponse = (function() {

                        /**
                         * Properties of an AddOutboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAddOutboundResponse
                         */

                        /**
                         * Constructs a new AddOutboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AddOutboundResponse.
                         * @implements IAddOutboundResponse
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundResponse=} [properties] Properties to set
                         */
                        function AddOutboundResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new AddOutboundResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundResponse} AddOutboundResponse instance
                         */
                        AddOutboundResponse.create = function create(properties) {
                            return new AddOutboundResponse(properties);
                        };

                        /**
                         * Encodes the specified AddOutboundResponse message. Does not implicitly {@link v2ray.core.app.proxyman.command.AddOutboundResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundResponse} message AddOutboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddOutboundResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified AddOutboundResponse message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AddOutboundResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundResponse} message AddOutboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AddOutboundResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AddOutboundResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundResponse} AddOutboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddOutboundResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AddOutboundResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AddOutboundResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundResponse} AddOutboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AddOutboundResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AddOutboundResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AddOutboundResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates an AddOutboundResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AddOutboundResponse} AddOutboundResponse
                         */
                        AddOutboundResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AddOutboundResponse)
                                return object;
                            return new $root.v2ray.core.app.proxyman.command.AddOutboundResponse();
                        };

                        /**
                         * Creates a plain object from an AddOutboundResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AddOutboundResponse} message AddOutboundResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AddOutboundResponse.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this AddOutboundResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AddOutboundResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AddOutboundResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AddOutboundResponse;
                    })();

                    command.RemoveOutboundRequest = (function() {

                        /**
                         * Properties of a RemoveOutboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IRemoveOutboundRequest
                         * @property {string|null} [tag] RemoveOutboundRequest tag
                         */

                        /**
                         * Constructs a new RemoveOutboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents a RemoveOutboundRequest.
                         * @implements IRemoveOutboundRequest
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundRequest=} [properties] Properties to set
                         */
                        function RemoveOutboundRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * RemoveOutboundRequest tag.
                         * @member {string} tag
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @instance
                         */
                        RemoveOutboundRequest.prototype.tag = "";

                        /**
                         * Creates a new RemoveOutboundRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundRequest} RemoveOutboundRequest instance
                         */
                        RemoveOutboundRequest.create = function create(properties) {
                            return new RemoveOutboundRequest(properties);
                        };

                        /**
                         * Encodes the specified RemoveOutboundRequest message. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveOutboundRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundRequest} message RemoveOutboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveOutboundRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                            return writer;
                        };

                        /**
                         * Encodes the specified RemoveOutboundRequest message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveOutboundRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundRequest} message RemoveOutboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveOutboundRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RemoveOutboundRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundRequest} RemoveOutboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveOutboundRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.RemoveOutboundRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.tag = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RemoveOutboundRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundRequest} RemoveOutboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveOutboundRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RemoveOutboundRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RemoveOutboundRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                if (!$util.isString(message.tag))
                                    return "tag: string expected";
                            return null;
                        };

                        /**
                         * Creates a RemoveOutboundRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundRequest} RemoveOutboundRequest
                         */
                        RemoveOutboundRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.RemoveOutboundRequest)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.RemoveOutboundRequest();
                            if (object.tag != null)
                                message.tag = String(object.tag);
                            return message;
                        };

                        /**
                         * Creates a plain object from a RemoveOutboundRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.RemoveOutboundRequest} message RemoveOutboundRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RemoveOutboundRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.tag = "";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                object.tag = message.tag;
                            return object;
                        };

                        /**
                         * Converts this RemoveOutboundRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RemoveOutboundRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return RemoveOutboundRequest;
                    })();

                    command.RemoveOutboundResponse = (function() {

                        /**
                         * Properties of a RemoveOutboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IRemoveOutboundResponse
                         */

                        /**
                         * Constructs a new RemoveOutboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents a RemoveOutboundResponse.
                         * @implements IRemoveOutboundResponse
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundResponse=} [properties] Properties to set
                         */
                        function RemoveOutboundResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new RemoveOutboundResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundResponse} RemoveOutboundResponse instance
                         */
                        RemoveOutboundResponse.create = function create(properties) {
                            return new RemoveOutboundResponse(properties);
                        };

                        /**
                         * Encodes the specified RemoveOutboundResponse message. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveOutboundResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundResponse} message RemoveOutboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveOutboundResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified RemoveOutboundResponse message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.RemoveOutboundResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundResponse} message RemoveOutboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RemoveOutboundResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RemoveOutboundResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundResponse} RemoveOutboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveOutboundResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.RemoveOutboundResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RemoveOutboundResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundResponse} RemoveOutboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RemoveOutboundResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RemoveOutboundResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RemoveOutboundResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a RemoveOutboundResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.RemoveOutboundResponse} RemoveOutboundResponse
                         */
                        RemoveOutboundResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.RemoveOutboundResponse)
                                return object;
                            return new $root.v2ray.core.app.proxyman.command.RemoveOutboundResponse();
                        };

                        /**
                         * Creates a plain object from a RemoveOutboundResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.RemoveOutboundResponse} message RemoveOutboundResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RemoveOutboundResponse.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this RemoveOutboundResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.RemoveOutboundResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RemoveOutboundResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return RemoveOutboundResponse;
                    })();

                    command.AlterOutboundRequest = (function() {

                        /**
                         * Properties of an AlterOutboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAlterOutboundRequest
                         * @property {string|null} [tag] AlterOutboundRequest tag
                         * @property {v2ray.core.common.serial.ITypedMessage|null} [operation] AlterOutboundRequest operation
                         */

                        /**
                         * Constructs a new AlterOutboundRequest.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AlterOutboundRequest.
                         * @implements IAlterOutboundRequest
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundRequest=} [properties] Properties to set
                         */
                        function AlterOutboundRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AlterOutboundRequest tag.
                         * @member {string} tag
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @instance
                         */
                        AlterOutboundRequest.prototype.tag = "";

                        /**
                         * AlterOutboundRequest operation.
                         * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} operation
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @instance
                         */
                        AlterOutboundRequest.prototype.operation = null;

                        /**
                         * Creates a new AlterOutboundRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundRequest} AlterOutboundRequest instance
                         */
                        AlterOutboundRequest.create = function create(properties) {
                            return new AlterOutboundRequest(properties);
                        };

                        /**
                         * Encodes the specified AlterOutboundRequest message. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterOutboundRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundRequest} message AlterOutboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterOutboundRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                $root.v2ray.core.common.serial.TypedMessage.encode(message.operation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified AlterOutboundRequest message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterOutboundRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundRequest} message AlterOutboundRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterOutboundRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AlterOutboundRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundRequest} AlterOutboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterOutboundRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AlterOutboundRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.tag = reader.string();
                                    break;
                                case 2:
                                    message.operation = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AlterOutboundRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundRequest} AlterOutboundRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterOutboundRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AlterOutboundRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AlterOutboundRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                if (!$util.isString(message.tag))
                                    return "tag: string expected";
                            if (message.operation != null && message.hasOwnProperty("operation")) {
                                var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.operation);
                                if (error)
                                    return "operation." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates an AlterOutboundRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundRequest} AlterOutboundRequest
                         */
                        AlterOutboundRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AlterOutboundRequest)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.command.AlterOutboundRequest();
                            if (object.tag != null)
                                message.tag = String(object.tag);
                            if (object.operation != null) {
                                if (typeof object.operation !== "object")
                                    throw TypeError(".v2ray.core.app.proxyman.command.AlterOutboundRequest.operation: object expected");
                                message.operation = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.operation);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an AlterOutboundRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AlterOutboundRequest} message AlterOutboundRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AlterOutboundRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.tag = "";
                                object.operation = null;
                            }
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                object.tag = message.tag;
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                object.operation = $root.v2ray.core.common.serial.TypedMessage.toObject(message.operation, options);
                            return object;
                        };

                        /**
                         * Converts this AlterOutboundRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AlterOutboundRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AlterOutboundRequest;
                    })();

                    command.AlterOutboundResponse = (function() {

                        /**
                         * Properties of an AlterOutboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IAlterOutboundResponse
                         */

                        /**
                         * Constructs a new AlterOutboundResponse.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents an AlterOutboundResponse.
                         * @implements IAlterOutboundResponse
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundResponse=} [properties] Properties to set
                         */
                        function AlterOutboundResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new AlterOutboundResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundResponse} AlterOutboundResponse instance
                         */
                        AlterOutboundResponse.create = function create(properties) {
                            return new AlterOutboundResponse(properties);
                        };

                        /**
                         * Encodes the specified AlterOutboundResponse message. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterOutboundResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundResponse} message AlterOutboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterOutboundResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified AlterOutboundResponse message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.AlterOutboundResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundResponse} message AlterOutboundResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AlterOutboundResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AlterOutboundResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundResponse} AlterOutboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterOutboundResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.AlterOutboundResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AlterOutboundResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundResponse} AlterOutboundResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AlterOutboundResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AlterOutboundResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AlterOutboundResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates an AlterOutboundResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.AlterOutboundResponse} AlterOutboundResponse
                         */
                        AlterOutboundResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.AlterOutboundResponse)
                                return object;
                            return new $root.v2ray.core.app.proxyman.command.AlterOutboundResponse();
                        };

                        /**
                         * Creates a plain object from an AlterOutboundResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @static
                         * @param {v2ray.core.app.proxyman.command.AlterOutboundResponse} message AlterOutboundResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AlterOutboundResponse.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this AlterOutboundResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.AlterOutboundResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AlterOutboundResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AlterOutboundResponse;
                    })();

                    command.HandlerService = (function() {

                        /**
                         * Constructs a new HandlerService service.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents a HandlerService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function HandlerService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }

                        (HandlerService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = HandlerService;

                        /**
                         * Creates new HandlerService service using the specified rpc implementation.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {HandlerService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        HandlerService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };

                        /**
                         * Callback as used by {@link v2ray.core.app.proxyman.command.HandlerService#addInbound}.
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @typedef AddInboundCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.proxyman.command.AddInboundResponse} [response] AddInboundResponse
                         */

                        /**
                         * Calls AddInbound.
                         * @function addInbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAddInboundRequest} request AddInboundRequest message or plain object
                         * @param {v2ray.core.app.proxyman.command.HandlerService.AddInboundCallback} callback Node-style callback called with the error, if any, and AddInboundResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(HandlerService.prototype.addInbound = function addInbound(request, callback) {
                            return this.rpcCall(addInbound, $root.v2ray.core.app.proxyman.command.AddInboundRequest, $root.v2ray.core.app.proxyman.command.AddInboundResponse, request, callback);
                        }, "name", { value: "AddInbound" });

                        /**
                         * Calls AddInbound.
                         * @function addInbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAddInboundRequest} request AddInboundRequest message or plain object
                         * @returns {Promise<v2ray.core.app.proxyman.command.AddInboundResponse>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link v2ray.core.app.proxyman.command.HandlerService#removeInbound}.
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @typedef RemoveInboundCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.proxyman.command.RemoveInboundResponse} [response] RemoveInboundResponse
                         */

                        /**
                         * Calls RemoveInbound.
                         * @function removeInbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundRequest} request RemoveInboundRequest message or plain object
                         * @param {v2ray.core.app.proxyman.command.HandlerService.RemoveInboundCallback} callback Node-style callback called with the error, if any, and RemoveInboundResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(HandlerService.prototype.removeInbound = function removeInbound(request, callback) {
                            return this.rpcCall(removeInbound, $root.v2ray.core.app.proxyman.command.RemoveInboundRequest, $root.v2ray.core.app.proxyman.command.RemoveInboundResponse, request, callback);
                        }, "name", { value: "RemoveInbound" });

                        /**
                         * Calls RemoveInbound.
                         * @function removeInbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IRemoveInboundRequest} request RemoveInboundRequest message or plain object
                         * @returns {Promise<v2ray.core.app.proxyman.command.RemoveInboundResponse>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link v2ray.core.app.proxyman.command.HandlerService#alterInbound}.
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @typedef AlterInboundCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.proxyman.command.AlterInboundResponse} [response] AlterInboundResponse
                         */

                        /**
                         * Calls AlterInbound.
                         * @function alterInbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundRequest} request AlterInboundRequest message or plain object
                         * @param {v2ray.core.app.proxyman.command.HandlerService.AlterInboundCallback} callback Node-style callback called with the error, if any, and AlterInboundResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(HandlerService.prototype.alterInbound = function alterInbound(request, callback) {
                            return this.rpcCall(alterInbound, $root.v2ray.core.app.proxyman.command.AlterInboundRequest, $root.v2ray.core.app.proxyman.command.AlterInboundResponse, request, callback);
                        }, "name", { value: "AlterInbound" });

                        /**
                         * Calls AlterInbound.
                         * @function alterInbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAlterInboundRequest} request AlterInboundRequest message or plain object
                         * @returns {Promise<v2ray.core.app.proxyman.command.AlterInboundResponse>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link v2ray.core.app.proxyman.command.HandlerService#addOutbound}.
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @typedef AddOutboundCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.proxyman.command.AddOutboundResponse} [response] AddOutboundResponse
                         */

                        /**
                         * Calls AddOutbound.
                         * @function addOutbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundRequest} request AddOutboundRequest message or plain object
                         * @param {v2ray.core.app.proxyman.command.HandlerService.AddOutboundCallback} callback Node-style callback called with the error, if any, and AddOutboundResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(HandlerService.prototype.addOutbound = function addOutbound(request, callback) {
                            return this.rpcCall(addOutbound, $root.v2ray.core.app.proxyman.command.AddOutboundRequest, $root.v2ray.core.app.proxyman.command.AddOutboundResponse, request, callback);
                        }, "name", { value: "AddOutbound" });

                        /**
                         * Calls AddOutbound.
                         * @function addOutbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAddOutboundRequest} request AddOutboundRequest message or plain object
                         * @returns {Promise<v2ray.core.app.proxyman.command.AddOutboundResponse>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link v2ray.core.app.proxyman.command.HandlerService#removeOutbound}.
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @typedef RemoveOutboundCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.proxyman.command.RemoveOutboundResponse} [response] RemoveOutboundResponse
                         */

                        /**
                         * Calls RemoveOutbound.
                         * @function removeOutbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundRequest} request RemoveOutboundRequest message or plain object
                         * @param {v2ray.core.app.proxyman.command.HandlerService.RemoveOutboundCallback} callback Node-style callback called with the error, if any, and RemoveOutboundResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(HandlerService.prototype.removeOutbound = function removeOutbound(request, callback) {
                            return this.rpcCall(removeOutbound, $root.v2ray.core.app.proxyman.command.RemoveOutboundRequest, $root.v2ray.core.app.proxyman.command.RemoveOutboundResponse, request, callback);
                        }, "name", { value: "RemoveOutbound" });

                        /**
                         * Calls RemoveOutbound.
                         * @function removeOutbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IRemoveOutboundRequest} request RemoveOutboundRequest message or plain object
                         * @returns {Promise<v2ray.core.app.proxyman.command.RemoveOutboundResponse>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link v2ray.core.app.proxyman.command.HandlerService#alterOutbound}.
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @typedef AlterOutboundCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.proxyman.command.AlterOutboundResponse} [response] AlterOutboundResponse
                         */

                        /**
                         * Calls AlterOutbound.
                         * @function alterOutbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundRequest} request AlterOutboundRequest message or plain object
                         * @param {v2ray.core.app.proxyman.command.HandlerService.AlterOutboundCallback} callback Node-style callback called with the error, if any, and AlterOutboundResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(HandlerService.prototype.alterOutbound = function alterOutbound(request, callback) {
                            return this.rpcCall(alterOutbound, $root.v2ray.core.app.proxyman.command.AlterOutboundRequest, $root.v2ray.core.app.proxyman.command.AlterOutboundResponse, request, callback);
                        }, "name", { value: "AlterOutbound" });

                        /**
                         * Calls AlterOutbound.
                         * @function alterOutbound
                         * @memberof v2ray.core.app.proxyman.command.HandlerService
                         * @instance
                         * @param {v2ray.core.app.proxyman.command.IAlterOutboundRequest} request AlterOutboundRequest message or plain object
                         * @returns {Promise<v2ray.core.app.proxyman.command.AlterOutboundResponse>} Promise
                         * @variation 2
                         */

                        return HandlerService;
                    })();

                    command.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.app.proxyman.command
                         * @interface IConfig
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.app.proxyman.command
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.app.proxyman.command.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.command.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.proxyman.command.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.command.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {v2ray.core.app.proxyman.command.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.command.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.command.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.command.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.command.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.command.Config)
                                return object;
                            return new $root.v2ray.core.app.proxyman.command.Config();
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @static
                         * @param {v2ray.core.app.proxyman.command.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.command.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return command;
                })();

                proxyman.InboundConfig = (function() {

                    /**
                     * Properties of an InboundConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @interface IInboundConfig
                     */

                    /**
                     * Constructs a new InboundConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents an InboundConfig.
                     * @implements IInboundConfig
                     * @constructor
                     * @param {v2ray.core.app.proxyman.IInboundConfig=} [properties] Properties to set
                     */
                    function InboundConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new InboundConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IInboundConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.InboundConfig} InboundConfig instance
                     */
                    InboundConfig.create = function create(properties) {
                        return new InboundConfig(properties);
                    };

                    /**
                     * Encodes the specified InboundConfig message. Does not implicitly {@link v2ray.core.app.proxyman.InboundConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IInboundConfig} message InboundConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InboundConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified InboundConfig message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.InboundConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IInboundConfig} message InboundConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InboundConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an InboundConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.InboundConfig} InboundConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InboundConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.InboundConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an InboundConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.InboundConfig} InboundConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InboundConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an InboundConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InboundConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates an InboundConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.InboundConfig} InboundConfig
                     */
                    InboundConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.InboundConfig)
                            return object;
                        return new $root.v2ray.core.app.proxyman.InboundConfig();
                    };

                    /**
                     * Creates a plain object from an InboundConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.InboundConfig} message InboundConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InboundConfig.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this InboundConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.InboundConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InboundConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return InboundConfig;
                })();

                proxyman.AllocationStrategy = (function() {

                    /**
                     * Properties of an AllocationStrategy.
                     * @memberof v2ray.core.app.proxyman
                     * @interface IAllocationStrategy
                     * @property {v2ray.core.app.proxyman.AllocationStrategy.Type|null} [type] AllocationStrategy type
                     * @property {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyConcurrency|null} [concurrency] AllocationStrategy concurrency
                     * @property {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyRefresh|null} [refresh] AllocationStrategy refresh
                     */

                    /**
                     * Constructs a new AllocationStrategy.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents an AllocationStrategy.
                     * @implements IAllocationStrategy
                     * @constructor
                     * @param {v2ray.core.app.proxyman.IAllocationStrategy=} [properties] Properties to set
                     */
                    function AllocationStrategy(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AllocationStrategy type.
                     * @member {v2ray.core.app.proxyman.AllocationStrategy.Type} type
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @instance
                     */
                    AllocationStrategy.prototype.type = 0;

                    /**
                     * AllocationStrategy concurrency.
                     * @member {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyConcurrency|null|undefined} concurrency
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @instance
                     */
                    AllocationStrategy.prototype.concurrency = null;

                    /**
                     * AllocationStrategy refresh.
                     * @member {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyRefresh|null|undefined} refresh
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @instance
                     */
                    AllocationStrategy.prototype.refresh = null;

                    /**
                     * Creates a new AllocationStrategy instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {v2ray.core.app.proxyman.IAllocationStrategy=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.AllocationStrategy} AllocationStrategy instance
                     */
                    AllocationStrategy.create = function create(properties) {
                        return new AllocationStrategy(properties);
                    };

                    /**
                     * Encodes the specified AllocationStrategy message. Does not implicitly {@link v2ray.core.app.proxyman.AllocationStrategy.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {v2ray.core.app.proxyman.IAllocationStrategy} message AllocationStrategy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AllocationStrategy.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.concurrency != null && message.hasOwnProperty("concurrency"))
                            $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.encode(message.concurrency, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.refresh != null && message.hasOwnProperty("refresh"))
                            $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.encode(message.refresh, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AllocationStrategy message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.AllocationStrategy.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {v2ray.core.app.proxyman.IAllocationStrategy} message AllocationStrategy message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AllocationStrategy.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AllocationStrategy message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.AllocationStrategy} AllocationStrategy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AllocationStrategy.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.AllocationStrategy();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.int32();
                                break;
                            case 2:
                                message.concurrency = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.refresh = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AllocationStrategy message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.AllocationStrategy} AllocationStrategy
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AllocationStrategy.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AllocationStrategy message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AllocationStrategy.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.concurrency != null && message.hasOwnProperty("concurrency")) {
                            var error = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.verify(message.concurrency);
                            if (error)
                                return "concurrency." + error;
                        }
                        if (message.refresh != null && message.hasOwnProperty("refresh")) {
                            var error = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.verify(message.refresh);
                            if (error)
                                return "refresh." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an AllocationStrategy message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.AllocationStrategy} AllocationStrategy
                     */
                    AllocationStrategy.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.AllocationStrategy)
                            return object;
                        var message = new $root.v2ray.core.app.proxyman.AllocationStrategy();
                        switch (object.type) {
                        case "Always":
                        case 0:
                            message.type = 0;
                            break;
                        case "Random":
                        case 1:
                            message.type = 1;
                            break;
                        case "External":
                        case 2:
                            message.type = 2;
                            break;
                        }
                        if (object.concurrency != null) {
                            if (typeof object.concurrency !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.AllocationStrategy.concurrency: object expected");
                            message.concurrency = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.fromObject(object.concurrency);
                        }
                        if (object.refresh != null) {
                            if (typeof object.refresh !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.AllocationStrategy.refresh: object expected");
                            message.refresh = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.fromObject(object.refresh);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AllocationStrategy message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @static
                     * @param {v2ray.core.app.proxyman.AllocationStrategy} message AllocationStrategy
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AllocationStrategy.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = options.enums === String ? "Always" : 0;
                            object.concurrency = null;
                            object.refresh = null;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.v2ray.core.app.proxyman.AllocationStrategy.Type[message.type] : message.type;
                        if (message.concurrency != null && message.hasOwnProperty("concurrency"))
                            object.concurrency = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.toObject(message.concurrency, options);
                        if (message.refresh != null && message.hasOwnProperty("refresh"))
                            object.refresh = $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.toObject(message.refresh, options);
                        return object;
                    };

                    /**
                     * Converts this AllocationStrategy to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.AllocationStrategy
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AllocationStrategy.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Type enum.
                     * @name v2ray.core.app.proxyman.AllocationStrategy.Type
                     * @enum {string}
                     * @property {number} Always=0 Always value
                     * @property {number} Random=1 Random value
                     * @property {number} External=2 External value
                     */
                    AllocationStrategy.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "Always"] = 0;
                        values[valuesById[1] = "Random"] = 1;
                        values[valuesById[2] = "External"] = 2;
                        return values;
                    })();

                    AllocationStrategy.AllocationStrategyConcurrency = (function() {

                        /**
                         * Properties of an AllocationStrategyConcurrency.
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy
                         * @interface IAllocationStrategyConcurrency
                         * @property {number|null} [value] AllocationStrategyConcurrency value
                         */

                        /**
                         * Constructs a new AllocationStrategyConcurrency.
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy
                         * @classdesc Represents an AllocationStrategyConcurrency.
                         * @implements IAllocationStrategyConcurrency
                         * @constructor
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyConcurrency=} [properties] Properties to set
                         */
                        function AllocationStrategyConcurrency(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AllocationStrategyConcurrency value.
                         * @member {number} value
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @instance
                         */
                        AllocationStrategyConcurrency.prototype.value = 0;

                        /**
                         * Creates a new AllocationStrategyConcurrency instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyConcurrency=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} AllocationStrategyConcurrency instance
                         */
                        AllocationStrategyConcurrency.create = function create(properties) {
                            return new AllocationStrategyConcurrency(properties);
                        };

                        /**
                         * Encodes the specified AllocationStrategyConcurrency message. Does not implicitly {@link v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyConcurrency} message AllocationStrategyConcurrency message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationStrategyConcurrency.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified AllocationStrategyConcurrency message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyConcurrency} message AllocationStrategyConcurrency message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationStrategyConcurrency.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AllocationStrategyConcurrency message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} AllocationStrategyConcurrency
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationStrategyConcurrency.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AllocationStrategyConcurrency message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} AllocationStrategyConcurrency
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationStrategyConcurrency.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AllocationStrategyConcurrency message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AllocationStrategyConcurrency.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates an AllocationStrategyConcurrency message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} AllocationStrategyConcurrency
                         */
                        AllocationStrategyConcurrency.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency();
                            if (object.value != null)
                                message.value = object.value >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from an AllocationStrategyConcurrency message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency} message AllocationStrategyConcurrency
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AllocationStrategyConcurrency.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this AllocationStrategyConcurrency to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AllocationStrategyConcurrency.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AllocationStrategyConcurrency;
                    })();

                    AllocationStrategy.AllocationStrategyRefresh = (function() {

                        /**
                         * Properties of an AllocationStrategyRefresh.
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy
                         * @interface IAllocationStrategyRefresh
                         * @property {number|null} [value] AllocationStrategyRefresh value
                         */

                        /**
                         * Constructs a new AllocationStrategyRefresh.
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy
                         * @classdesc Represents an AllocationStrategyRefresh.
                         * @implements IAllocationStrategyRefresh
                         * @constructor
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyRefresh=} [properties] Properties to set
                         */
                        function AllocationStrategyRefresh(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * AllocationStrategyRefresh value.
                         * @member {number} value
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @instance
                         */
                        AllocationStrategyRefresh.prototype.value = 0;

                        /**
                         * Creates a new AllocationStrategyRefresh instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyRefresh=} [properties] Properties to set
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} AllocationStrategyRefresh instance
                         */
                        AllocationStrategyRefresh.create = function create(properties) {
                            return new AllocationStrategyRefresh(properties);
                        };

                        /**
                         * Encodes the specified AllocationStrategyRefresh message. Does not implicitly {@link v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyRefresh} message AllocationStrategyRefresh message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationStrategyRefresh.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified AllocationStrategyRefresh message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.IAllocationStrategyRefresh} message AllocationStrategyRefresh message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationStrategyRefresh.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an AllocationStrategyRefresh message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} AllocationStrategyRefresh
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationStrategyRefresh.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an AllocationStrategyRefresh message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} AllocationStrategyRefresh
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationStrategyRefresh.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an AllocationStrategyRefresh message.
                         * @function verify
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AllocationStrategyRefresh.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates an AllocationStrategyRefresh message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} AllocationStrategyRefresh
                         */
                        AllocationStrategyRefresh.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh)
                                return object;
                            var message = new $root.v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh();
                            if (object.value != null)
                                message.value = object.value >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from an AllocationStrategyRefresh message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @static
                         * @param {v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh} message AllocationStrategyRefresh
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AllocationStrategyRefresh.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this AllocationStrategyRefresh to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AllocationStrategyRefresh.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return AllocationStrategyRefresh;
                    })();

                    return AllocationStrategy;
                })();

                /**
                 * KnownProtocols enum.
                 * @name v2ray.core.app.proxyman.KnownProtocols
                 * @enum {string}
                 * @property {number} HTTP=0 HTTP value
                 * @property {number} TLS=1 TLS value
                 */
                proxyman.KnownProtocols = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HTTP"] = 0;
                    values[valuesById[1] = "TLS"] = 1;
                    return values;
                })();

                proxyman.SniffingConfig = (function() {

                    /**
                     * Properties of a SniffingConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @interface ISniffingConfig
                     * @property {boolean|null} [enabled] SniffingConfig enabled
                     * @property {Array.<string>|null} [destinationOverride] SniffingConfig destinationOverride
                     */

                    /**
                     * Constructs a new SniffingConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents a SniffingConfig.
                     * @implements ISniffingConfig
                     * @constructor
                     * @param {v2ray.core.app.proxyman.ISniffingConfig=} [properties] Properties to set
                     */
                    function SniffingConfig(properties) {
                        this.destinationOverride = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SniffingConfig enabled.
                     * @member {boolean} enabled
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @instance
                     */
                    SniffingConfig.prototype.enabled = false;

                    /**
                     * SniffingConfig destinationOverride.
                     * @member {Array.<string>} destinationOverride
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @instance
                     */
                    SniffingConfig.prototype.destinationOverride = $util.emptyArray;

                    /**
                     * Creates a new SniffingConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.ISniffingConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.SniffingConfig} SniffingConfig instance
                     */
                    SniffingConfig.create = function create(properties) {
                        return new SniffingConfig(properties);
                    };

                    /**
                     * Encodes the specified SniffingConfig message. Does not implicitly {@link v2ray.core.app.proxyman.SniffingConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.ISniffingConfig} message SniffingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SniffingConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enabled);
                        if (message.destinationOverride != null && message.destinationOverride.length)
                            for (var i = 0; i < message.destinationOverride.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.destinationOverride[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified SniffingConfig message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.SniffingConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.ISniffingConfig} message SniffingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SniffingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SniffingConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.SniffingConfig} SniffingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SniffingConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.SniffingConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.enabled = reader.bool();
                                break;
                            case 2:
                                if (!(message.destinationOverride && message.destinationOverride.length))
                                    message.destinationOverride = [];
                                message.destinationOverride.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SniffingConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.SniffingConfig} SniffingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SniffingConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SniffingConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SniffingConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            if (typeof message.enabled !== "boolean")
                                return "enabled: boolean expected";
                        if (message.destinationOverride != null && message.hasOwnProperty("destinationOverride")) {
                            if (!Array.isArray(message.destinationOverride))
                                return "destinationOverride: array expected";
                            for (var i = 0; i < message.destinationOverride.length; ++i)
                                if (!$util.isString(message.destinationOverride[i]))
                                    return "destinationOverride: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a SniffingConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.SniffingConfig} SniffingConfig
                     */
                    SniffingConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.SniffingConfig)
                            return object;
                        var message = new $root.v2ray.core.app.proxyman.SniffingConfig();
                        if (object.enabled != null)
                            message.enabled = Boolean(object.enabled);
                        if (object.destinationOverride) {
                            if (!Array.isArray(object.destinationOverride))
                                throw TypeError(".v2ray.core.app.proxyman.SniffingConfig.destinationOverride: array expected");
                            message.destinationOverride = [];
                            for (var i = 0; i < object.destinationOverride.length; ++i)
                                message.destinationOverride[i] = String(object.destinationOverride[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SniffingConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.SniffingConfig} message SniffingConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SniffingConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.destinationOverride = [];
                        if (options.defaults)
                            object.enabled = false;
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            object.enabled = message.enabled;
                        if (message.destinationOverride && message.destinationOverride.length) {
                            object.destinationOverride = [];
                            for (var j = 0; j < message.destinationOverride.length; ++j)
                                object.destinationOverride[j] = message.destinationOverride[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this SniffingConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.SniffingConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SniffingConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SniffingConfig;
                })();

                proxyman.ReceiverConfig = (function() {

                    /**
                     * Properties of a ReceiverConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @interface IReceiverConfig
                     * @property {v2ray.core.common.net.IPortRange|null} [portRange] ReceiverConfig portRange
                     * @property {v2ray.core.common.net.IIPOrDomain|null} [listen] ReceiverConfig listen
                     * @property {v2ray.core.app.proxyman.IAllocationStrategy|null} [allocationStrategy] ReceiverConfig allocationStrategy
                     * @property {v2ray.core.transport.internet.IStreamConfig|null} [streamSettings] ReceiverConfig streamSettings
                     * @property {boolean|null} [receiveOriginalDestination] ReceiverConfig receiveOriginalDestination
                     * @property {Array.<v2ray.core.app.proxyman.KnownProtocols>|null} [domainOverride] ReceiverConfig domainOverride
                     * @property {v2ray.core.app.proxyman.ISniffingConfig|null} [sniffingSettings] ReceiverConfig sniffingSettings
                     */

                    /**
                     * Constructs a new ReceiverConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents a ReceiverConfig.
                     * @implements IReceiverConfig
                     * @constructor
                     * @param {v2ray.core.app.proxyman.IReceiverConfig=} [properties] Properties to set
                     */
                    function ReceiverConfig(properties) {
                        this.domainOverride = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ReceiverConfig portRange.
                     * @member {v2ray.core.common.net.IPortRange|null|undefined} portRange
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     */
                    ReceiverConfig.prototype.portRange = null;

                    /**
                     * ReceiverConfig listen.
                     * @member {v2ray.core.common.net.IIPOrDomain|null|undefined} listen
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     */
                    ReceiverConfig.prototype.listen = null;

                    /**
                     * ReceiverConfig allocationStrategy.
                     * @member {v2ray.core.app.proxyman.IAllocationStrategy|null|undefined} allocationStrategy
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     */
                    ReceiverConfig.prototype.allocationStrategy = null;

                    /**
                     * ReceiverConfig streamSettings.
                     * @member {v2ray.core.transport.internet.IStreamConfig|null|undefined} streamSettings
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     */
                    ReceiverConfig.prototype.streamSettings = null;

                    /**
                     * ReceiverConfig receiveOriginalDestination.
                     * @member {boolean} receiveOriginalDestination
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     */
                    ReceiverConfig.prototype.receiveOriginalDestination = false;

                    /**
                     * ReceiverConfig domainOverride.
                     * @member {Array.<v2ray.core.app.proxyman.KnownProtocols>} domainOverride
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     */
                    ReceiverConfig.prototype.domainOverride = $util.emptyArray;

                    /**
                     * ReceiverConfig sniffingSettings.
                     * @member {v2ray.core.app.proxyman.ISniffingConfig|null|undefined} sniffingSettings
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     */
                    ReceiverConfig.prototype.sniffingSettings = null;

                    /**
                     * Creates a new ReceiverConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IReceiverConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.ReceiverConfig} ReceiverConfig instance
                     */
                    ReceiverConfig.create = function create(properties) {
                        return new ReceiverConfig(properties);
                    };

                    /**
                     * Encodes the specified ReceiverConfig message. Does not implicitly {@link v2ray.core.app.proxyman.ReceiverConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IReceiverConfig} message ReceiverConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReceiverConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.portRange != null && message.hasOwnProperty("portRange"))
                            $root.v2ray.core.common.net.PortRange.encode(message.portRange, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.listen != null && message.hasOwnProperty("listen"))
                            $root.v2ray.core.common.net.IPOrDomain.encode(message.listen, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.allocationStrategy != null && message.hasOwnProperty("allocationStrategy"))
                            $root.v2ray.core.app.proxyman.AllocationStrategy.encode(message.allocationStrategy, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.streamSettings != null && message.hasOwnProperty("streamSettings"))
                            $root.v2ray.core.transport.internet.StreamConfig.encode(message.streamSettings, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.receiveOriginalDestination != null && message.hasOwnProperty("receiveOriginalDestination"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.receiveOriginalDestination);
                        if (message.domainOverride != null && message.domainOverride.length) {
                            writer.uint32(/* id 7, wireType 2 =*/58).fork();
                            for (var i = 0; i < message.domainOverride.length; ++i)
                                writer.int32(message.domainOverride[i]);
                            writer.ldelim();
                        }
                        if (message.sniffingSettings != null && message.hasOwnProperty("sniffingSettings"))
                            $root.v2ray.core.app.proxyman.SniffingConfig.encode(message.sniffingSettings, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ReceiverConfig message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.ReceiverConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IReceiverConfig} message ReceiverConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReceiverConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ReceiverConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.ReceiverConfig} ReceiverConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReceiverConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.ReceiverConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.portRange = $root.v2ray.core.common.net.PortRange.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.listen = $root.v2ray.core.common.net.IPOrDomain.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.allocationStrategy = $root.v2ray.core.app.proxyman.AllocationStrategy.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.streamSettings = $root.v2ray.core.transport.internet.StreamConfig.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.receiveOriginalDestination = reader.bool();
                                break;
                            case 7:
                                if (!(message.domainOverride && message.domainOverride.length))
                                    message.domainOverride = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.domainOverride.push(reader.int32());
                                } else
                                    message.domainOverride.push(reader.int32());
                                break;
                            case 8:
                                message.sniffingSettings = $root.v2ray.core.app.proxyman.SniffingConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ReceiverConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.ReceiverConfig} ReceiverConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReceiverConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ReceiverConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReceiverConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.portRange != null && message.hasOwnProperty("portRange")) {
                            var error = $root.v2ray.core.common.net.PortRange.verify(message.portRange);
                            if (error)
                                return "portRange." + error;
                        }
                        if (message.listen != null && message.hasOwnProperty("listen")) {
                            var error = $root.v2ray.core.common.net.IPOrDomain.verify(message.listen);
                            if (error)
                                return "listen." + error;
                        }
                        if (message.allocationStrategy != null && message.hasOwnProperty("allocationStrategy")) {
                            var error = $root.v2ray.core.app.proxyman.AllocationStrategy.verify(message.allocationStrategy);
                            if (error)
                                return "allocationStrategy." + error;
                        }
                        if (message.streamSettings != null && message.hasOwnProperty("streamSettings")) {
                            var error = $root.v2ray.core.transport.internet.StreamConfig.verify(message.streamSettings);
                            if (error)
                                return "streamSettings." + error;
                        }
                        if (message.receiveOriginalDestination != null && message.hasOwnProperty("receiveOriginalDestination"))
                            if (typeof message.receiveOriginalDestination !== "boolean")
                                return "receiveOriginalDestination: boolean expected";
                        if (message.domainOverride != null && message.hasOwnProperty("domainOverride")) {
                            if (!Array.isArray(message.domainOverride))
                                return "domainOverride: array expected";
                            for (var i = 0; i < message.domainOverride.length; ++i)
                                switch (message.domainOverride[i]) {
                                default:
                                    return "domainOverride: enum value[] expected";
                                case 0:
                                case 1:
                                    break;
                                }
                        }
                        if (message.sniffingSettings != null && message.hasOwnProperty("sniffingSettings")) {
                            var error = $root.v2ray.core.app.proxyman.SniffingConfig.verify(message.sniffingSettings);
                            if (error)
                                return "sniffingSettings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ReceiverConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.ReceiverConfig} ReceiverConfig
                     */
                    ReceiverConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.ReceiverConfig)
                            return object;
                        var message = new $root.v2ray.core.app.proxyman.ReceiverConfig();
                        if (object.portRange != null) {
                            if (typeof object.portRange !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.ReceiverConfig.portRange: object expected");
                            message.portRange = $root.v2ray.core.common.net.PortRange.fromObject(object.portRange);
                        }
                        if (object.listen != null) {
                            if (typeof object.listen !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.ReceiverConfig.listen: object expected");
                            message.listen = $root.v2ray.core.common.net.IPOrDomain.fromObject(object.listen);
                        }
                        if (object.allocationStrategy != null) {
                            if (typeof object.allocationStrategy !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.ReceiverConfig.allocationStrategy: object expected");
                            message.allocationStrategy = $root.v2ray.core.app.proxyman.AllocationStrategy.fromObject(object.allocationStrategy);
                        }
                        if (object.streamSettings != null) {
                            if (typeof object.streamSettings !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.ReceiverConfig.streamSettings: object expected");
                            message.streamSettings = $root.v2ray.core.transport.internet.StreamConfig.fromObject(object.streamSettings);
                        }
                        if (object.receiveOriginalDestination != null)
                            message.receiveOriginalDestination = Boolean(object.receiveOriginalDestination);
                        if (object.domainOverride) {
                            if (!Array.isArray(object.domainOverride))
                                throw TypeError(".v2ray.core.app.proxyman.ReceiverConfig.domainOverride: array expected");
                            message.domainOverride = [];
                            for (var i = 0; i < object.domainOverride.length; ++i)
                                switch (object.domainOverride[i]) {
                                default:
                                case "HTTP":
                                case 0:
                                    message.domainOverride[i] = 0;
                                    break;
                                case "TLS":
                                case 1:
                                    message.domainOverride[i] = 1;
                                    break;
                                }
                        }
                        if (object.sniffingSettings != null) {
                            if (typeof object.sniffingSettings !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.ReceiverConfig.sniffingSettings: object expected");
                            message.sniffingSettings = $root.v2ray.core.app.proxyman.SniffingConfig.fromObject(object.sniffingSettings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ReceiverConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.ReceiverConfig} message ReceiverConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReceiverConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.domainOverride = [];
                        if (options.defaults) {
                            object.portRange = null;
                            object.listen = null;
                            object.allocationStrategy = null;
                            object.streamSettings = null;
                            object.receiveOriginalDestination = false;
                            object.sniffingSettings = null;
                        }
                        if (message.portRange != null && message.hasOwnProperty("portRange"))
                            object.portRange = $root.v2ray.core.common.net.PortRange.toObject(message.portRange, options);
                        if (message.listen != null && message.hasOwnProperty("listen"))
                            object.listen = $root.v2ray.core.common.net.IPOrDomain.toObject(message.listen, options);
                        if (message.allocationStrategy != null && message.hasOwnProperty("allocationStrategy"))
                            object.allocationStrategy = $root.v2ray.core.app.proxyman.AllocationStrategy.toObject(message.allocationStrategy, options);
                        if (message.streamSettings != null && message.hasOwnProperty("streamSettings"))
                            object.streamSettings = $root.v2ray.core.transport.internet.StreamConfig.toObject(message.streamSettings, options);
                        if (message.receiveOriginalDestination != null && message.hasOwnProperty("receiveOriginalDestination"))
                            object.receiveOriginalDestination = message.receiveOriginalDestination;
                        if (message.domainOverride && message.domainOverride.length) {
                            object.domainOverride = [];
                            for (var j = 0; j < message.domainOverride.length; ++j)
                                object.domainOverride[j] = options.enums === String ? $root.v2ray.core.app.proxyman.KnownProtocols[message.domainOverride[j]] : message.domainOverride[j];
                        }
                        if (message.sniffingSettings != null && message.hasOwnProperty("sniffingSettings"))
                            object.sniffingSettings = $root.v2ray.core.app.proxyman.SniffingConfig.toObject(message.sniffingSettings, options);
                        return object;
                    };

                    /**
                     * Converts this ReceiverConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.ReceiverConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReceiverConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ReceiverConfig;
                })();

                proxyman.InboundHandlerConfig = (function() {

                    /**
                     * Properties of an InboundHandlerConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @interface IInboundHandlerConfig
                     * @property {string|null} [tag] InboundHandlerConfig tag
                     * @property {v2ray.core.common.serial.ITypedMessage|null} [receiverSettings] InboundHandlerConfig receiverSettings
                     * @property {v2ray.core.common.serial.ITypedMessage|null} [proxySettings] InboundHandlerConfig proxySettings
                     */

                    /**
                     * Constructs a new InboundHandlerConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents an InboundHandlerConfig.
                     * @implements IInboundHandlerConfig
                     * @constructor
                     * @param {v2ray.core.app.proxyman.IInboundHandlerConfig=} [properties] Properties to set
                     */
                    function InboundHandlerConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * InboundHandlerConfig tag.
                     * @member {string} tag
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @instance
                     */
                    InboundHandlerConfig.prototype.tag = "";

                    /**
                     * InboundHandlerConfig receiverSettings.
                     * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} receiverSettings
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @instance
                     */
                    InboundHandlerConfig.prototype.receiverSettings = null;

                    /**
                     * InboundHandlerConfig proxySettings.
                     * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} proxySettings
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @instance
                     */
                    InboundHandlerConfig.prototype.proxySettings = null;

                    /**
                     * Creates a new InboundHandlerConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IInboundHandlerConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.InboundHandlerConfig} InboundHandlerConfig instance
                     */
                    InboundHandlerConfig.create = function create(properties) {
                        return new InboundHandlerConfig(properties);
                    };

                    /**
                     * Encodes the specified InboundHandlerConfig message. Does not implicitly {@link v2ray.core.app.proxyman.InboundHandlerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IInboundHandlerConfig} message InboundHandlerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InboundHandlerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                        if (message.receiverSettings != null && message.hasOwnProperty("receiverSettings"))
                            $root.v2ray.core.common.serial.TypedMessage.encode(message.receiverSettings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                            $root.v2ray.core.common.serial.TypedMessage.encode(message.proxySettings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified InboundHandlerConfig message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.InboundHandlerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IInboundHandlerConfig} message InboundHandlerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InboundHandlerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an InboundHandlerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.InboundHandlerConfig} InboundHandlerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InboundHandlerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.InboundHandlerConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tag = reader.string();
                                break;
                            case 2:
                                message.receiverSettings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.proxySettings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an InboundHandlerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.InboundHandlerConfig} InboundHandlerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InboundHandlerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an InboundHandlerConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InboundHandlerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        if (message.receiverSettings != null && message.hasOwnProperty("receiverSettings")) {
                            var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.receiverSettings);
                            if (error)
                                return "receiverSettings." + error;
                        }
                        if (message.proxySettings != null && message.hasOwnProperty("proxySettings")) {
                            var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.proxySettings);
                            if (error)
                                return "proxySettings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an InboundHandlerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.InboundHandlerConfig} InboundHandlerConfig
                     */
                    InboundHandlerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.InboundHandlerConfig)
                            return object;
                        var message = new $root.v2ray.core.app.proxyman.InboundHandlerConfig();
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        if (object.receiverSettings != null) {
                            if (typeof object.receiverSettings !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.InboundHandlerConfig.receiverSettings: object expected");
                            message.receiverSettings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.receiverSettings);
                        }
                        if (object.proxySettings != null) {
                            if (typeof object.proxySettings !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.InboundHandlerConfig.proxySettings: object expected");
                            message.proxySettings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.proxySettings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an InboundHandlerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.InboundHandlerConfig} message InboundHandlerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InboundHandlerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.tag = "";
                            object.receiverSettings = null;
                            object.proxySettings = null;
                        }
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            object.tag = message.tag;
                        if (message.receiverSettings != null && message.hasOwnProperty("receiverSettings"))
                            object.receiverSettings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.receiverSettings, options);
                        if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                            object.proxySettings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.proxySettings, options);
                        return object;
                    };

                    /**
                     * Converts this InboundHandlerConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.InboundHandlerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InboundHandlerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return InboundHandlerConfig;
                })();

                proxyman.OutboundConfig = (function() {

                    /**
                     * Properties of an OutboundConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @interface IOutboundConfig
                     */

                    /**
                     * Constructs a new OutboundConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents an OutboundConfig.
                     * @implements IOutboundConfig
                     * @constructor
                     * @param {v2ray.core.app.proxyman.IOutboundConfig=} [properties] Properties to set
                     */
                    function OutboundConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new OutboundConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IOutboundConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.OutboundConfig} OutboundConfig instance
                     */
                    OutboundConfig.create = function create(properties) {
                        return new OutboundConfig(properties);
                    };

                    /**
                     * Encodes the specified OutboundConfig message. Does not implicitly {@link v2ray.core.app.proxyman.OutboundConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IOutboundConfig} message OutboundConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OutboundConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified OutboundConfig message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.OutboundConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IOutboundConfig} message OutboundConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OutboundConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an OutboundConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.OutboundConfig} OutboundConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OutboundConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.OutboundConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an OutboundConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.OutboundConfig} OutboundConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OutboundConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an OutboundConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OutboundConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates an OutboundConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.OutboundConfig} OutboundConfig
                     */
                    OutboundConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.OutboundConfig)
                            return object;
                        return new $root.v2ray.core.app.proxyman.OutboundConfig();
                    };

                    /**
                     * Creates a plain object from an OutboundConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.OutboundConfig} message OutboundConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OutboundConfig.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this OutboundConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.OutboundConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OutboundConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return OutboundConfig;
                })();

                proxyman.SenderConfig = (function() {

                    /**
                     * Properties of a SenderConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @interface ISenderConfig
                     * @property {v2ray.core.common.net.IIPOrDomain|null} [via] SenderConfig via
                     * @property {v2ray.core.transport.internet.IStreamConfig|null} [streamSettings] SenderConfig streamSettings
                     * @property {v2ray.core.transport.internet.IProxyConfig|null} [proxySettings] SenderConfig proxySettings
                     * @property {v2ray.core.app.proxyman.IMultiplexingConfig|null} [multiplexSettings] SenderConfig multiplexSettings
                     */

                    /**
                     * Constructs a new SenderConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents a SenderConfig.
                     * @implements ISenderConfig
                     * @constructor
                     * @param {v2ray.core.app.proxyman.ISenderConfig=} [properties] Properties to set
                     */
                    function SenderConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SenderConfig via.
                     * @member {v2ray.core.common.net.IIPOrDomain|null|undefined} via
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @instance
                     */
                    SenderConfig.prototype.via = null;

                    /**
                     * SenderConfig streamSettings.
                     * @member {v2ray.core.transport.internet.IStreamConfig|null|undefined} streamSettings
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @instance
                     */
                    SenderConfig.prototype.streamSettings = null;

                    /**
                     * SenderConfig proxySettings.
                     * @member {v2ray.core.transport.internet.IProxyConfig|null|undefined} proxySettings
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @instance
                     */
                    SenderConfig.prototype.proxySettings = null;

                    /**
                     * SenderConfig multiplexSettings.
                     * @member {v2ray.core.app.proxyman.IMultiplexingConfig|null|undefined} multiplexSettings
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @instance
                     */
                    SenderConfig.prototype.multiplexSettings = null;

                    /**
                     * Creates a new SenderConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.ISenderConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.SenderConfig} SenderConfig instance
                     */
                    SenderConfig.create = function create(properties) {
                        return new SenderConfig(properties);
                    };

                    /**
                     * Encodes the specified SenderConfig message. Does not implicitly {@link v2ray.core.app.proxyman.SenderConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.ISenderConfig} message SenderConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SenderConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.via != null && message.hasOwnProperty("via"))
                            $root.v2ray.core.common.net.IPOrDomain.encode(message.via, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.streamSettings != null && message.hasOwnProperty("streamSettings"))
                            $root.v2ray.core.transport.internet.StreamConfig.encode(message.streamSettings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                            $root.v2ray.core.transport.internet.ProxyConfig.encode(message.proxySettings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.multiplexSettings != null && message.hasOwnProperty("multiplexSettings"))
                            $root.v2ray.core.app.proxyman.MultiplexingConfig.encode(message.multiplexSettings, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SenderConfig message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.SenderConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.ISenderConfig} message SenderConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SenderConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SenderConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.SenderConfig} SenderConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SenderConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.SenderConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.via = $root.v2ray.core.common.net.IPOrDomain.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.streamSettings = $root.v2ray.core.transport.internet.StreamConfig.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.proxySettings = $root.v2ray.core.transport.internet.ProxyConfig.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.multiplexSettings = $root.v2ray.core.app.proxyman.MultiplexingConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SenderConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.SenderConfig} SenderConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SenderConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SenderConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SenderConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.via != null && message.hasOwnProperty("via")) {
                            var error = $root.v2ray.core.common.net.IPOrDomain.verify(message.via);
                            if (error)
                                return "via." + error;
                        }
                        if (message.streamSettings != null && message.hasOwnProperty("streamSettings")) {
                            var error = $root.v2ray.core.transport.internet.StreamConfig.verify(message.streamSettings);
                            if (error)
                                return "streamSettings." + error;
                        }
                        if (message.proxySettings != null && message.hasOwnProperty("proxySettings")) {
                            var error = $root.v2ray.core.transport.internet.ProxyConfig.verify(message.proxySettings);
                            if (error)
                                return "proxySettings." + error;
                        }
                        if (message.multiplexSettings != null && message.hasOwnProperty("multiplexSettings")) {
                            var error = $root.v2ray.core.app.proxyman.MultiplexingConfig.verify(message.multiplexSettings);
                            if (error)
                                return "multiplexSettings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a SenderConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.SenderConfig} SenderConfig
                     */
                    SenderConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.SenderConfig)
                            return object;
                        var message = new $root.v2ray.core.app.proxyman.SenderConfig();
                        if (object.via != null) {
                            if (typeof object.via !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.SenderConfig.via: object expected");
                            message.via = $root.v2ray.core.common.net.IPOrDomain.fromObject(object.via);
                        }
                        if (object.streamSettings != null) {
                            if (typeof object.streamSettings !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.SenderConfig.streamSettings: object expected");
                            message.streamSettings = $root.v2ray.core.transport.internet.StreamConfig.fromObject(object.streamSettings);
                        }
                        if (object.proxySettings != null) {
                            if (typeof object.proxySettings !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.SenderConfig.proxySettings: object expected");
                            message.proxySettings = $root.v2ray.core.transport.internet.ProxyConfig.fromObject(object.proxySettings);
                        }
                        if (object.multiplexSettings != null) {
                            if (typeof object.multiplexSettings !== "object")
                                throw TypeError(".v2ray.core.app.proxyman.SenderConfig.multiplexSettings: object expected");
                            message.multiplexSettings = $root.v2ray.core.app.proxyman.MultiplexingConfig.fromObject(object.multiplexSettings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SenderConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.SenderConfig} message SenderConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SenderConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.via = null;
                            object.streamSettings = null;
                            object.proxySettings = null;
                            object.multiplexSettings = null;
                        }
                        if (message.via != null && message.hasOwnProperty("via"))
                            object.via = $root.v2ray.core.common.net.IPOrDomain.toObject(message.via, options);
                        if (message.streamSettings != null && message.hasOwnProperty("streamSettings"))
                            object.streamSettings = $root.v2ray.core.transport.internet.StreamConfig.toObject(message.streamSettings, options);
                        if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                            object.proxySettings = $root.v2ray.core.transport.internet.ProxyConfig.toObject(message.proxySettings, options);
                        if (message.multiplexSettings != null && message.hasOwnProperty("multiplexSettings"))
                            object.multiplexSettings = $root.v2ray.core.app.proxyman.MultiplexingConfig.toObject(message.multiplexSettings, options);
                        return object;
                    };

                    /**
                     * Converts this SenderConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.SenderConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SenderConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SenderConfig;
                })();

                proxyman.MultiplexingConfig = (function() {

                    /**
                     * Properties of a MultiplexingConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @interface IMultiplexingConfig
                     * @property {boolean|null} [enabled] MultiplexingConfig enabled
                     * @property {number|null} [concurrency] MultiplexingConfig concurrency
                     */

                    /**
                     * Constructs a new MultiplexingConfig.
                     * @memberof v2ray.core.app.proxyman
                     * @classdesc Represents a MultiplexingConfig.
                     * @implements IMultiplexingConfig
                     * @constructor
                     * @param {v2ray.core.app.proxyman.IMultiplexingConfig=} [properties] Properties to set
                     */
                    function MultiplexingConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MultiplexingConfig enabled.
                     * @member {boolean} enabled
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @instance
                     */
                    MultiplexingConfig.prototype.enabled = false;

                    /**
                     * MultiplexingConfig concurrency.
                     * @member {number} concurrency
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @instance
                     */
                    MultiplexingConfig.prototype.concurrency = 0;

                    /**
                     * Creates a new MultiplexingConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IMultiplexingConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.proxyman.MultiplexingConfig} MultiplexingConfig instance
                     */
                    MultiplexingConfig.create = function create(properties) {
                        return new MultiplexingConfig(properties);
                    };

                    /**
                     * Encodes the specified MultiplexingConfig message. Does not implicitly {@link v2ray.core.app.proxyman.MultiplexingConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IMultiplexingConfig} message MultiplexingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MultiplexingConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enabled);
                        if (message.concurrency != null && message.hasOwnProperty("concurrency"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.concurrency);
                        return writer;
                    };

                    /**
                     * Encodes the specified MultiplexingConfig message, length delimited. Does not implicitly {@link v2ray.core.app.proxyman.MultiplexingConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.IMultiplexingConfig} message MultiplexingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MultiplexingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MultiplexingConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.proxyman.MultiplexingConfig} MultiplexingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MultiplexingConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.proxyman.MultiplexingConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.enabled = reader.bool();
                                break;
                            case 2:
                                message.concurrency = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MultiplexingConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.proxyman.MultiplexingConfig} MultiplexingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MultiplexingConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MultiplexingConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MultiplexingConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            if (typeof message.enabled !== "boolean")
                                return "enabled: boolean expected";
                        if (message.concurrency != null && message.hasOwnProperty("concurrency"))
                            if (!$util.isInteger(message.concurrency))
                                return "concurrency: integer expected";
                        return null;
                    };

                    /**
                     * Creates a MultiplexingConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.proxyman.MultiplexingConfig} MultiplexingConfig
                     */
                    MultiplexingConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.proxyman.MultiplexingConfig)
                            return object;
                        var message = new $root.v2ray.core.app.proxyman.MultiplexingConfig();
                        if (object.enabled != null)
                            message.enabled = Boolean(object.enabled);
                        if (object.concurrency != null)
                            message.concurrency = object.concurrency >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a MultiplexingConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @static
                     * @param {v2ray.core.app.proxyman.MultiplexingConfig} message MultiplexingConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MultiplexingConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.enabled = false;
                            object.concurrency = 0;
                        }
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            object.enabled = message.enabled;
                        if (message.concurrency != null && message.hasOwnProperty("concurrency"))
                            object.concurrency = message.concurrency;
                        return object;
                    };

                    /**
                     * Converts this MultiplexingConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.proxyman.MultiplexingConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MultiplexingConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MultiplexingConfig;
                })();

                return proxyman;
            })();

            app.reverse = (function() {

                /**
                 * Namespace reverse.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var reverse = {};

                reverse.Control = (function() {

                    /**
                     * Properties of a Control.
                     * @memberof v2ray.core.app.reverse
                     * @interface IControl
                     * @property {v2ray.core.app.reverse.Control.State|null} [state] Control state
                     * @property {Uint8Array|null} [random] Control random
                     */

                    /**
                     * Constructs a new Control.
                     * @memberof v2ray.core.app.reverse
                     * @classdesc Represents a Control.
                     * @implements IControl
                     * @constructor
                     * @param {v2ray.core.app.reverse.IControl=} [properties] Properties to set
                     */
                    function Control(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Control state.
                     * @member {v2ray.core.app.reverse.Control.State} state
                     * @memberof v2ray.core.app.reverse.Control
                     * @instance
                     */
                    Control.prototype.state = 0;

                    /**
                     * Control random.
                     * @member {Uint8Array} random
                     * @memberof v2ray.core.app.reverse.Control
                     * @instance
                     */
                    Control.prototype.random = $util.newBuffer([]);

                    /**
                     * Creates a new Control instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {v2ray.core.app.reverse.IControl=} [properties] Properties to set
                     * @returns {v2ray.core.app.reverse.Control} Control instance
                     */
                    Control.create = function create(properties) {
                        return new Control(properties);
                    };

                    /**
                     * Encodes the specified Control message. Does not implicitly {@link v2ray.core.app.reverse.Control.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {v2ray.core.app.reverse.IControl} message Control message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Control.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.state != null && message.hasOwnProperty("state"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                        if (message.random != null && message.hasOwnProperty("random"))
                            writer.uint32(/* id 99, wireType 2 =*/794).bytes(message.random);
                        return writer;
                    };

                    /**
                     * Encodes the specified Control message, length delimited. Does not implicitly {@link v2ray.core.app.reverse.Control.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {v2ray.core.app.reverse.IControl} message Control message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Control.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Control message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.reverse.Control} Control
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Control.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.reverse.Control();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.state = reader.int32();
                                break;
                            case 99:
                                message.random = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Control message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.reverse.Control} Control
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Control.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Control message.
                     * @function verify
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Control.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.random != null && message.hasOwnProperty("random"))
                            if (!(message.random && typeof message.random.length === "number" || $util.isString(message.random)))
                                return "random: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a Control message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.reverse.Control} Control
                     */
                    Control.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.reverse.Control)
                            return object;
                        var message = new $root.v2ray.core.app.reverse.Control();
                        switch (object.state) {
                        case "ACTIVE":
                        case 0:
                            message.state = 0;
                            break;
                        case "DRAIN":
                        case 1:
                            message.state = 1;
                            break;
                        }
                        if (object.random != null)
                            if (typeof object.random === "string")
                                $util.base64.decode(object.random, message.random = $util.newBuffer($util.base64.length(object.random)), 0);
                            else if (object.random.length)
                                message.random = object.random;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Control message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.reverse.Control
                     * @static
                     * @param {v2ray.core.app.reverse.Control} message Control
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Control.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.state = options.enums === String ? "ACTIVE" : 0;
                            if (options.bytes === String)
                                object.random = "";
                            else {
                                object.random = [];
                                if (options.bytes !== Array)
                                    object.random = $util.newBuffer(object.random);
                            }
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.v2ray.core.app.reverse.Control.State[message.state] : message.state;
                        if (message.random != null && message.hasOwnProperty("random"))
                            object.random = options.bytes === String ? $util.base64.encode(message.random, 0, message.random.length) : options.bytes === Array ? Array.prototype.slice.call(message.random) : message.random;
                        return object;
                    };

                    /**
                     * Converts this Control to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.reverse.Control
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Control.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * State enum.
                     * @name v2ray.core.app.reverse.Control.State
                     * @enum {string}
                     * @property {number} ACTIVE=0 ACTIVE value
                     * @property {number} DRAIN=1 DRAIN value
                     */
                    Control.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ACTIVE"] = 0;
                        values[valuesById[1] = "DRAIN"] = 1;
                        return values;
                    })();

                    return Control;
                })();

                reverse.BridgeConfig = (function() {

                    /**
                     * Properties of a BridgeConfig.
                     * @memberof v2ray.core.app.reverse
                     * @interface IBridgeConfig
                     * @property {string|null} [tag] BridgeConfig tag
                     * @property {string|null} [domain] BridgeConfig domain
                     */

                    /**
                     * Constructs a new BridgeConfig.
                     * @memberof v2ray.core.app.reverse
                     * @classdesc Represents a BridgeConfig.
                     * @implements IBridgeConfig
                     * @constructor
                     * @param {v2ray.core.app.reverse.IBridgeConfig=} [properties] Properties to set
                     */
                    function BridgeConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * BridgeConfig tag.
                     * @member {string} tag
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @instance
                     */
                    BridgeConfig.prototype.tag = "";

                    /**
                     * BridgeConfig domain.
                     * @member {string} domain
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @instance
                     */
                    BridgeConfig.prototype.domain = "";

                    /**
                     * Creates a new BridgeConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {v2ray.core.app.reverse.IBridgeConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.reverse.BridgeConfig} BridgeConfig instance
                     */
                    BridgeConfig.create = function create(properties) {
                        return new BridgeConfig(properties);
                    };

                    /**
                     * Encodes the specified BridgeConfig message. Does not implicitly {@link v2ray.core.app.reverse.BridgeConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {v2ray.core.app.reverse.IBridgeConfig} message BridgeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BridgeConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.domain);
                        return writer;
                    };

                    /**
                     * Encodes the specified BridgeConfig message, length delimited. Does not implicitly {@link v2ray.core.app.reverse.BridgeConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {v2ray.core.app.reverse.IBridgeConfig} message BridgeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BridgeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a BridgeConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.reverse.BridgeConfig} BridgeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BridgeConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.reverse.BridgeConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tag = reader.string();
                                break;
                            case 2:
                                message.domain = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a BridgeConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.reverse.BridgeConfig} BridgeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BridgeConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a BridgeConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BridgeConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            if (!$util.isString(message.domain))
                                return "domain: string expected";
                        return null;
                    };

                    /**
                     * Creates a BridgeConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.reverse.BridgeConfig} BridgeConfig
                     */
                    BridgeConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.reverse.BridgeConfig)
                            return object;
                        var message = new $root.v2ray.core.app.reverse.BridgeConfig();
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        if (object.domain != null)
                            message.domain = String(object.domain);
                        return message;
                    };

                    /**
                     * Creates a plain object from a BridgeConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @static
                     * @param {v2ray.core.app.reverse.BridgeConfig} message BridgeConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BridgeConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.tag = "";
                            object.domain = "";
                        }
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            object.tag = message.tag;
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            object.domain = message.domain;
                        return object;
                    };

                    /**
                     * Converts this BridgeConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.reverse.BridgeConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BridgeConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return BridgeConfig;
                })();

                reverse.PortalConfig = (function() {

                    /**
                     * Properties of a PortalConfig.
                     * @memberof v2ray.core.app.reverse
                     * @interface IPortalConfig
                     * @property {string|null} [tag] PortalConfig tag
                     * @property {string|null} [domain] PortalConfig domain
                     */

                    /**
                     * Constructs a new PortalConfig.
                     * @memberof v2ray.core.app.reverse
                     * @classdesc Represents a PortalConfig.
                     * @implements IPortalConfig
                     * @constructor
                     * @param {v2ray.core.app.reverse.IPortalConfig=} [properties] Properties to set
                     */
                    function PortalConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PortalConfig tag.
                     * @member {string} tag
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @instance
                     */
                    PortalConfig.prototype.tag = "";

                    /**
                     * PortalConfig domain.
                     * @member {string} domain
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @instance
                     */
                    PortalConfig.prototype.domain = "";

                    /**
                     * Creates a new PortalConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {v2ray.core.app.reverse.IPortalConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.reverse.PortalConfig} PortalConfig instance
                     */
                    PortalConfig.create = function create(properties) {
                        return new PortalConfig(properties);
                    };

                    /**
                     * Encodes the specified PortalConfig message. Does not implicitly {@link v2ray.core.app.reverse.PortalConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {v2ray.core.app.reverse.IPortalConfig} message PortalConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortalConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.domain);
                        return writer;
                    };

                    /**
                     * Encodes the specified PortalConfig message, length delimited. Does not implicitly {@link v2ray.core.app.reverse.PortalConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {v2ray.core.app.reverse.IPortalConfig} message PortalConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortalConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PortalConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.reverse.PortalConfig} PortalConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortalConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.reverse.PortalConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tag = reader.string();
                                break;
                            case 2:
                                message.domain = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PortalConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.reverse.PortalConfig} PortalConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortalConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PortalConfig message.
                     * @function verify
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PortalConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            if (!$util.isString(message.domain))
                                return "domain: string expected";
                        return null;
                    };

                    /**
                     * Creates a PortalConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.reverse.PortalConfig} PortalConfig
                     */
                    PortalConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.reverse.PortalConfig)
                            return object;
                        var message = new $root.v2ray.core.app.reverse.PortalConfig();
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        if (object.domain != null)
                            message.domain = String(object.domain);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PortalConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @static
                     * @param {v2ray.core.app.reverse.PortalConfig} message PortalConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PortalConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.tag = "";
                            object.domain = "";
                        }
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            object.tag = message.tag;
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            object.domain = message.domain;
                        return object;
                    };

                    /**
                     * Converts this PortalConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.reverse.PortalConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PortalConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PortalConfig;
                })();

                reverse.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.reverse
                     * @interface IConfig
                     * @property {Array.<v2ray.core.app.reverse.IBridgeConfig>|null} [bridgeConfig] Config bridgeConfig
                     * @property {Array.<v2ray.core.app.reverse.IPortalConfig>|null} [portalConfig] Config portalConfig
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.reverse
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.reverse.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        this.bridgeConfig = [];
                        this.portalConfig = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config bridgeConfig.
                     * @member {Array.<v2ray.core.app.reverse.IBridgeConfig>} bridgeConfig
                     * @memberof v2ray.core.app.reverse.Config
                     * @instance
                     */
                    Config.prototype.bridgeConfig = $util.emptyArray;

                    /**
                     * Config portalConfig.
                     * @member {Array.<v2ray.core.app.reverse.IPortalConfig>} portalConfig
                     * @memberof v2ray.core.app.reverse.Config
                     * @instance
                     */
                    Config.prototype.portalConfig = $util.emptyArray;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {v2ray.core.app.reverse.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.reverse.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.reverse.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {v2ray.core.app.reverse.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.bridgeConfig != null && message.bridgeConfig.length)
                            for (var i = 0; i < message.bridgeConfig.length; ++i)
                                $root.v2ray.core.app.reverse.BridgeConfig.encode(message.bridgeConfig[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.portalConfig != null && message.portalConfig.length)
                            for (var i = 0; i < message.portalConfig.length; ++i)
                                $root.v2ray.core.app.reverse.PortalConfig.encode(message.portalConfig[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.reverse.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {v2ray.core.app.reverse.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.reverse.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.reverse.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.bridgeConfig && message.bridgeConfig.length))
                                    message.bridgeConfig = [];
                                message.bridgeConfig.push($root.v2ray.core.app.reverse.BridgeConfig.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.portalConfig && message.portalConfig.length))
                                    message.portalConfig = [];
                                message.portalConfig.push($root.v2ray.core.app.reverse.PortalConfig.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.reverse.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.bridgeConfig != null && message.hasOwnProperty("bridgeConfig")) {
                            if (!Array.isArray(message.bridgeConfig))
                                return "bridgeConfig: array expected";
                            for (var i = 0; i < message.bridgeConfig.length; ++i) {
                                var error = $root.v2ray.core.app.reverse.BridgeConfig.verify(message.bridgeConfig[i]);
                                if (error)
                                    return "bridgeConfig." + error;
                            }
                        }
                        if (message.portalConfig != null && message.hasOwnProperty("portalConfig")) {
                            if (!Array.isArray(message.portalConfig))
                                return "portalConfig: array expected";
                            for (var i = 0; i < message.portalConfig.length; ++i) {
                                var error = $root.v2ray.core.app.reverse.PortalConfig.verify(message.portalConfig[i]);
                                if (error)
                                    return "portalConfig." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.reverse.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.reverse.Config)
                            return object;
                        var message = new $root.v2ray.core.app.reverse.Config();
                        if (object.bridgeConfig) {
                            if (!Array.isArray(object.bridgeConfig))
                                throw TypeError(".v2ray.core.app.reverse.Config.bridgeConfig: array expected");
                            message.bridgeConfig = [];
                            for (var i = 0; i < object.bridgeConfig.length; ++i) {
                                if (typeof object.bridgeConfig[i] !== "object")
                                    throw TypeError(".v2ray.core.app.reverse.Config.bridgeConfig: object expected");
                                message.bridgeConfig[i] = $root.v2ray.core.app.reverse.BridgeConfig.fromObject(object.bridgeConfig[i]);
                            }
                        }
                        if (object.portalConfig) {
                            if (!Array.isArray(object.portalConfig))
                                throw TypeError(".v2ray.core.app.reverse.Config.portalConfig: array expected");
                            message.portalConfig = [];
                            for (var i = 0; i < object.portalConfig.length; ++i) {
                                if (typeof object.portalConfig[i] !== "object")
                                    throw TypeError(".v2ray.core.app.reverse.Config.portalConfig: object expected");
                                message.portalConfig[i] = $root.v2ray.core.app.reverse.PortalConfig.fromObject(object.portalConfig[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.reverse.Config
                     * @static
                     * @param {v2ray.core.app.reverse.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.bridgeConfig = [];
                            object.portalConfig = [];
                        }
                        if (message.bridgeConfig && message.bridgeConfig.length) {
                            object.bridgeConfig = [];
                            for (var j = 0; j < message.bridgeConfig.length; ++j)
                                object.bridgeConfig[j] = $root.v2ray.core.app.reverse.BridgeConfig.toObject(message.bridgeConfig[j], options);
                        }
                        if (message.portalConfig && message.portalConfig.length) {
                            object.portalConfig = [];
                            for (var j = 0; j < message.portalConfig.length; ++j)
                                object.portalConfig[j] = $root.v2ray.core.app.reverse.PortalConfig.toObject(message.portalConfig[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.reverse.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return reverse;
            })();

            app.router = (function() {

                /**
                 * Namespace router.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var router = {};

                router.Domain = (function() {

                    /**
                     * Properties of a Domain.
                     * @memberof v2ray.core.app.router
                     * @interface IDomain
                     * @property {v2ray.core.app.router.Domain.Type|null} [type] Domain type
                     * @property {string|null} [value] Domain value
                     * @property {Array.<v2ray.core.app.router.Domain.IAttribute>|null} [attribute] Domain attribute
                     */

                    /**
                     * Constructs a new Domain.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a Domain.
                     * @implements IDomain
                     * @constructor
                     * @param {v2ray.core.app.router.IDomain=} [properties] Properties to set
                     */
                    function Domain(properties) {
                        this.attribute = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Domain type.
                     * @member {v2ray.core.app.router.Domain.Type} type
                     * @memberof v2ray.core.app.router.Domain
                     * @instance
                     */
                    Domain.prototype.type = 0;

                    /**
                     * Domain value.
                     * @member {string} value
                     * @memberof v2ray.core.app.router.Domain
                     * @instance
                     */
                    Domain.prototype.value = "";

                    /**
                     * Domain attribute.
                     * @member {Array.<v2ray.core.app.router.Domain.IAttribute>} attribute
                     * @memberof v2ray.core.app.router.Domain
                     * @instance
                     */
                    Domain.prototype.attribute = $util.emptyArray;

                    /**
                     * Creates a new Domain instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {v2ray.core.app.router.IDomain=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.Domain} Domain instance
                     */
                    Domain.create = function create(properties) {
                        return new Domain(properties);
                    };

                    /**
                     * Encodes the specified Domain message. Does not implicitly {@link v2ray.core.app.router.Domain.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {v2ray.core.app.router.IDomain} message Domain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Domain.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.value != null && message.hasOwnProperty("value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                        if (message.attribute != null && message.attribute.length)
                            for (var i = 0; i < message.attribute.length; ++i)
                                $root.v2ray.core.app.router.Domain.Attribute.encode(message.attribute[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Domain message, length delimited. Does not implicitly {@link v2ray.core.app.router.Domain.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {v2ray.core.app.router.IDomain} message Domain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Domain.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Domain message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.Domain} Domain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Domain.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.Domain();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.int32();
                                break;
                            case 2:
                                message.value = reader.string();
                                break;
                            case 3:
                                if (!(message.attribute && message.attribute.length))
                                    message.attribute = [];
                                message.attribute.push($root.v2ray.core.app.router.Domain.Attribute.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Domain message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.Domain} Domain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Domain.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Domain message.
                     * @function verify
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Domain.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isString(message.value))
                                return "value: string expected";
                        if (message.attribute != null && message.hasOwnProperty("attribute")) {
                            if (!Array.isArray(message.attribute))
                                return "attribute: array expected";
                            for (var i = 0; i < message.attribute.length; ++i) {
                                var error = $root.v2ray.core.app.router.Domain.Attribute.verify(message.attribute[i]);
                                if (error)
                                    return "attribute." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Domain message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.Domain} Domain
                     */
                    Domain.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.Domain)
                            return object;
                        var message = new $root.v2ray.core.app.router.Domain();
                        switch (object.type) {
                        case "Plain":
                        case 0:
                            message.type = 0;
                            break;
                        case "Regex":
                        case 1:
                            message.type = 1;
                            break;
                        case "Domain":
                        case 2:
                            message.type = 2;
                            break;
                        case "Full":
                        case 3:
                            message.type = 3;
                            break;
                        }
                        if (object.value != null)
                            message.value = String(object.value);
                        if (object.attribute) {
                            if (!Array.isArray(object.attribute))
                                throw TypeError(".v2ray.core.app.router.Domain.attribute: array expected");
                            message.attribute = [];
                            for (var i = 0; i < object.attribute.length; ++i) {
                                if (typeof object.attribute[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.Domain.attribute: object expected");
                                message.attribute[i] = $root.v2ray.core.app.router.Domain.Attribute.fromObject(object.attribute[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Domain message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.Domain
                     * @static
                     * @param {v2ray.core.app.router.Domain} message Domain
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Domain.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.attribute = [];
                        if (options.defaults) {
                            object.type = options.enums === String ? "Plain" : 0;
                            object.value = "";
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.v2ray.core.app.router.Domain.Type[message.type] : message.type;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        if (message.attribute && message.attribute.length) {
                            object.attribute = [];
                            for (var j = 0; j < message.attribute.length; ++j)
                                object.attribute[j] = $root.v2ray.core.app.router.Domain.Attribute.toObject(message.attribute[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Domain to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.Domain
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Domain.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Type enum.
                     * @name v2ray.core.app.router.Domain.Type
                     * @enum {string}
                     * @property {number} Plain=0 Plain value
                     * @property {number} Regex=1 Regex value
                     * @property {number} Domain=2 Domain value
                     * @property {number} Full=3 Full value
                     */
                    Domain.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "Plain"] = 0;
                        values[valuesById[1] = "Regex"] = 1;
                        values[valuesById[2] = "Domain"] = 2;
                        values[valuesById[3] = "Full"] = 3;
                        return values;
                    })();

                    Domain.Attribute = (function() {

                        /**
                         * Properties of an Attribute.
                         * @memberof v2ray.core.app.router.Domain
                         * @interface IAttribute
                         * @property {string|null} [key] Attribute key
                         * @property {boolean|null} [boolValue] Attribute boolValue
                         * @property {number|Long|null} [intValue] Attribute intValue
                         */

                        /**
                         * Constructs a new Attribute.
                         * @memberof v2ray.core.app.router.Domain
                         * @classdesc Represents an Attribute.
                         * @implements IAttribute
                         * @constructor
                         * @param {v2ray.core.app.router.Domain.IAttribute=} [properties] Properties to set
                         */
                        function Attribute(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Attribute key.
                         * @member {string} key
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @instance
                         */
                        Attribute.prototype.key = "";

                        /**
                         * Attribute boolValue.
                         * @member {boolean} boolValue
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @instance
                         */
                        Attribute.prototype.boolValue = false;

                        /**
                         * Attribute intValue.
                         * @member {number|Long} intValue
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @instance
                         */
                        Attribute.prototype.intValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;

                        /**
                         * Attribute typedValue.
                         * @member {"boolValue"|"intValue"|undefined} typedValue
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @instance
                         */
                        Object.defineProperty(Attribute.prototype, "typedValue", {
                            get: $util.oneOfGetter($oneOfFields = ["boolValue", "intValue"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });

                        /**
                         * Creates a new Attribute instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {v2ray.core.app.router.Domain.IAttribute=} [properties] Properties to set
                         * @returns {v2ray.core.app.router.Domain.Attribute} Attribute instance
                         */
                        Attribute.create = function create(properties) {
                            return new Attribute(properties);
                        };

                        /**
                         * Encodes the specified Attribute message. Does not implicitly {@link v2ray.core.app.router.Domain.Attribute.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {v2ray.core.app.router.Domain.IAttribute} message Attribute message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Attribute.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && message.hasOwnProperty("key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                            if (message.boolValue != null && message.hasOwnProperty("boolValue"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.boolValue);
                            if (message.intValue != null && message.hasOwnProperty("intValue"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.intValue);
                            return writer;
                        };

                        /**
                         * Encodes the specified Attribute message, length delimited. Does not implicitly {@link v2ray.core.app.router.Domain.Attribute.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {v2ray.core.app.router.Domain.IAttribute} message Attribute message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Attribute.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Attribute message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.router.Domain.Attribute} Attribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Attribute.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.Domain.Attribute();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.key = reader.string();
                                    break;
                                case 2:
                                    message.boolValue = reader.bool();
                                    break;
                                case 3:
                                    message.intValue = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Attribute message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.router.Domain.Attribute} Attribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Attribute.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Attribute message.
                         * @function verify
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Attribute.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.key != null && message.hasOwnProperty("key"))
                                if (!$util.isString(message.key))
                                    return "key: string expected";
                            if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                                properties.typedValue = 1;
                                if (typeof message.boolValue !== "boolean")
                                    return "boolValue: boolean expected";
                            }
                            if (message.intValue != null && message.hasOwnProperty("intValue")) {
                                if (properties.typedValue === 1)
                                    return "typedValue: multiple values";
                                properties.typedValue = 1;
                                if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))
                                    return "intValue: integer|Long expected";
                            }
                            return null;
                        };

                        /**
                         * Creates an Attribute message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.router.Domain.Attribute} Attribute
                         */
                        Attribute.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.router.Domain.Attribute)
                                return object;
                            var message = new $root.v2ray.core.app.router.Domain.Attribute();
                            if (object.key != null)
                                message.key = String(object.key);
                            if (object.boolValue != null)
                                message.boolValue = Boolean(object.boolValue);
                            if (object.intValue != null)
                                if ($util.Long)
                                    (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;
                                else if (typeof object.intValue === "string")
                                    message.intValue = parseInt(object.intValue, 10);
                                else if (typeof object.intValue === "number")
                                    message.intValue = object.intValue;
                                else if (typeof object.intValue === "object")
                                    message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();
                            return message;
                        };

                        /**
                         * Creates a plain object from an Attribute message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @static
                         * @param {v2ray.core.app.router.Domain.Attribute} message Attribute
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Attribute.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.key = "";
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = message.key;
                            if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                                object.boolValue = message.boolValue;
                                if (options.oneofs)
                                    object.typedValue = "boolValue";
                            }
                            if (message.intValue != null && message.hasOwnProperty("intValue")) {
                                if (typeof message.intValue === "number")
                                    object.intValue = options.longs === String ? String(message.intValue) : message.intValue;
                                else
                                    object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;
                                if (options.oneofs)
                                    object.typedValue = "intValue";
                            }
                            return object;
                        };

                        /**
                         * Converts this Attribute to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.router.Domain.Attribute
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Attribute.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Attribute;
                    })();

                    return Domain;
                })();

                router.CIDR = (function() {

                    /**
                     * Properties of a CIDR.
                     * @memberof v2ray.core.app.router
                     * @interface ICIDR
                     * @property {Uint8Array|null} [ip] CIDR ip
                     * @property {number|null} [prefix] CIDR prefix
                     */

                    /**
                     * Constructs a new CIDR.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a CIDR.
                     * @implements ICIDR
                     * @constructor
                     * @param {v2ray.core.app.router.ICIDR=} [properties] Properties to set
                     */
                    function CIDR(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CIDR ip.
                     * @member {Uint8Array} ip
                     * @memberof v2ray.core.app.router.CIDR
                     * @instance
                     */
                    CIDR.prototype.ip = $util.newBuffer([]);

                    /**
                     * CIDR prefix.
                     * @member {number} prefix
                     * @memberof v2ray.core.app.router.CIDR
                     * @instance
                     */
                    CIDR.prototype.prefix = 0;

                    /**
                     * Creates a new CIDR instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {v2ray.core.app.router.ICIDR=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.CIDR} CIDR instance
                     */
                    CIDR.create = function create(properties) {
                        return new CIDR(properties);
                    };

                    /**
                     * Encodes the specified CIDR message. Does not implicitly {@link v2ray.core.app.router.CIDR.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {v2ray.core.app.router.ICIDR} message CIDR message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CIDR.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.ip != null && message.hasOwnProperty("ip"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ip);
                        if (message.prefix != null && message.hasOwnProperty("prefix"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.prefix);
                        return writer;
                    };

                    /**
                     * Encodes the specified CIDR message, length delimited. Does not implicitly {@link v2ray.core.app.router.CIDR.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {v2ray.core.app.router.ICIDR} message CIDR message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CIDR.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CIDR message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.CIDR} CIDR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CIDR.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.CIDR();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.ip = reader.bytes();
                                break;
                            case 2:
                                message.prefix = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CIDR message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.CIDR} CIDR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CIDR.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CIDR message.
                     * @function verify
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CIDR.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.ip != null && message.hasOwnProperty("ip"))
                            if (!(message.ip && typeof message.ip.length === "number" || $util.isString(message.ip)))
                                return "ip: buffer expected";
                        if (message.prefix != null && message.hasOwnProperty("prefix"))
                            if (!$util.isInteger(message.prefix))
                                return "prefix: integer expected";
                        return null;
                    };

                    /**
                     * Creates a CIDR message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.CIDR} CIDR
                     */
                    CIDR.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.CIDR)
                            return object;
                        var message = new $root.v2ray.core.app.router.CIDR();
                        if (object.ip != null)
                            if (typeof object.ip === "string")
                                $util.base64.decode(object.ip, message.ip = $util.newBuffer($util.base64.length(object.ip)), 0);
                            else if (object.ip.length)
                                message.ip = object.ip;
                        if (object.prefix != null)
                            message.prefix = object.prefix >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a CIDR message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.CIDR
                     * @static
                     * @param {v2ray.core.app.router.CIDR} message CIDR
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CIDR.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.ip = "";
                            else {
                                object.ip = [];
                                if (options.bytes !== Array)
                                    object.ip = $util.newBuffer(object.ip);
                            }
                            object.prefix = 0;
                        }
                        if (message.ip != null && message.hasOwnProperty("ip"))
                            object.ip = options.bytes === String ? $util.base64.encode(message.ip, 0, message.ip.length) : options.bytes === Array ? Array.prototype.slice.call(message.ip) : message.ip;
                        if (message.prefix != null && message.hasOwnProperty("prefix"))
                            object.prefix = message.prefix;
                        return object;
                    };

                    /**
                     * Converts this CIDR to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.CIDR
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CIDR.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CIDR;
                })();

                router.GeoIP = (function() {

                    /**
                     * Properties of a GeoIP.
                     * @memberof v2ray.core.app.router
                     * @interface IGeoIP
                     * @property {string|null} [countryCode] GeoIP countryCode
                     * @property {Array.<v2ray.core.app.router.ICIDR>|null} [cidr] GeoIP cidr
                     */

                    /**
                     * Constructs a new GeoIP.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a GeoIP.
                     * @implements IGeoIP
                     * @constructor
                     * @param {v2ray.core.app.router.IGeoIP=} [properties] Properties to set
                     */
                    function GeoIP(properties) {
                        this.cidr = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GeoIP countryCode.
                     * @member {string} countryCode
                     * @memberof v2ray.core.app.router.GeoIP
                     * @instance
                     */
                    GeoIP.prototype.countryCode = "";

                    /**
                     * GeoIP cidr.
                     * @member {Array.<v2ray.core.app.router.ICIDR>} cidr
                     * @memberof v2ray.core.app.router.GeoIP
                     * @instance
                     */
                    GeoIP.prototype.cidr = $util.emptyArray;

                    /**
                     * Creates a new GeoIP instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {v2ray.core.app.router.IGeoIP=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.GeoIP} GeoIP instance
                     */
                    GeoIP.create = function create(properties) {
                        return new GeoIP(properties);
                    };

                    /**
                     * Encodes the specified GeoIP message. Does not implicitly {@link v2ray.core.app.router.GeoIP.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {v2ray.core.app.router.IGeoIP} message GeoIP message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoIP.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.countryCode != null && message.hasOwnProperty("countryCode"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.countryCode);
                        if (message.cidr != null && message.cidr.length)
                            for (var i = 0; i < message.cidr.length; ++i)
                                $root.v2ray.core.app.router.CIDR.encode(message.cidr[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GeoIP message, length delimited. Does not implicitly {@link v2ray.core.app.router.GeoIP.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {v2ray.core.app.router.IGeoIP} message GeoIP message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoIP.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GeoIP message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.GeoIP} GeoIP
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoIP.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.GeoIP();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.countryCode = reader.string();
                                break;
                            case 2:
                                if (!(message.cidr && message.cidr.length))
                                    message.cidr = [];
                                message.cidr.push($root.v2ray.core.app.router.CIDR.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GeoIP message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.GeoIP} GeoIP
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoIP.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GeoIP message.
                     * @function verify
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GeoIP.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.countryCode != null && message.hasOwnProperty("countryCode"))
                            if (!$util.isString(message.countryCode))
                                return "countryCode: string expected";
                        if (message.cidr != null && message.hasOwnProperty("cidr")) {
                            if (!Array.isArray(message.cidr))
                                return "cidr: array expected";
                            for (var i = 0; i < message.cidr.length; ++i) {
                                var error = $root.v2ray.core.app.router.CIDR.verify(message.cidr[i]);
                                if (error)
                                    return "cidr." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a GeoIP message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.GeoIP} GeoIP
                     */
                    GeoIP.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.GeoIP)
                            return object;
                        var message = new $root.v2ray.core.app.router.GeoIP();
                        if (object.countryCode != null)
                            message.countryCode = String(object.countryCode);
                        if (object.cidr) {
                            if (!Array.isArray(object.cidr))
                                throw TypeError(".v2ray.core.app.router.GeoIP.cidr: array expected");
                            message.cidr = [];
                            for (var i = 0; i < object.cidr.length; ++i) {
                                if (typeof object.cidr[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.GeoIP.cidr: object expected");
                                message.cidr[i] = $root.v2ray.core.app.router.CIDR.fromObject(object.cidr[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GeoIP message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.GeoIP
                     * @static
                     * @param {v2ray.core.app.router.GeoIP} message GeoIP
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GeoIP.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.cidr = [];
                        if (options.defaults)
                            object.countryCode = "";
                        if (message.countryCode != null && message.hasOwnProperty("countryCode"))
                            object.countryCode = message.countryCode;
                        if (message.cidr && message.cidr.length) {
                            object.cidr = [];
                            for (var j = 0; j < message.cidr.length; ++j)
                                object.cidr[j] = $root.v2ray.core.app.router.CIDR.toObject(message.cidr[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this GeoIP to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.GeoIP
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GeoIP.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GeoIP;
                })();

                router.GeoIPList = (function() {

                    /**
                     * Properties of a GeoIPList.
                     * @memberof v2ray.core.app.router
                     * @interface IGeoIPList
                     * @property {Array.<v2ray.core.app.router.IGeoIP>|null} [entry] GeoIPList entry
                     */

                    /**
                     * Constructs a new GeoIPList.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a GeoIPList.
                     * @implements IGeoIPList
                     * @constructor
                     * @param {v2ray.core.app.router.IGeoIPList=} [properties] Properties to set
                     */
                    function GeoIPList(properties) {
                        this.entry = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GeoIPList entry.
                     * @member {Array.<v2ray.core.app.router.IGeoIP>} entry
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @instance
                     */
                    GeoIPList.prototype.entry = $util.emptyArray;

                    /**
                     * Creates a new GeoIPList instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {v2ray.core.app.router.IGeoIPList=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.GeoIPList} GeoIPList instance
                     */
                    GeoIPList.create = function create(properties) {
                        return new GeoIPList(properties);
                    };

                    /**
                     * Encodes the specified GeoIPList message. Does not implicitly {@link v2ray.core.app.router.GeoIPList.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {v2ray.core.app.router.IGeoIPList} message GeoIPList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoIPList.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.entry != null && message.entry.length)
                            for (var i = 0; i < message.entry.length; ++i)
                                $root.v2ray.core.app.router.GeoIP.encode(message.entry[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GeoIPList message, length delimited. Does not implicitly {@link v2ray.core.app.router.GeoIPList.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {v2ray.core.app.router.IGeoIPList} message GeoIPList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoIPList.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GeoIPList message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.GeoIPList} GeoIPList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoIPList.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.GeoIPList();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.entry && message.entry.length))
                                    message.entry = [];
                                message.entry.push($root.v2ray.core.app.router.GeoIP.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GeoIPList message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.GeoIPList} GeoIPList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoIPList.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GeoIPList message.
                     * @function verify
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GeoIPList.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.entry != null && message.hasOwnProperty("entry")) {
                            if (!Array.isArray(message.entry))
                                return "entry: array expected";
                            for (var i = 0; i < message.entry.length; ++i) {
                                var error = $root.v2ray.core.app.router.GeoIP.verify(message.entry[i]);
                                if (error)
                                    return "entry." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a GeoIPList message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.GeoIPList} GeoIPList
                     */
                    GeoIPList.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.GeoIPList)
                            return object;
                        var message = new $root.v2ray.core.app.router.GeoIPList();
                        if (object.entry) {
                            if (!Array.isArray(object.entry))
                                throw TypeError(".v2ray.core.app.router.GeoIPList.entry: array expected");
                            message.entry = [];
                            for (var i = 0; i < object.entry.length; ++i) {
                                if (typeof object.entry[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.GeoIPList.entry: object expected");
                                message.entry[i] = $root.v2ray.core.app.router.GeoIP.fromObject(object.entry[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GeoIPList message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @static
                     * @param {v2ray.core.app.router.GeoIPList} message GeoIPList
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GeoIPList.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.entry = [];
                        if (message.entry && message.entry.length) {
                            object.entry = [];
                            for (var j = 0; j < message.entry.length; ++j)
                                object.entry[j] = $root.v2ray.core.app.router.GeoIP.toObject(message.entry[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this GeoIPList to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.GeoIPList
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GeoIPList.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GeoIPList;
                })();

                router.GeoSite = (function() {

                    /**
                     * Properties of a GeoSite.
                     * @memberof v2ray.core.app.router
                     * @interface IGeoSite
                     * @property {string|null} [countryCode] GeoSite countryCode
                     * @property {Array.<v2ray.core.app.router.IDomain>|null} [domain] GeoSite domain
                     */

                    /**
                     * Constructs a new GeoSite.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a GeoSite.
                     * @implements IGeoSite
                     * @constructor
                     * @param {v2ray.core.app.router.IGeoSite=} [properties] Properties to set
                     */
                    function GeoSite(properties) {
                        this.domain = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GeoSite countryCode.
                     * @member {string} countryCode
                     * @memberof v2ray.core.app.router.GeoSite
                     * @instance
                     */
                    GeoSite.prototype.countryCode = "";

                    /**
                     * GeoSite domain.
                     * @member {Array.<v2ray.core.app.router.IDomain>} domain
                     * @memberof v2ray.core.app.router.GeoSite
                     * @instance
                     */
                    GeoSite.prototype.domain = $util.emptyArray;

                    /**
                     * Creates a new GeoSite instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {v2ray.core.app.router.IGeoSite=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.GeoSite} GeoSite instance
                     */
                    GeoSite.create = function create(properties) {
                        return new GeoSite(properties);
                    };

                    /**
                     * Encodes the specified GeoSite message. Does not implicitly {@link v2ray.core.app.router.GeoSite.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {v2ray.core.app.router.IGeoSite} message GeoSite message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoSite.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.countryCode != null && message.hasOwnProperty("countryCode"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.countryCode);
                        if (message.domain != null && message.domain.length)
                            for (var i = 0; i < message.domain.length; ++i)
                                $root.v2ray.core.app.router.Domain.encode(message.domain[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GeoSite message, length delimited. Does not implicitly {@link v2ray.core.app.router.GeoSite.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {v2ray.core.app.router.IGeoSite} message GeoSite message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoSite.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GeoSite message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.GeoSite} GeoSite
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoSite.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.GeoSite();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.countryCode = reader.string();
                                break;
                            case 2:
                                if (!(message.domain && message.domain.length))
                                    message.domain = [];
                                message.domain.push($root.v2ray.core.app.router.Domain.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GeoSite message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.GeoSite} GeoSite
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoSite.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GeoSite message.
                     * @function verify
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GeoSite.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.countryCode != null && message.hasOwnProperty("countryCode"))
                            if (!$util.isString(message.countryCode))
                                return "countryCode: string expected";
                        if (message.domain != null && message.hasOwnProperty("domain")) {
                            if (!Array.isArray(message.domain))
                                return "domain: array expected";
                            for (var i = 0; i < message.domain.length; ++i) {
                                var error = $root.v2ray.core.app.router.Domain.verify(message.domain[i]);
                                if (error)
                                    return "domain." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a GeoSite message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.GeoSite} GeoSite
                     */
                    GeoSite.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.GeoSite)
                            return object;
                        var message = new $root.v2ray.core.app.router.GeoSite();
                        if (object.countryCode != null)
                            message.countryCode = String(object.countryCode);
                        if (object.domain) {
                            if (!Array.isArray(object.domain))
                                throw TypeError(".v2ray.core.app.router.GeoSite.domain: array expected");
                            message.domain = [];
                            for (var i = 0; i < object.domain.length; ++i) {
                                if (typeof object.domain[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.GeoSite.domain: object expected");
                                message.domain[i] = $root.v2ray.core.app.router.Domain.fromObject(object.domain[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GeoSite message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.GeoSite
                     * @static
                     * @param {v2ray.core.app.router.GeoSite} message GeoSite
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GeoSite.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.domain = [];
                        if (options.defaults)
                            object.countryCode = "";
                        if (message.countryCode != null && message.hasOwnProperty("countryCode"))
                            object.countryCode = message.countryCode;
                        if (message.domain && message.domain.length) {
                            object.domain = [];
                            for (var j = 0; j < message.domain.length; ++j)
                                object.domain[j] = $root.v2ray.core.app.router.Domain.toObject(message.domain[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this GeoSite to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.GeoSite
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GeoSite.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GeoSite;
                })();

                router.GeoSiteList = (function() {

                    /**
                     * Properties of a GeoSiteList.
                     * @memberof v2ray.core.app.router
                     * @interface IGeoSiteList
                     * @property {Array.<v2ray.core.app.router.IGeoSite>|null} [entry] GeoSiteList entry
                     */

                    /**
                     * Constructs a new GeoSiteList.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a GeoSiteList.
                     * @implements IGeoSiteList
                     * @constructor
                     * @param {v2ray.core.app.router.IGeoSiteList=} [properties] Properties to set
                     */
                    function GeoSiteList(properties) {
                        this.entry = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GeoSiteList entry.
                     * @member {Array.<v2ray.core.app.router.IGeoSite>} entry
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @instance
                     */
                    GeoSiteList.prototype.entry = $util.emptyArray;

                    /**
                     * Creates a new GeoSiteList instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {v2ray.core.app.router.IGeoSiteList=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.GeoSiteList} GeoSiteList instance
                     */
                    GeoSiteList.create = function create(properties) {
                        return new GeoSiteList(properties);
                    };

                    /**
                     * Encodes the specified GeoSiteList message. Does not implicitly {@link v2ray.core.app.router.GeoSiteList.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {v2ray.core.app.router.IGeoSiteList} message GeoSiteList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoSiteList.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.entry != null && message.entry.length)
                            for (var i = 0; i < message.entry.length; ++i)
                                $root.v2ray.core.app.router.GeoSite.encode(message.entry[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GeoSiteList message, length delimited. Does not implicitly {@link v2ray.core.app.router.GeoSiteList.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {v2ray.core.app.router.IGeoSiteList} message GeoSiteList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GeoSiteList.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GeoSiteList message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.GeoSiteList} GeoSiteList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoSiteList.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.GeoSiteList();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.entry && message.entry.length))
                                    message.entry = [];
                                message.entry.push($root.v2ray.core.app.router.GeoSite.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GeoSiteList message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.GeoSiteList} GeoSiteList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GeoSiteList.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GeoSiteList message.
                     * @function verify
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GeoSiteList.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.entry != null && message.hasOwnProperty("entry")) {
                            if (!Array.isArray(message.entry))
                                return "entry: array expected";
                            for (var i = 0; i < message.entry.length; ++i) {
                                var error = $root.v2ray.core.app.router.GeoSite.verify(message.entry[i]);
                                if (error)
                                    return "entry." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a GeoSiteList message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.GeoSiteList} GeoSiteList
                     */
                    GeoSiteList.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.GeoSiteList)
                            return object;
                        var message = new $root.v2ray.core.app.router.GeoSiteList();
                        if (object.entry) {
                            if (!Array.isArray(object.entry))
                                throw TypeError(".v2ray.core.app.router.GeoSiteList.entry: array expected");
                            message.entry = [];
                            for (var i = 0; i < object.entry.length; ++i) {
                                if (typeof object.entry[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.GeoSiteList.entry: object expected");
                                message.entry[i] = $root.v2ray.core.app.router.GeoSite.fromObject(object.entry[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GeoSiteList message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @static
                     * @param {v2ray.core.app.router.GeoSiteList} message GeoSiteList
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GeoSiteList.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.entry = [];
                        if (message.entry && message.entry.length) {
                            object.entry = [];
                            for (var j = 0; j < message.entry.length; ++j)
                                object.entry[j] = $root.v2ray.core.app.router.GeoSite.toObject(message.entry[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this GeoSiteList to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.GeoSiteList
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GeoSiteList.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GeoSiteList;
                })();

                router.RoutingRule = (function() {

                    /**
                     * Properties of a RoutingRule.
                     * @memberof v2ray.core.app.router
                     * @interface IRoutingRule
                     * @property {string|null} [tag] RoutingRule tag
                     * @property {string|null} [balancingTag] RoutingRule balancingTag
                     * @property {Array.<v2ray.core.app.router.IDomain>|null} [domain] RoutingRule domain
                     * @property {Array.<v2ray.core.app.router.ICIDR>|null} [cidr] RoutingRule cidr
                     * @property {Array.<v2ray.core.app.router.IGeoIP>|null} [geoip] RoutingRule geoip
                     * @property {v2ray.core.common.net.IPortRange|null} [portRange] RoutingRule portRange
                     * @property {v2ray.core.common.net.IPortList|null} [portList] RoutingRule portList
                     * @property {v2ray.core.common.net.INetworkList|null} [networkList] RoutingRule networkList
                     * @property {Array.<v2ray.core.common.net.Network>|null} [networks] RoutingRule networks
                     * @property {Array.<v2ray.core.app.router.ICIDR>|null} [sourceCidr] RoutingRule sourceCidr
                     * @property {Array.<v2ray.core.app.router.IGeoIP>|null} [sourceGeoip] RoutingRule sourceGeoip
                     * @property {Array.<string>|null} [userEmail] RoutingRule userEmail
                     * @property {Array.<string>|null} [inboundTag] RoutingRule inboundTag
                     * @property {Array.<string>|null} [protocol] RoutingRule protocol
                     * @property {string|null} [attributes] RoutingRule attributes
                     */

                    /**
                     * Constructs a new RoutingRule.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a RoutingRule.
                     * @implements IRoutingRule
                     * @constructor
                     * @param {v2ray.core.app.router.IRoutingRule=} [properties] Properties to set
                     */
                    function RoutingRule(properties) {
                        this.domain = [];
                        this.cidr = [];
                        this.geoip = [];
                        this.networks = [];
                        this.sourceCidr = [];
                        this.sourceGeoip = [];
                        this.userEmail = [];
                        this.inboundTag = [];
                        this.protocol = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * RoutingRule tag.
                     * @member {string} tag
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.tag = "";

                    /**
                     * RoutingRule balancingTag.
                     * @member {string} balancingTag
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.balancingTag = "";

                    /**
                     * RoutingRule domain.
                     * @member {Array.<v2ray.core.app.router.IDomain>} domain
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.domain = $util.emptyArray;

                    /**
                     * RoutingRule cidr.
                     * @member {Array.<v2ray.core.app.router.ICIDR>} cidr
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.cidr = $util.emptyArray;

                    /**
                     * RoutingRule geoip.
                     * @member {Array.<v2ray.core.app.router.IGeoIP>} geoip
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.geoip = $util.emptyArray;

                    /**
                     * RoutingRule portRange.
                     * @member {v2ray.core.common.net.IPortRange|null|undefined} portRange
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.portRange = null;

                    /**
                     * RoutingRule portList.
                     * @member {v2ray.core.common.net.IPortList|null|undefined} portList
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.portList = null;

                    /**
                     * RoutingRule networkList.
                     * @member {v2ray.core.common.net.INetworkList|null|undefined} networkList
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.networkList = null;

                    /**
                     * RoutingRule networks.
                     * @member {Array.<v2ray.core.common.net.Network>} networks
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.networks = $util.emptyArray;

                    /**
                     * RoutingRule sourceCidr.
                     * @member {Array.<v2ray.core.app.router.ICIDR>} sourceCidr
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.sourceCidr = $util.emptyArray;

                    /**
                     * RoutingRule sourceGeoip.
                     * @member {Array.<v2ray.core.app.router.IGeoIP>} sourceGeoip
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.sourceGeoip = $util.emptyArray;

                    /**
                     * RoutingRule userEmail.
                     * @member {Array.<string>} userEmail
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.userEmail = $util.emptyArray;

                    /**
                     * RoutingRule inboundTag.
                     * @member {Array.<string>} inboundTag
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.inboundTag = $util.emptyArray;

                    /**
                     * RoutingRule protocol.
                     * @member {Array.<string>} protocol
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.protocol = $util.emptyArray;

                    /**
                     * RoutingRule attributes.
                     * @member {string} attributes
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    RoutingRule.prototype.attributes = "";

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * RoutingRule targetTag.
                     * @member {"tag"|"balancingTag"|undefined} targetTag
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     */
                    Object.defineProperty(RoutingRule.prototype, "targetTag", {
                        get: $util.oneOfGetter($oneOfFields = ["tag", "balancingTag"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new RoutingRule instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {v2ray.core.app.router.IRoutingRule=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.RoutingRule} RoutingRule instance
                     */
                    RoutingRule.create = function create(properties) {
                        return new RoutingRule(properties);
                    };

                    /**
                     * Encodes the specified RoutingRule message. Does not implicitly {@link v2ray.core.app.router.RoutingRule.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {v2ray.core.app.router.IRoutingRule} message RoutingRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RoutingRule.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                        if (message.domain != null && message.domain.length)
                            for (var i = 0; i < message.domain.length; ++i)
                                $root.v2ray.core.app.router.Domain.encode(message.domain[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.cidr != null && message.cidr.length)
                            for (var i = 0; i < message.cidr.length; ++i)
                                $root.v2ray.core.app.router.CIDR.encode(message.cidr[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.portRange != null && message.hasOwnProperty("portRange"))
                            $root.v2ray.core.common.net.PortRange.encode(message.portRange, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.networkList != null && message.hasOwnProperty("networkList"))
                            $root.v2ray.core.common.net.NetworkList.encode(message.networkList, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.sourceCidr != null && message.sourceCidr.length)
                            for (var i = 0; i < message.sourceCidr.length; ++i)
                                $root.v2ray.core.app.router.CIDR.encode(message.sourceCidr[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.userEmail != null && message.userEmail.length)
                            for (var i = 0; i < message.userEmail.length; ++i)
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.userEmail[i]);
                        if (message.inboundTag != null && message.inboundTag.length)
                            for (var i = 0; i < message.inboundTag.length; ++i)
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.inboundTag[i]);
                        if (message.protocol != null && message.protocol.length)
                            for (var i = 0; i < message.protocol.length; ++i)
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.protocol[i]);
                        if (message.geoip != null && message.geoip.length)
                            for (var i = 0; i < message.geoip.length; ++i)
                                $root.v2ray.core.app.router.GeoIP.encode(message.geoip[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.sourceGeoip != null && message.sourceGeoip.length)
                            for (var i = 0; i < message.sourceGeoip.length; ++i)
                                $root.v2ray.core.app.router.GeoIP.encode(message.sourceGeoip[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.balancingTag != null && message.hasOwnProperty("balancingTag"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.balancingTag);
                        if (message.networks != null && message.networks.length) {
                            writer.uint32(/* id 13, wireType 2 =*/106).fork();
                            for (var i = 0; i < message.networks.length; ++i)
                                writer.int32(message.networks[i]);
                            writer.ldelim();
                        }
                        if (message.portList != null && message.hasOwnProperty("portList"))
                            $root.v2ray.core.common.net.PortList.encode(message.portList, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                        if (message.attributes != null && message.hasOwnProperty("attributes"))
                            writer.uint32(/* id 15, wireType 2 =*/122).string(message.attributes);
                        return writer;
                    };

                    /**
                     * Encodes the specified RoutingRule message, length delimited. Does not implicitly {@link v2ray.core.app.router.RoutingRule.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {v2ray.core.app.router.IRoutingRule} message RoutingRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RoutingRule.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a RoutingRule message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.RoutingRule} RoutingRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RoutingRule.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.RoutingRule();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tag = reader.string();
                                break;
                            case 12:
                                message.balancingTag = reader.string();
                                break;
                            case 2:
                                if (!(message.domain && message.domain.length))
                                    message.domain = [];
                                message.domain.push($root.v2ray.core.app.router.Domain.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.cidr && message.cidr.length))
                                    message.cidr = [];
                                message.cidr.push($root.v2ray.core.app.router.CIDR.decode(reader, reader.uint32()));
                                break;
                            case 10:
                                if (!(message.geoip && message.geoip.length))
                                    message.geoip = [];
                                message.geoip.push($root.v2ray.core.app.router.GeoIP.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                message.portRange = $root.v2ray.core.common.net.PortRange.decode(reader, reader.uint32());
                                break;
                            case 14:
                                message.portList = $root.v2ray.core.common.net.PortList.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.networkList = $root.v2ray.core.common.net.NetworkList.decode(reader, reader.uint32());
                                break;
                            case 13:
                                if (!(message.networks && message.networks.length))
                                    message.networks = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.networks.push(reader.int32());
                                } else
                                    message.networks.push(reader.int32());
                                break;
                            case 6:
                                if (!(message.sourceCidr && message.sourceCidr.length))
                                    message.sourceCidr = [];
                                message.sourceCidr.push($root.v2ray.core.app.router.CIDR.decode(reader, reader.uint32()));
                                break;
                            case 11:
                                if (!(message.sourceGeoip && message.sourceGeoip.length))
                                    message.sourceGeoip = [];
                                message.sourceGeoip.push($root.v2ray.core.app.router.GeoIP.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                if (!(message.userEmail && message.userEmail.length))
                                    message.userEmail = [];
                                message.userEmail.push(reader.string());
                                break;
                            case 8:
                                if (!(message.inboundTag && message.inboundTag.length))
                                    message.inboundTag = [];
                                message.inboundTag.push(reader.string());
                                break;
                            case 9:
                                if (!(message.protocol && message.protocol.length))
                                    message.protocol = [];
                                message.protocol.push(reader.string());
                                break;
                            case 15:
                                message.attributes = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a RoutingRule message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.RoutingRule} RoutingRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RoutingRule.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a RoutingRule message.
                     * @function verify
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RoutingRule.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.tag != null && message.hasOwnProperty("tag")) {
                            properties.targetTag = 1;
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        }
                        if (message.balancingTag != null && message.hasOwnProperty("balancingTag")) {
                            if (properties.targetTag === 1)
                                return "targetTag: multiple values";
                            properties.targetTag = 1;
                            if (!$util.isString(message.balancingTag))
                                return "balancingTag: string expected";
                        }
                        if (message.domain != null && message.hasOwnProperty("domain")) {
                            if (!Array.isArray(message.domain))
                                return "domain: array expected";
                            for (var i = 0; i < message.domain.length; ++i) {
                                var error = $root.v2ray.core.app.router.Domain.verify(message.domain[i]);
                                if (error)
                                    return "domain." + error;
                            }
                        }
                        if (message.cidr != null && message.hasOwnProperty("cidr")) {
                            if (!Array.isArray(message.cidr))
                                return "cidr: array expected";
                            for (var i = 0; i < message.cidr.length; ++i) {
                                var error = $root.v2ray.core.app.router.CIDR.verify(message.cidr[i]);
                                if (error)
                                    return "cidr." + error;
                            }
                        }
                        if (message.geoip != null && message.hasOwnProperty("geoip")) {
                            if (!Array.isArray(message.geoip))
                                return "geoip: array expected";
                            for (var i = 0; i < message.geoip.length; ++i) {
                                var error = $root.v2ray.core.app.router.GeoIP.verify(message.geoip[i]);
                                if (error)
                                    return "geoip." + error;
                            }
                        }
                        if (message.portRange != null && message.hasOwnProperty("portRange")) {
                            var error = $root.v2ray.core.common.net.PortRange.verify(message.portRange);
                            if (error)
                                return "portRange." + error;
                        }
                        if (message.portList != null && message.hasOwnProperty("portList")) {
                            var error = $root.v2ray.core.common.net.PortList.verify(message.portList);
                            if (error)
                                return "portList." + error;
                        }
                        if (message.networkList != null && message.hasOwnProperty("networkList")) {
                            var error = $root.v2ray.core.common.net.NetworkList.verify(message.networkList);
                            if (error)
                                return "networkList." + error;
                        }
                        if (message.networks != null && message.hasOwnProperty("networks")) {
                            if (!Array.isArray(message.networks))
                                return "networks: array expected";
                            for (var i = 0; i < message.networks.length; ++i)
                                switch (message.networks[i]) {
                                default:
                                    return "networks: enum value[] expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                        }
                        if (message.sourceCidr != null && message.hasOwnProperty("sourceCidr")) {
                            if (!Array.isArray(message.sourceCidr))
                                return "sourceCidr: array expected";
                            for (var i = 0; i < message.sourceCidr.length; ++i) {
                                var error = $root.v2ray.core.app.router.CIDR.verify(message.sourceCidr[i]);
                                if (error)
                                    return "sourceCidr." + error;
                            }
                        }
                        if (message.sourceGeoip != null && message.hasOwnProperty("sourceGeoip")) {
                            if (!Array.isArray(message.sourceGeoip))
                                return "sourceGeoip: array expected";
                            for (var i = 0; i < message.sourceGeoip.length; ++i) {
                                var error = $root.v2ray.core.app.router.GeoIP.verify(message.sourceGeoip[i]);
                                if (error)
                                    return "sourceGeoip." + error;
                            }
                        }
                        if (message.userEmail != null && message.hasOwnProperty("userEmail")) {
                            if (!Array.isArray(message.userEmail))
                                return "userEmail: array expected";
                            for (var i = 0; i < message.userEmail.length; ++i)
                                if (!$util.isString(message.userEmail[i]))
                                    return "userEmail: string[] expected";
                        }
                        if (message.inboundTag != null && message.hasOwnProperty("inboundTag")) {
                            if (!Array.isArray(message.inboundTag))
                                return "inboundTag: array expected";
                            for (var i = 0; i < message.inboundTag.length; ++i)
                                if (!$util.isString(message.inboundTag[i]))
                                    return "inboundTag: string[] expected";
                        }
                        if (message.protocol != null && message.hasOwnProperty("protocol")) {
                            if (!Array.isArray(message.protocol))
                                return "protocol: array expected";
                            for (var i = 0; i < message.protocol.length; ++i)
                                if (!$util.isString(message.protocol[i]))
                                    return "protocol: string[] expected";
                        }
                        if (message.attributes != null && message.hasOwnProperty("attributes"))
                            if (!$util.isString(message.attributes))
                                return "attributes: string expected";
                        return null;
                    };

                    /**
                     * Creates a RoutingRule message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.RoutingRule} RoutingRule
                     */
                    RoutingRule.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.RoutingRule)
                            return object;
                        var message = new $root.v2ray.core.app.router.RoutingRule();
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        if (object.balancingTag != null)
                            message.balancingTag = String(object.balancingTag);
                        if (object.domain) {
                            if (!Array.isArray(object.domain))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.domain: array expected");
                            message.domain = [];
                            for (var i = 0; i < object.domain.length; ++i) {
                                if (typeof object.domain[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.RoutingRule.domain: object expected");
                                message.domain[i] = $root.v2ray.core.app.router.Domain.fromObject(object.domain[i]);
                            }
                        }
                        if (object.cidr) {
                            if (!Array.isArray(object.cidr))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.cidr: array expected");
                            message.cidr = [];
                            for (var i = 0; i < object.cidr.length; ++i) {
                                if (typeof object.cidr[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.RoutingRule.cidr: object expected");
                                message.cidr[i] = $root.v2ray.core.app.router.CIDR.fromObject(object.cidr[i]);
                            }
                        }
                        if (object.geoip) {
                            if (!Array.isArray(object.geoip))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.geoip: array expected");
                            message.geoip = [];
                            for (var i = 0; i < object.geoip.length; ++i) {
                                if (typeof object.geoip[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.RoutingRule.geoip: object expected");
                                message.geoip[i] = $root.v2ray.core.app.router.GeoIP.fromObject(object.geoip[i]);
                            }
                        }
                        if (object.portRange != null) {
                            if (typeof object.portRange !== "object")
                                throw TypeError(".v2ray.core.app.router.RoutingRule.portRange: object expected");
                            message.portRange = $root.v2ray.core.common.net.PortRange.fromObject(object.portRange);
                        }
                        if (object.portList != null) {
                            if (typeof object.portList !== "object")
                                throw TypeError(".v2ray.core.app.router.RoutingRule.portList: object expected");
                            message.portList = $root.v2ray.core.common.net.PortList.fromObject(object.portList);
                        }
                        if (object.networkList != null) {
                            if (typeof object.networkList !== "object")
                                throw TypeError(".v2ray.core.app.router.RoutingRule.networkList: object expected");
                            message.networkList = $root.v2ray.core.common.net.NetworkList.fromObject(object.networkList);
                        }
                        if (object.networks) {
                            if (!Array.isArray(object.networks))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.networks: array expected");
                            message.networks = [];
                            for (var i = 0; i < object.networks.length; ++i)
                                switch (object.networks[i]) {
                                default:
                                case "Unknown":
                                case 0:
                                    message.networks[i] = 0;
                                    break;
                                case "RawTCP":
                                case 1:
                                    message.networks[i] = 1;
                                    break;
                                case "TCP":
                                case 2:
                                    message.networks[i] = 2;
                                    break;
                                case "UDP":
                                case 3:
                                    message.networks[i] = 3;
                                    break;
                                }
                        }
                        if (object.sourceCidr) {
                            if (!Array.isArray(object.sourceCidr))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.sourceCidr: array expected");
                            message.sourceCidr = [];
                            for (var i = 0; i < object.sourceCidr.length; ++i) {
                                if (typeof object.sourceCidr[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.RoutingRule.sourceCidr: object expected");
                                message.sourceCidr[i] = $root.v2ray.core.app.router.CIDR.fromObject(object.sourceCidr[i]);
                            }
                        }
                        if (object.sourceGeoip) {
                            if (!Array.isArray(object.sourceGeoip))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.sourceGeoip: array expected");
                            message.sourceGeoip = [];
                            for (var i = 0; i < object.sourceGeoip.length; ++i) {
                                if (typeof object.sourceGeoip[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.RoutingRule.sourceGeoip: object expected");
                                message.sourceGeoip[i] = $root.v2ray.core.app.router.GeoIP.fromObject(object.sourceGeoip[i]);
                            }
                        }
                        if (object.userEmail) {
                            if (!Array.isArray(object.userEmail))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.userEmail: array expected");
                            message.userEmail = [];
                            for (var i = 0; i < object.userEmail.length; ++i)
                                message.userEmail[i] = String(object.userEmail[i]);
                        }
                        if (object.inboundTag) {
                            if (!Array.isArray(object.inboundTag))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.inboundTag: array expected");
                            message.inboundTag = [];
                            for (var i = 0; i < object.inboundTag.length; ++i)
                                message.inboundTag[i] = String(object.inboundTag[i]);
                        }
                        if (object.protocol) {
                            if (!Array.isArray(object.protocol))
                                throw TypeError(".v2ray.core.app.router.RoutingRule.protocol: array expected");
                            message.protocol = [];
                            for (var i = 0; i < object.protocol.length; ++i)
                                message.protocol[i] = String(object.protocol[i]);
                        }
                        if (object.attributes != null)
                            message.attributes = String(object.attributes);
                        return message;
                    };

                    /**
                     * Creates a plain object from a RoutingRule message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @static
                     * @param {v2ray.core.app.router.RoutingRule} message RoutingRule
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RoutingRule.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.domain = [];
                            object.cidr = [];
                            object.sourceCidr = [];
                            object.userEmail = [];
                            object.inboundTag = [];
                            object.protocol = [];
                            object.geoip = [];
                            object.sourceGeoip = [];
                            object.networks = [];
                        }
                        if (options.defaults) {
                            object.portRange = null;
                            object.networkList = null;
                            object.portList = null;
                            object.attributes = "";
                        }
                        if (message.tag != null && message.hasOwnProperty("tag")) {
                            object.tag = message.tag;
                            if (options.oneofs)
                                object.targetTag = "tag";
                        }
                        if (message.domain && message.domain.length) {
                            object.domain = [];
                            for (var j = 0; j < message.domain.length; ++j)
                                object.domain[j] = $root.v2ray.core.app.router.Domain.toObject(message.domain[j], options);
                        }
                        if (message.cidr && message.cidr.length) {
                            object.cidr = [];
                            for (var j = 0; j < message.cidr.length; ++j)
                                object.cidr[j] = $root.v2ray.core.app.router.CIDR.toObject(message.cidr[j], options);
                        }
                        if (message.portRange != null && message.hasOwnProperty("portRange"))
                            object.portRange = $root.v2ray.core.common.net.PortRange.toObject(message.portRange, options);
                        if (message.networkList != null && message.hasOwnProperty("networkList"))
                            object.networkList = $root.v2ray.core.common.net.NetworkList.toObject(message.networkList, options);
                        if (message.sourceCidr && message.sourceCidr.length) {
                            object.sourceCidr = [];
                            for (var j = 0; j < message.sourceCidr.length; ++j)
                                object.sourceCidr[j] = $root.v2ray.core.app.router.CIDR.toObject(message.sourceCidr[j], options);
                        }
                        if (message.userEmail && message.userEmail.length) {
                            object.userEmail = [];
                            for (var j = 0; j < message.userEmail.length; ++j)
                                object.userEmail[j] = message.userEmail[j];
                        }
                        if (message.inboundTag && message.inboundTag.length) {
                            object.inboundTag = [];
                            for (var j = 0; j < message.inboundTag.length; ++j)
                                object.inboundTag[j] = message.inboundTag[j];
                        }
                        if (message.protocol && message.protocol.length) {
                            object.protocol = [];
                            for (var j = 0; j < message.protocol.length; ++j)
                                object.protocol[j] = message.protocol[j];
                        }
                        if (message.geoip && message.geoip.length) {
                            object.geoip = [];
                            for (var j = 0; j < message.geoip.length; ++j)
                                object.geoip[j] = $root.v2ray.core.app.router.GeoIP.toObject(message.geoip[j], options);
                        }
                        if (message.sourceGeoip && message.sourceGeoip.length) {
                            object.sourceGeoip = [];
                            for (var j = 0; j < message.sourceGeoip.length; ++j)
                                object.sourceGeoip[j] = $root.v2ray.core.app.router.GeoIP.toObject(message.sourceGeoip[j], options);
                        }
                        if (message.balancingTag != null && message.hasOwnProperty("balancingTag")) {
                            object.balancingTag = message.balancingTag;
                            if (options.oneofs)
                                object.targetTag = "balancingTag";
                        }
                        if (message.networks && message.networks.length) {
                            object.networks = [];
                            for (var j = 0; j < message.networks.length; ++j)
                                object.networks[j] = options.enums === String ? $root.v2ray.core.common.net.Network[message.networks[j]] : message.networks[j];
                        }
                        if (message.portList != null && message.hasOwnProperty("portList"))
                            object.portList = $root.v2ray.core.common.net.PortList.toObject(message.portList, options);
                        if (message.attributes != null && message.hasOwnProperty("attributes"))
                            object.attributes = message.attributes;
                        return object;
                    };

                    /**
                     * Converts this RoutingRule to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.RoutingRule
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RoutingRule.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return RoutingRule;
                })();

                router.BalancingRule = (function() {

                    /**
                     * Properties of a BalancingRule.
                     * @memberof v2ray.core.app.router
                     * @interface IBalancingRule
                     * @property {string|null} [tag] BalancingRule tag
                     * @property {Array.<string>|null} [outboundSelector] BalancingRule outboundSelector
                     */

                    /**
                     * Constructs a new BalancingRule.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a BalancingRule.
                     * @implements IBalancingRule
                     * @constructor
                     * @param {v2ray.core.app.router.IBalancingRule=} [properties] Properties to set
                     */
                    function BalancingRule(properties) {
                        this.outboundSelector = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * BalancingRule tag.
                     * @member {string} tag
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @instance
                     */
                    BalancingRule.prototype.tag = "";

                    /**
                     * BalancingRule outboundSelector.
                     * @member {Array.<string>} outboundSelector
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @instance
                     */
                    BalancingRule.prototype.outboundSelector = $util.emptyArray;

                    /**
                     * Creates a new BalancingRule instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {v2ray.core.app.router.IBalancingRule=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.BalancingRule} BalancingRule instance
                     */
                    BalancingRule.create = function create(properties) {
                        return new BalancingRule(properties);
                    };

                    /**
                     * Encodes the specified BalancingRule message. Does not implicitly {@link v2ray.core.app.router.BalancingRule.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {v2ray.core.app.router.IBalancingRule} message BalancingRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BalancingRule.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                        if (message.outboundSelector != null && message.outboundSelector.length)
                            for (var i = 0; i < message.outboundSelector.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.outboundSelector[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified BalancingRule message, length delimited. Does not implicitly {@link v2ray.core.app.router.BalancingRule.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {v2ray.core.app.router.IBalancingRule} message BalancingRule message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BalancingRule.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a BalancingRule message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.BalancingRule} BalancingRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BalancingRule.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.BalancingRule();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tag = reader.string();
                                break;
                            case 2:
                                if (!(message.outboundSelector && message.outboundSelector.length))
                                    message.outboundSelector = [];
                                message.outboundSelector.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a BalancingRule message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.BalancingRule} BalancingRule
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BalancingRule.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a BalancingRule message.
                     * @function verify
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BalancingRule.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        if (message.outboundSelector != null && message.hasOwnProperty("outboundSelector")) {
                            if (!Array.isArray(message.outboundSelector))
                                return "outboundSelector: array expected";
                            for (var i = 0; i < message.outboundSelector.length; ++i)
                                if (!$util.isString(message.outboundSelector[i]))
                                    return "outboundSelector: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a BalancingRule message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.BalancingRule} BalancingRule
                     */
                    BalancingRule.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.BalancingRule)
                            return object;
                        var message = new $root.v2ray.core.app.router.BalancingRule();
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        if (object.outboundSelector) {
                            if (!Array.isArray(object.outboundSelector))
                                throw TypeError(".v2ray.core.app.router.BalancingRule.outboundSelector: array expected");
                            message.outboundSelector = [];
                            for (var i = 0; i < object.outboundSelector.length; ++i)
                                message.outboundSelector[i] = String(object.outboundSelector[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a BalancingRule message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @static
                     * @param {v2ray.core.app.router.BalancingRule} message BalancingRule
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BalancingRule.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.outboundSelector = [];
                        if (options.defaults)
                            object.tag = "";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            object.tag = message.tag;
                        if (message.outboundSelector && message.outboundSelector.length) {
                            object.outboundSelector = [];
                            for (var j = 0; j < message.outboundSelector.length; ++j)
                                object.outboundSelector[j] = message.outboundSelector[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this BalancingRule to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.BalancingRule
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BalancingRule.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return BalancingRule;
                })();

                router.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.router
                     * @interface IConfig
                     * @property {v2ray.core.app.router.Config.DomainStrategy|null} [domainStrategy] Config domainStrategy
                     * @property {Array.<v2ray.core.app.router.IRoutingRule>|null} [rule] Config rule
                     * @property {Array.<v2ray.core.app.router.IBalancingRule>|null} [balancingRule] Config balancingRule
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.router
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.router.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        this.rule = [];
                        this.balancingRule = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config domainStrategy.
                     * @member {v2ray.core.app.router.Config.DomainStrategy} domainStrategy
                     * @memberof v2ray.core.app.router.Config
                     * @instance
                     */
                    Config.prototype.domainStrategy = 0;

                    /**
                     * Config rule.
                     * @member {Array.<v2ray.core.app.router.IRoutingRule>} rule
                     * @memberof v2ray.core.app.router.Config
                     * @instance
                     */
                    Config.prototype.rule = $util.emptyArray;

                    /**
                     * Config balancingRule.
                     * @member {Array.<v2ray.core.app.router.IBalancingRule>} balancingRule
                     * @memberof v2ray.core.app.router.Config
                     * @instance
                     */
                    Config.prototype.balancingRule = $util.emptyArray;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {v2ray.core.app.router.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.router.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.router.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {v2ray.core.app.router.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.domainStrategy != null && message.hasOwnProperty("domainStrategy"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.domainStrategy);
                        if (message.rule != null && message.rule.length)
                            for (var i = 0; i < message.rule.length; ++i)
                                $root.v2ray.core.app.router.RoutingRule.encode(message.rule[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.balancingRule != null && message.balancingRule.length)
                            for (var i = 0; i < message.balancingRule.length; ++i)
                                $root.v2ray.core.app.router.BalancingRule.encode(message.balancingRule[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.router.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {v2ray.core.app.router.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.router.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.router.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.domainStrategy = reader.int32();
                                break;
                            case 2:
                                if (!(message.rule && message.rule.length))
                                    message.rule = [];
                                message.rule.push($root.v2ray.core.app.router.RoutingRule.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.balancingRule && message.balancingRule.length))
                                    message.balancingRule = [];
                                message.balancingRule.push($root.v2ray.core.app.router.BalancingRule.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.router.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.domainStrategy != null && message.hasOwnProperty("domainStrategy"))
                            switch (message.domainStrategy) {
                            default:
                                return "domainStrategy: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.rule != null && message.hasOwnProperty("rule")) {
                            if (!Array.isArray(message.rule))
                                return "rule: array expected";
                            for (var i = 0; i < message.rule.length; ++i) {
                                var error = $root.v2ray.core.app.router.RoutingRule.verify(message.rule[i]);
                                if (error)
                                    return "rule." + error;
                            }
                        }
                        if (message.balancingRule != null && message.hasOwnProperty("balancingRule")) {
                            if (!Array.isArray(message.balancingRule))
                                return "balancingRule: array expected";
                            for (var i = 0; i < message.balancingRule.length; ++i) {
                                var error = $root.v2ray.core.app.router.BalancingRule.verify(message.balancingRule[i]);
                                if (error)
                                    return "balancingRule." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.router.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.router.Config)
                            return object;
                        var message = new $root.v2ray.core.app.router.Config();
                        switch (object.domainStrategy) {
                        case "AsIs":
                        case 0:
                            message.domainStrategy = 0;
                            break;
                        case "UseIp":
                        case 1:
                            message.domainStrategy = 1;
                            break;
                        case "IpIfNonMatch":
                        case 2:
                            message.domainStrategy = 2;
                            break;
                        case "IpOnDemand":
                        case 3:
                            message.domainStrategy = 3;
                            break;
                        }
                        if (object.rule) {
                            if (!Array.isArray(object.rule))
                                throw TypeError(".v2ray.core.app.router.Config.rule: array expected");
                            message.rule = [];
                            for (var i = 0; i < object.rule.length; ++i) {
                                if (typeof object.rule[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.Config.rule: object expected");
                                message.rule[i] = $root.v2ray.core.app.router.RoutingRule.fromObject(object.rule[i]);
                            }
                        }
                        if (object.balancingRule) {
                            if (!Array.isArray(object.balancingRule))
                                throw TypeError(".v2ray.core.app.router.Config.balancingRule: array expected");
                            message.balancingRule = [];
                            for (var i = 0; i < object.balancingRule.length; ++i) {
                                if (typeof object.balancingRule[i] !== "object")
                                    throw TypeError(".v2ray.core.app.router.Config.balancingRule: object expected");
                                message.balancingRule[i] = $root.v2ray.core.app.router.BalancingRule.fromObject(object.balancingRule[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.router.Config
                     * @static
                     * @param {v2ray.core.app.router.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.rule = [];
                            object.balancingRule = [];
                        }
                        if (options.defaults)
                            object.domainStrategy = options.enums === String ? "AsIs" : 0;
                        if (message.domainStrategy != null && message.hasOwnProperty("domainStrategy"))
                            object.domainStrategy = options.enums === String ? $root.v2ray.core.app.router.Config.DomainStrategy[message.domainStrategy] : message.domainStrategy;
                        if (message.rule && message.rule.length) {
                            object.rule = [];
                            for (var j = 0; j < message.rule.length; ++j)
                                object.rule[j] = $root.v2ray.core.app.router.RoutingRule.toObject(message.rule[j], options);
                        }
                        if (message.balancingRule && message.balancingRule.length) {
                            object.balancingRule = [];
                            for (var j = 0; j < message.balancingRule.length; ++j)
                                object.balancingRule[j] = $root.v2ray.core.app.router.BalancingRule.toObject(message.balancingRule[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.router.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * DomainStrategy enum.
                     * @name v2ray.core.app.router.Config.DomainStrategy
                     * @enum {string}
                     * @property {number} AsIs=0 AsIs value
                     * @property {number} UseIp=1 UseIp value
                     * @property {number} IpIfNonMatch=2 IpIfNonMatch value
                     * @property {number} IpOnDemand=3 IpOnDemand value
                     */
                    Config.DomainStrategy = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "AsIs"] = 0;
                        values[valuesById[1] = "UseIp"] = 1;
                        values[valuesById[2] = "IpIfNonMatch"] = 2;
                        values[valuesById[3] = "IpOnDemand"] = 3;
                        return values;
                    })();

                    return Config;
                })();

                return router;
            })();

            app.stats = (function() {

                /**
                 * Namespace stats.
                 * @memberof v2ray.core.app
                 * @namespace
                 */
                var stats = {};

                stats.command = (function() {

                    /**
                     * Namespace command.
                     * @memberof v2ray.core.app.stats
                     * @namespace
                     */
                    var command = {};

                    command.GetStatsRequest = (function() {

                        /**
                         * Properties of a GetStatsRequest.
                         * @memberof v2ray.core.app.stats.command
                         * @interface IGetStatsRequest
                         * @property {string|null} [name] GetStatsRequest name
                         * @property {boolean|null} [reset] GetStatsRequest reset
                         */

                        /**
                         * Constructs a new GetStatsRequest.
                         * @memberof v2ray.core.app.stats.command
                         * @classdesc Represents a GetStatsRequest.
                         * @implements IGetStatsRequest
                         * @constructor
                         * @param {v2ray.core.app.stats.command.IGetStatsRequest=} [properties] Properties to set
                         */
                        function GetStatsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * GetStatsRequest name.
                         * @member {string} name
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @instance
                         */
                        GetStatsRequest.prototype.name = "";

                        /**
                         * GetStatsRequest reset.
                         * @member {boolean} reset
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @instance
                         */
                        GetStatsRequest.prototype.reset = false;

                        /**
                         * Creates a new GetStatsRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.IGetStatsRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.stats.command.GetStatsRequest} GetStatsRequest instance
                         */
                        GetStatsRequest.create = function create(properties) {
                            return new GetStatsRequest(properties);
                        };

                        /**
                         * Encodes the specified GetStatsRequest message. Does not implicitly {@link v2ray.core.app.stats.command.GetStatsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.IGetStatsRequest} message GetStatsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetStatsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.reset != null && message.hasOwnProperty("reset"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.reset);
                            return writer;
                        };

                        /**
                         * Encodes the specified GetStatsRequest message, length delimited. Does not implicitly {@link v2ray.core.app.stats.command.GetStatsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.IGetStatsRequest} message GetStatsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetStatsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a GetStatsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.stats.command.GetStatsRequest} GetStatsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetStatsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.stats.command.GetStatsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.reset = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a GetStatsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.stats.command.GetStatsRequest} GetStatsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetStatsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a GetStatsRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetStatsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.reset != null && message.hasOwnProperty("reset"))
                                if (typeof message.reset !== "boolean")
                                    return "reset: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a GetStatsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.stats.command.GetStatsRequest} GetStatsRequest
                         */
                        GetStatsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.stats.command.GetStatsRequest)
                                return object;
                            var message = new $root.v2ray.core.app.stats.command.GetStatsRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.reset != null)
                                message.reset = Boolean(object.reset);
                            return message;
                        };

                        /**
                         * Creates a plain object from a GetStatsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.GetStatsRequest} message GetStatsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetStatsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.reset = false;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.reset != null && message.hasOwnProperty("reset"))
                                object.reset = message.reset;
                            return object;
                        };

                        /**
                         * Converts this GetStatsRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.stats.command.GetStatsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetStatsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return GetStatsRequest;
                    })();

                    command.Stat = (function() {

                        /**
                         * Properties of a Stat.
                         * @memberof v2ray.core.app.stats.command
                         * @interface IStat
                         * @property {string|null} [name] Stat name
                         * @property {number|Long|null} [value] Stat value
                         */

                        /**
                         * Constructs a new Stat.
                         * @memberof v2ray.core.app.stats.command
                         * @classdesc Represents a Stat.
                         * @implements IStat
                         * @constructor
                         * @param {v2ray.core.app.stats.command.IStat=} [properties] Properties to set
                         */
                        function Stat(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Stat name.
                         * @member {string} name
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @instance
                         */
                        Stat.prototype.name = "";

                        /**
                         * Stat value.
                         * @member {number|Long} value
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @instance
                         */
                        Stat.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * Creates a new Stat instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {v2ray.core.app.stats.command.IStat=} [properties] Properties to set
                         * @returns {v2ray.core.app.stats.command.Stat} Stat instance
                         */
                        Stat.create = function create(properties) {
                            return new Stat(properties);
                        };

                        /**
                         * Encodes the specified Stat message. Does not implicitly {@link v2ray.core.app.stats.command.Stat.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {v2ray.core.app.stats.command.IStat} message Stat message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Stat.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && message.hasOwnProperty("name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified Stat message, length delimited. Does not implicitly {@link v2ray.core.app.stats.command.Stat.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {v2ray.core.app.stats.command.IStat} message Stat message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Stat.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Stat message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.stats.command.Stat} Stat
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Stat.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.stats.command.Stat();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.name = reader.string();
                                    break;
                                case 2:
                                    message.value = reader.int64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Stat message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.stats.command.Stat} Stat
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Stat.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Stat message.
                         * @function verify
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Stat.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                                    return "value: integer|Long expected";
                            return null;
                        };

                        /**
                         * Creates a Stat message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.stats.command.Stat} Stat
                         */
                        Stat.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.stats.command.Stat)
                                return object;
                            var message = new $root.v2ray.core.app.stats.command.Stat();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.value != null)
                                if ($util.Long)
                                    (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                                else if (typeof object.value === "string")
                                    message.value = parseInt(object.value, 10);
                                else if (typeof object.value === "number")
                                    message.value = object.value;
                                else if (typeof object.value === "object")
                                    message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                            return message;
                        };

                        /**
                         * Creates a plain object from a Stat message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @static
                         * @param {v2ray.core.app.stats.command.Stat} message Stat
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Stat.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.value = options.longs === String ? "0" : 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value === "number")
                                    object.value = options.longs === String ? String(message.value) : message.value;
                                else
                                    object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                            return object;
                        };

                        /**
                         * Converts this Stat to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.stats.command.Stat
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Stat.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Stat;
                    })();

                    command.GetStatsResponse = (function() {

                        /**
                         * Properties of a GetStatsResponse.
                         * @memberof v2ray.core.app.stats.command
                         * @interface IGetStatsResponse
                         * @property {v2ray.core.app.stats.command.IStat|null} [stat] GetStatsResponse stat
                         */

                        /**
                         * Constructs a new GetStatsResponse.
                         * @memberof v2ray.core.app.stats.command
                         * @classdesc Represents a GetStatsResponse.
                         * @implements IGetStatsResponse
                         * @constructor
                         * @param {v2ray.core.app.stats.command.IGetStatsResponse=} [properties] Properties to set
                         */
                        function GetStatsResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * GetStatsResponse stat.
                         * @member {v2ray.core.app.stats.command.IStat|null|undefined} stat
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @instance
                         */
                        GetStatsResponse.prototype.stat = null;

                        /**
                         * Creates a new GetStatsResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.IGetStatsResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.stats.command.GetStatsResponse} GetStatsResponse instance
                         */
                        GetStatsResponse.create = function create(properties) {
                            return new GetStatsResponse(properties);
                        };

                        /**
                         * Encodes the specified GetStatsResponse message. Does not implicitly {@link v2ray.core.app.stats.command.GetStatsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.IGetStatsResponse} message GetStatsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetStatsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.stat != null && message.hasOwnProperty("stat"))
                                $root.v2ray.core.app.stats.command.Stat.encode(message.stat, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified GetStatsResponse message, length delimited. Does not implicitly {@link v2ray.core.app.stats.command.GetStatsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.IGetStatsResponse} message GetStatsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a GetStatsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.stats.command.GetStatsResponse} GetStatsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetStatsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.stats.command.GetStatsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.stat = $root.v2ray.core.app.stats.command.Stat.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a GetStatsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.stats.command.GetStatsResponse} GetStatsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetStatsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a GetStatsResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetStatsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.stat != null && message.hasOwnProperty("stat")) {
                                var error = $root.v2ray.core.app.stats.command.Stat.verify(message.stat);
                                if (error)
                                    return "stat." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a GetStatsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.stats.command.GetStatsResponse} GetStatsResponse
                         */
                        GetStatsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.stats.command.GetStatsResponse)
                                return object;
                            var message = new $root.v2ray.core.app.stats.command.GetStatsResponse();
                            if (object.stat != null) {
                                if (typeof object.stat !== "object")
                                    throw TypeError(".v2ray.core.app.stats.command.GetStatsResponse.stat: object expected");
                                message.stat = $root.v2ray.core.app.stats.command.Stat.fromObject(object.stat);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a GetStatsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.GetStatsResponse} message GetStatsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetStatsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.stat = null;
                            if (message.stat != null && message.hasOwnProperty("stat"))
                                object.stat = $root.v2ray.core.app.stats.command.Stat.toObject(message.stat, options);
                            return object;
                        };

                        /**
                         * Converts this GetStatsResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.stats.command.GetStatsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetStatsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return GetStatsResponse;
                    })();

                    command.QueryStatsRequest = (function() {

                        /**
                         * Properties of a QueryStatsRequest.
                         * @memberof v2ray.core.app.stats.command
                         * @interface IQueryStatsRequest
                         * @property {string|null} [pattern] QueryStatsRequest pattern
                         * @property {boolean|null} [reset] QueryStatsRequest reset
                         */

                        /**
                         * Constructs a new QueryStatsRequest.
                         * @memberof v2ray.core.app.stats.command
                         * @classdesc Represents a QueryStatsRequest.
                         * @implements IQueryStatsRequest
                         * @constructor
                         * @param {v2ray.core.app.stats.command.IQueryStatsRequest=} [properties] Properties to set
                         */
                        function QueryStatsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * QueryStatsRequest pattern.
                         * @member {string} pattern
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @instance
                         */
                        QueryStatsRequest.prototype.pattern = "";

                        /**
                         * QueryStatsRequest reset.
                         * @member {boolean} reset
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @instance
                         */
                        QueryStatsRequest.prototype.reset = false;

                        /**
                         * Creates a new QueryStatsRequest instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.IQueryStatsRequest=} [properties] Properties to set
                         * @returns {v2ray.core.app.stats.command.QueryStatsRequest} QueryStatsRequest instance
                         */
                        QueryStatsRequest.create = function create(properties) {
                            return new QueryStatsRequest(properties);
                        };

                        /**
                         * Encodes the specified QueryStatsRequest message. Does not implicitly {@link v2ray.core.app.stats.command.QueryStatsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.IQueryStatsRequest} message QueryStatsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryStatsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pattern != null && message.hasOwnProperty("pattern"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pattern);
                            if (message.reset != null && message.hasOwnProperty("reset"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.reset);
                            return writer;
                        };

                        /**
                         * Encodes the specified QueryStatsRequest message, length delimited. Does not implicitly {@link v2ray.core.app.stats.command.QueryStatsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.IQueryStatsRequest} message QueryStatsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryStatsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a QueryStatsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.stats.command.QueryStatsRequest} QueryStatsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryStatsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.stats.command.QueryStatsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.pattern = reader.string();
                                    break;
                                case 2:
                                    message.reset = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a QueryStatsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.stats.command.QueryStatsRequest} QueryStatsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryStatsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a QueryStatsRequest message.
                         * @function verify
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryStatsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pattern != null && message.hasOwnProperty("pattern"))
                                if (!$util.isString(message.pattern))
                                    return "pattern: string expected";
                            if (message.reset != null && message.hasOwnProperty("reset"))
                                if (typeof message.reset !== "boolean")
                                    return "reset: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a QueryStatsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.stats.command.QueryStatsRequest} QueryStatsRequest
                         */
                        QueryStatsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.stats.command.QueryStatsRequest)
                                return object;
                            var message = new $root.v2ray.core.app.stats.command.QueryStatsRequest();
                            if (object.pattern != null)
                                message.pattern = String(object.pattern);
                            if (object.reset != null)
                                message.reset = Boolean(object.reset);
                            return message;
                        };

                        /**
                         * Creates a plain object from a QueryStatsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @static
                         * @param {v2ray.core.app.stats.command.QueryStatsRequest} message QueryStatsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryStatsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.pattern = "";
                                object.reset = false;
                            }
                            if (message.pattern != null && message.hasOwnProperty("pattern"))
                                object.pattern = message.pattern;
                            if (message.reset != null && message.hasOwnProperty("reset"))
                                object.reset = message.reset;
                            return object;
                        };

                        /**
                         * Converts this QueryStatsRequest to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.stats.command.QueryStatsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryStatsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return QueryStatsRequest;
                    })();

                    command.QueryStatsResponse = (function() {

                        /**
                         * Properties of a QueryStatsResponse.
                         * @memberof v2ray.core.app.stats.command
                         * @interface IQueryStatsResponse
                         * @property {Array.<v2ray.core.app.stats.command.IStat>|null} [stat] QueryStatsResponse stat
                         */

                        /**
                         * Constructs a new QueryStatsResponse.
                         * @memberof v2ray.core.app.stats.command
                         * @classdesc Represents a QueryStatsResponse.
                         * @implements IQueryStatsResponse
                         * @constructor
                         * @param {v2ray.core.app.stats.command.IQueryStatsResponse=} [properties] Properties to set
                         */
                        function QueryStatsResponse(properties) {
                            this.stat = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * QueryStatsResponse stat.
                         * @member {Array.<v2ray.core.app.stats.command.IStat>} stat
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @instance
                         */
                        QueryStatsResponse.prototype.stat = $util.emptyArray;

                        /**
                         * Creates a new QueryStatsResponse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.IQueryStatsResponse=} [properties] Properties to set
                         * @returns {v2ray.core.app.stats.command.QueryStatsResponse} QueryStatsResponse instance
                         */
                        QueryStatsResponse.create = function create(properties) {
                            return new QueryStatsResponse(properties);
                        };

                        /**
                         * Encodes the specified QueryStatsResponse message. Does not implicitly {@link v2ray.core.app.stats.command.QueryStatsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.IQueryStatsResponse} message QueryStatsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryStatsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.stat != null && message.stat.length)
                                for (var i = 0; i < message.stat.length; ++i)
                                    $root.v2ray.core.app.stats.command.Stat.encode(message.stat[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified QueryStatsResponse message, length delimited. Does not implicitly {@link v2ray.core.app.stats.command.QueryStatsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.IQueryStatsResponse} message QueryStatsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a QueryStatsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.stats.command.QueryStatsResponse} QueryStatsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryStatsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.stats.command.QueryStatsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.stat && message.stat.length))
                                        message.stat = [];
                                    message.stat.push($root.v2ray.core.app.stats.command.Stat.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a QueryStatsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.stats.command.QueryStatsResponse} QueryStatsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryStatsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a QueryStatsResponse message.
                         * @function verify
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryStatsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.stat != null && message.hasOwnProperty("stat")) {
                                if (!Array.isArray(message.stat))
                                    return "stat: array expected";
                                for (var i = 0; i < message.stat.length; ++i) {
                                    var error = $root.v2ray.core.app.stats.command.Stat.verify(message.stat[i]);
                                    if (error)
                                        return "stat." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a QueryStatsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.stats.command.QueryStatsResponse} QueryStatsResponse
                         */
                        QueryStatsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.stats.command.QueryStatsResponse)
                                return object;
                            var message = new $root.v2ray.core.app.stats.command.QueryStatsResponse();
                            if (object.stat) {
                                if (!Array.isArray(object.stat))
                                    throw TypeError(".v2ray.core.app.stats.command.QueryStatsResponse.stat: array expected");
                                message.stat = [];
                                for (var i = 0; i < object.stat.length; ++i) {
                                    if (typeof object.stat[i] !== "object")
                                        throw TypeError(".v2ray.core.app.stats.command.QueryStatsResponse.stat: object expected");
                                    message.stat[i] = $root.v2ray.core.app.stats.command.Stat.fromObject(object.stat[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a QueryStatsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @static
                         * @param {v2ray.core.app.stats.command.QueryStatsResponse} message QueryStatsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryStatsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.stat = [];
                            if (message.stat && message.stat.length) {
                                object.stat = [];
                                for (var j = 0; j < message.stat.length; ++j)
                                    object.stat[j] = $root.v2ray.core.app.stats.command.Stat.toObject(message.stat[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this QueryStatsResponse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.stats.command.QueryStatsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryStatsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return QueryStatsResponse;
                    })();

                    command.StatsService = (function() {

                        /**
                         * Constructs a new StatsService service.
                         * @memberof v2ray.core.app.stats.command
                         * @classdesc Represents a StatsService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function StatsService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }

                        (StatsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = StatsService;

                        /**
                         * Creates new StatsService service using the specified rpc implementation.
                         * @function create
                         * @memberof v2ray.core.app.stats.command.StatsService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {StatsService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        StatsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };

                        /**
                         * Callback as used by {@link v2ray.core.app.stats.command.StatsService#getStats}.
                         * @memberof v2ray.core.app.stats.command.StatsService
                         * @typedef GetStatsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.stats.command.GetStatsResponse} [response] GetStatsResponse
                         */

                        /**
                         * Calls GetStats.
                         * @function getStats
                         * @memberof v2ray.core.app.stats.command.StatsService
                         * @instance
                         * @param {v2ray.core.app.stats.command.IGetStatsRequest} request GetStatsRequest message or plain object
                         * @param {v2ray.core.app.stats.command.StatsService.GetStatsCallback} callback Node-style callback called with the error, if any, and GetStatsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(StatsService.prototype.getStats = function getStats(request, callback) {
                            return this.rpcCall(getStats, $root.v2ray.core.app.stats.command.GetStatsRequest, $root.v2ray.core.app.stats.command.GetStatsResponse, request, callback);
                        }, "name", { value: "GetStats" });

                        /**
                         * Calls GetStats.
                         * @function getStats
                         * @memberof v2ray.core.app.stats.command.StatsService
                         * @instance
                         * @param {v2ray.core.app.stats.command.IGetStatsRequest} request GetStatsRequest message or plain object
                         * @returns {Promise<v2ray.core.app.stats.command.GetStatsResponse>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link v2ray.core.app.stats.command.StatsService#queryStats}.
                         * @memberof v2ray.core.app.stats.command.StatsService
                         * @typedef QueryStatsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {v2ray.core.app.stats.command.QueryStatsResponse} [response] QueryStatsResponse
                         */

                        /**
                         * Calls QueryStats.
                         * @function queryStats
                         * @memberof v2ray.core.app.stats.command.StatsService
                         * @instance
                         * @param {v2ray.core.app.stats.command.IQueryStatsRequest} request QueryStatsRequest message or plain object
                         * @param {v2ray.core.app.stats.command.StatsService.QueryStatsCallback} callback Node-style callback called with the error, if any, and QueryStatsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(StatsService.prototype.queryStats = function queryStats(request, callback) {
                            return this.rpcCall(queryStats, $root.v2ray.core.app.stats.command.QueryStatsRequest, $root.v2ray.core.app.stats.command.QueryStatsResponse, request, callback);
                        }, "name", { value: "QueryStats" });

                        /**
                         * Calls QueryStats.
                         * @function queryStats
                         * @memberof v2ray.core.app.stats.command.StatsService
                         * @instance
                         * @param {v2ray.core.app.stats.command.IQueryStatsRequest} request QueryStatsRequest message or plain object
                         * @returns {Promise<v2ray.core.app.stats.command.QueryStatsResponse>} Promise
                         * @variation 2
                         */

                        return StatsService;
                    })();

                    command.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.app.stats.command
                         * @interface IConfig
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.app.stats.command
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.app.stats.command.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {v2ray.core.app.stats.command.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.app.stats.command.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.stats.command.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {v2ray.core.app.stats.command.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.stats.command.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {v2ray.core.app.stats.command.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.app.stats.command.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.stats.command.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.app.stats.command.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.app.stats.command.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.app.stats.command.Config)
                                return object;
                            return new $root.v2ray.core.app.stats.command.Config();
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.app.stats.command.Config
                         * @static
                         * @param {v2ray.core.app.stats.command.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.app.stats.command.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return command;
                })();

                stats.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.app.stats
                     * @interface IConfig
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.app.stats
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.app.stats.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {v2ray.core.app.stats.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.app.stats.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.app.stats.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {v2ray.core.app.stats.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.app.stats.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {v2ray.core.app.stats.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.app.stats.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.app.stats.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.app.stats.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.app.stats.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.app.stats.Config)
                            return object;
                        return new $root.v2ray.core.app.stats.Config();
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.app.stats.Config
                     * @static
                     * @param {v2ray.core.app.stats.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.app.stats.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return stats;
            })();

            return app;
        })();

        core.common = (function() {

            /**
             * Namespace common.
             * @memberof v2ray.core
             * @namespace
             */
            var common = {};

            common.log = (function() {

                /**
                 * Namespace log.
                 * @memberof v2ray.core.common
                 * @namespace
                 */
                var log = {};

                /**
                 * Severity enum.
                 * @name v2ray.core.common.log.Severity
                 * @enum {string}
                 * @property {number} Unknown=0 Unknown value
                 * @property {number} Error=1 Error value
                 * @property {number} Warning=2 Warning value
                 * @property {number} Info=3 Info value
                 * @property {number} Debug=4 Debug value
                 */
                log.Severity = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "Unknown"] = 0;
                    values[valuesById[1] = "Error"] = 1;
                    values[valuesById[2] = "Warning"] = 2;
                    values[valuesById[3] = "Info"] = 3;
                    values[valuesById[4] = "Debug"] = 4;
                    return values;
                })();

                return log;
            })();

            common.net = (function() {

                /**
                 * Namespace net.
                 * @memberof v2ray.core.common
                 * @namespace
                 */
                var net = {};

                net.IPOrDomain = (function() {

                    /**
                     * Properties of a IPOrDomain.
                     * @memberof v2ray.core.common.net
                     * @interface IIPOrDomain
                     * @property {Uint8Array|null} [ip] IPOrDomain ip
                     * @property {string|null} [domain] IPOrDomain domain
                     */

                    /**
                     * Constructs a new IPOrDomain.
                     * @memberof v2ray.core.common.net
                     * @classdesc Represents a IPOrDomain.
                     * @implements IIPOrDomain
                     * @constructor
                     * @param {v2ray.core.common.net.IIPOrDomain=} [properties] Properties to set
                     */
                    function IPOrDomain(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IPOrDomain ip.
                     * @member {Uint8Array} ip
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @instance
                     */
                    IPOrDomain.prototype.ip = $util.newBuffer([]);

                    /**
                     * IPOrDomain domain.
                     * @member {string} domain
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @instance
                     */
                    IPOrDomain.prototype.domain = "";

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * IPOrDomain address.
                     * @member {"ip"|"domain"|undefined} address
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @instance
                     */
                    Object.defineProperty(IPOrDomain.prototype, "address", {
                        get: $util.oneOfGetter($oneOfFields = ["ip", "domain"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new IPOrDomain instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {v2ray.core.common.net.IIPOrDomain=} [properties] Properties to set
                     * @returns {v2ray.core.common.net.IPOrDomain} IPOrDomain instance
                     */
                    IPOrDomain.create = function create(properties) {
                        return new IPOrDomain(properties);
                    };

                    /**
                     * Encodes the specified IPOrDomain message. Does not implicitly {@link v2ray.core.common.net.IPOrDomain.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {v2ray.core.common.net.IIPOrDomain} message IPOrDomain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IPOrDomain.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.ip != null && message.hasOwnProperty("ip"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ip);
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.domain);
                        return writer;
                    };

                    /**
                     * Encodes the specified IPOrDomain message, length delimited. Does not implicitly {@link v2ray.core.common.net.IPOrDomain.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {v2ray.core.common.net.IIPOrDomain} message IPOrDomain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IPOrDomain.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a IPOrDomain message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.net.IPOrDomain} IPOrDomain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IPOrDomain.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.net.IPOrDomain();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.ip = reader.bytes();
                                break;
                            case 2:
                                message.domain = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a IPOrDomain message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.net.IPOrDomain} IPOrDomain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IPOrDomain.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a IPOrDomain message.
                     * @function verify
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IPOrDomain.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.ip != null && message.hasOwnProperty("ip")) {
                            properties.address = 1;
                            if (!(message.ip && typeof message.ip.length === "number" || $util.isString(message.ip)))
                                return "ip: buffer expected";
                        }
                        if (message.domain != null && message.hasOwnProperty("domain")) {
                            if (properties.address === 1)
                                return "address: multiple values";
                            properties.address = 1;
                            if (!$util.isString(message.domain))
                                return "domain: string expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a IPOrDomain message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.net.IPOrDomain} IPOrDomain
                     */
                    IPOrDomain.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.net.IPOrDomain)
                            return object;
                        var message = new $root.v2ray.core.common.net.IPOrDomain();
                        if (object.ip != null)
                            if (typeof object.ip === "string")
                                $util.base64.decode(object.ip, message.ip = $util.newBuffer($util.base64.length(object.ip)), 0);
                            else if (object.ip.length)
                                message.ip = object.ip;
                        if (object.domain != null)
                            message.domain = String(object.domain);
                        return message;
                    };

                    /**
                     * Creates a plain object from a IPOrDomain message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @static
                     * @param {v2ray.core.common.net.IPOrDomain} message IPOrDomain
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IPOrDomain.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.ip != null && message.hasOwnProperty("ip")) {
                            object.ip = options.bytes === String ? $util.base64.encode(message.ip, 0, message.ip.length) : options.bytes === Array ? Array.prototype.slice.call(message.ip) : message.ip;
                            if (options.oneofs)
                                object.address = "ip";
                        }
                        if (message.domain != null && message.hasOwnProperty("domain")) {
                            object.domain = message.domain;
                            if (options.oneofs)
                                object.address = "domain";
                        }
                        return object;
                    };

                    /**
                     * Converts this IPOrDomain to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.net.IPOrDomain
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IPOrDomain.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IPOrDomain;
                })();

                net.Endpoint = (function() {

                    /**
                     * Properties of an Endpoint.
                     * @memberof v2ray.core.common.net
                     * @interface IEndpoint
                     * @property {v2ray.core.common.net.Network|null} [network] Endpoint network
                     * @property {v2ray.core.common.net.IIPOrDomain|null} [address] Endpoint address
                     * @property {number|null} [port] Endpoint port
                     */

                    /**
                     * Constructs a new Endpoint.
                     * @memberof v2ray.core.common.net
                     * @classdesc Represents an Endpoint.
                     * @implements IEndpoint
                     * @constructor
                     * @param {v2ray.core.common.net.IEndpoint=} [properties] Properties to set
                     */
                    function Endpoint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Endpoint network.
                     * @member {v2ray.core.common.net.Network} network
                     * @memberof v2ray.core.common.net.Endpoint
                     * @instance
                     */
                    Endpoint.prototype.network = 0;

                    /**
                     * Endpoint address.
                     * @member {v2ray.core.common.net.IIPOrDomain|null|undefined} address
                     * @memberof v2ray.core.common.net.Endpoint
                     * @instance
                     */
                    Endpoint.prototype.address = null;

                    /**
                     * Endpoint port.
                     * @member {number} port
                     * @memberof v2ray.core.common.net.Endpoint
                     * @instance
                     */
                    Endpoint.prototype.port = 0;

                    /**
                     * Creates a new Endpoint instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {v2ray.core.common.net.IEndpoint=} [properties] Properties to set
                     * @returns {v2ray.core.common.net.Endpoint} Endpoint instance
                     */
                    Endpoint.create = function create(properties) {
                        return new Endpoint(properties);
                    };

                    /**
                     * Encodes the specified Endpoint message. Does not implicitly {@link v2ray.core.common.net.Endpoint.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {v2ray.core.common.net.IEndpoint} message Endpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Endpoint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.network != null && message.hasOwnProperty("network"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.network);
                        if (message.address != null && message.hasOwnProperty("address"))
                            $root.v2ray.core.common.net.IPOrDomain.encode(message.address, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.port != null && message.hasOwnProperty("port"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.port);
                        return writer;
                    };

                    /**
                     * Encodes the specified Endpoint message, length delimited. Does not implicitly {@link v2ray.core.common.net.Endpoint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {v2ray.core.common.net.IEndpoint} message Endpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Endpoint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Endpoint message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.net.Endpoint} Endpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Endpoint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.net.Endpoint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.network = reader.int32();
                                break;
                            case 2:
                                message.address = $root.v2ray.core.common.net.IPOrDomain.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.port = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Endpoint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.net.Endpoint} Endpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Endpoint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Endpoint message.
                     * @function verify
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Endpoint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.network != null && message.hasOwnProperty("network"))
                            switch (message.network) {
                            default:
                                return "network: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.address != null && message.hasOwnProperty("address")) {
                            var error = $root.v2ray.core.common.net.IPOrDomain.verify(message.address);
                            if (error)
                                return "address." + error;
                        }
                        if (message.port != null && message.hasOwnProperty("port"))
                            if (!$util.isInteger(message.port))
                                return "port: integer expected";
                        return null;
                    };

                    /**
                     * Creates an Endpoint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.net.Endpoint} Endpoint
                     */
                    Endpoint.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.net.Endpoint)
                            return object;
                        var message = new $root.v2ray.core.common.net.Endpoint();
                        switch (object.network) {
                        case "Unknown":
                        case 0:
                            message.network = 0;
                            break;
                        case "RawTCP":
                        case 1:
                            message.network = 1;
                            break;
                        case "TCP":
                        case 2:
                            message.network = 2;
                            break;
                        case "UDP":
                        case 3:
                            message.network = 3;
                            break;
                        }
                        if (object.address != null) {
                            if (typeof object.address !== "object")
                                throw TypeError(".v2ray.core.common.net.Endpoint.address: object expected");
                            message.address = $root.v2ray.core.common.net.IPOrDomain.fromObject(object.address);
                        }
                        if (object.port != null)
                            message.port = object.port >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from an Endpoint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.net.Endpoint
                     * @static
                     * @param {v2ray.core.common.net.Endpoint} message Endpoint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Endpoint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.network = options.enums === String ? "Unknown" : 0;
                            object.address = null;
                            object.port = 0;
                        }
                        if (message.network != null && message.hasOwnProperty("network"))
                            object.network = options.enums === String ? $root.v2ray.core.common.net.Network[message.network] : message.network;
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = $root.v2ray.core.common.net.IPOrDomain.toObject(message.address, options);
                        if (message.port != null && message.hasOwnProperty("port"))
                            object.port = message.port;
                        return object;
                    };

                    /**
                     * Converts this Endpoint to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.net.Endpoint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Endpoint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Endpoint;
                })();

                /**
                 * Network enum.
                 * @name v2ray.core.common.net.Network
                 * @enum {string}
                 * @property {number} Unknown=0 Unknown value
                 * @property {number} RawTCP=1 RawTCP value
                 * @property {number} TCP=2 TCP value
                 * @property {number} UDP=3 UDP value
                 */
                net.Network = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "Unknown"] = 0;
                    values[valuesById[1] = "RawTCP"] = 1;
                    values[valuesById[2] = "TCP"] = 2;
                    values[valuesById[3] = "UDP"] = 3;
                    return values;
                })();

                net.NetworkList = (function() {

                    /**
                     * Properties of a NetworkList.
                     * @memberof v2ray.core.common.net
                     * @interface INetworkList
                     * @property {Array.<v2ray.core.common.net.Network>|null} [network] NetworkList network
                     */

                    /**
                     * Constructs a new NetworkList.
                     * @memberof v2ray.core.common.net
                     * @classdesc Represents a NetworkList.
                     * @implements INetworkList
                     * @constructor
                     * @param {v2ray.core.common.net.INetworkList=} [properties] Properties to set
                     */
                    function NetworkList(properties) {
                        this.network = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NetworkList network.
                     * @member {Array.<v2ray.core.common.net.Network>} network
                     * @memberof v2ray.core.common.net.NetworkList
                     * @instance
                     */
                    NetworkList.prototype.network = $util.emptyArray;

                    /**
                     * Creates a new NetworkList instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {v2ray.core.common.net.INetworkList=} [properties] Properties to set
                     * @returns {v2ray.core.common.net.NetworkList} NetworkList instance
                     */
                    NetworkList.create = function create(properties) {
                        return new NetworkList(properties);
                    };

                    /**
                     * Encodes the specified NetworkList message. Does not implicitly {@link v2ray.core.common.net.NetworkList.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {v2ray.core.common.net.INetworkList} message NetworkList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NetworkList.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.network != null && message.network.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.network.length; ++i)
                                writer.int32(message.network[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified NetworkList message, length delimited. Does not implicitly {@link v2ray.core.common.net.NetworkList.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {v2ray.core.common.net.INetworkList} message NetworkList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NetworkList.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NetworkList message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.net.NetworkList} NetworkList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NetworkList.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.net.NetworkList();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.network && message.network.length))
                                    message.network = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.network.push(reader.int32());
                                } else
                                    message.network.push(reader.int32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NetworkList message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.net.NetworkList} NetworkList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NetworkList.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NetworkList message.
                     * @function verify
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NetworkList.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.network != null && message.hasOwnProperty("network")) {
                            if (!Array.isArray(message.network))
                                return "network: array expected";
                            for (var i = 0; i < message.network.length; ++i)
                                switch (message.network[i]) {
                                default:
                                    return "network: enum value[] expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                        }
                        return null;
                    };

                    /**
                     * Creates a NetworkList message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.net.NetworkList} NetworkList
                     */
                    NetworkList.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.net.NetworkList)
                            return object;
                        var message = new $root.v2ray.core.common.net.NetworkList();
                        if (object.network) {
                            if (!Array.isArray(object.network))
                                throw TypeError(".v2ray.core.common.net.NetworkList.network: array expected");
                            message.network = [];
                            for (var i = 0; i < object.network.length; ++i)
                                switch (object.network[i]) {
                                default:
                                case "Unknown":
                                case 0:
                                    message.network[i] = 0;
                                    break;
                                case "RawTCP":
                                case 1:
                                    message.network[i] = 1;
                                    break;
                                case "TCP":
                                case 2:
                                    message.network[i] = 2;
                                    break;
                                case "UDP":
                                case 3:
                                    message.network[i] = 3;
                                    break;
                                }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a NetworkList message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.net.NetworkList
                     * @static
                     * @param {v2ray.core.common.net.NetworkList} message NetworkList
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NetworkList.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.network = [];
                        if (message.network && message.network.length) {
                            object.network = [];
                            for (var j = 0; j < message.network.length; ++j)
                                object.network[j] = options.enums === String ? $root.v2ray.core.common.net.Network[message.network[j]] : message.network[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this NetworkList to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.net.NetworkList
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NetworkList.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NetworkList;
                })();

                net.PortRange = (function() {

                    /**
                     * Properties of a PortRange.
                     * @memberof v2ray.core.common.net
                     * @interface IPortRange
                     * @property {number|null} [From] PortRange From
                     * @property {number|null} [To] PortRange To
                     */

                    /**
                     * Constructs a new PortRange.
                     * @memberof v2ray.core.common.net
                     * @classdesc Represents a PortRange.
                     * @implements IPortRange
                     * @constructor
                     * @param {v2ray.core.common.net.IPortRange=} [properties] Properties to set
                     */
                    function PortRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PortRange From.
                     * @member {number} From
                     * @memberof v2ray.core.common.net.PortRange
                     * @instance
                     */
                    PortRange.prototype.From = 0;

                    /**
                     * PortRange To.
                     * @member {number} To
                     * @memberof v2ray.core.common.net.PortRange
                     * @instance
                     */
                    PortRange.prototype.To = 0;

                    /**
                     * Creates a new PortRange instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {v2ray.core.common.net.IPortRange=} [properties] Properties to set
                     * @returns {v2ray.core.common.net.PortRange} PortRange instance
                     */
                    PortRange.create = function create(properties) {
                        return new PortRange(properties);
                    };

                    /**
                     * Encodes the specified PortRange message. Does not implicitly {@link v2ray.core.common.net.PortRange.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {v2ray.core.common.net.IPortRange} message PortRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.From != null && message.hasOwnProperty("From"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.From);
                        if (message.To != null && message.hasOwnProperty("To"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.To);
                        return writer;
                    };

                    /**
                     * Encodes the specified PortRange message, length delimited. Does not implicitly {@link v2ray.core.common.net.PortRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {v2ray.core.common.net.IPortRange} message PortRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PortRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.net.PortRange} PortRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.net.PortRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.From = reader.uint32();
                                break;
                            case 2:
                                message.To = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PortRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.net.PortRange} PortRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PortRange message.
                     * @function verify
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PortRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.From != null && message.hasOwnProperty("From"))
                            if (!$util.isInteger(message.From))
                                return "From: integer expected";
                        if (message.To != null && message.hasOwnProperty("To"))
                            if (!$util.isInteger(message.To))
                                return "To: integer expected";
                        return null;
                    };

                    /**
                     * Creates a PortRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.net.PortRange} PortRange
                     */
                    PortRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.net.PortRange)
                            return object;
                        var message = new $root.v2ray.core.common.net.PortRange();
                        if (object.From != null)
                            message.From = object.From >>> 0;
                        if (object.To != null)
                            message.To = object.To >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PortRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.net.PortRange
                     * @static
                     * @param {v2ray.core.common.net.PortRange} message PortRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PortRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.From = 0;
                            object.To = 0;
                        }
                        if (message.From != null && message.hasOwnProperty("From"))
                            object.From = message.From;
                        if (message.To != null && message.hasOwnProperty("To"))
                            object.To = message.To;
                        return object;
                    };

                    /**
                     * Converts this PortRange to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.net.PortRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PortRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PortRange;
                })();

                net.PortList = (function() {

                    /**
                     * Properties of a PortList.
                     * @memberof v2ray.core.common.net
                     * @interface IPortList
                     * @property {Array.<v2ray.core.common.net.IPortRange>|null} [range] PortList range
                     */

                    /**
                     * Constructs a new PortList.
                     * @memberof v2ray.core.common.net
                     * @classdesc Represents a PortList.
                     * @implements IPortList
                     * @constructor
                     * @param {v2ray.core.common.net.IPortList=} [properties] Properties to set
                     */
                    function PortList(properties) {
                        this.range = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PortList range.
                     * @member {Array.<v2ray.core.common.net.IPortRange>} range
                     * @memberof v2ray.core.common.net.PortList
                     * @instance
                     */
                    PortList.prototype.range = $util.emptyArray;

                    /**
                     * Creates a new PortList instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {v2ray.core.common.net.IPortList=} [properties] Properties to set
                     * @returns {v2ray.core.common.net.PortList} PortList instance
                     */
                    PortList.create = function create(properties) {
                        return new PortList(properties);
                    };

                    /**
                     * Encodes the specified PortList message. Does not implicitly {@link v2ray.core.common.net.PortList.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {v2ray.core.common.net.IPortList} message PortList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortList.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.range != null && message.range.length)
                            for (var i = 0; i < message.range.length; ++i)
                                $root.v2ray.core.common.net.PortRange.encode(message.range[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified PortList message, length delimited. Does not implicitly {@link v2ray.core.common.net.PortList.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {v2ray.core.common.net.IPortList} message PortList message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortList.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PortList message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.net.PortList} PortList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortList.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.net.PortList();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.range && message.range.length))
                                    message.range = [];
                                message.range.push($root.v2ray.core.common.net.PortRange.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PortList message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.net.PortList} PortList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortList.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PortList message.
                     * @function verify
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PortList.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.range != null && message.hasOwnProperty("range")) {
                            if (!Array.isArray(message.range))
                                return "range: array expected";
                            for (var i = 0; i < message.range.length; ++i) {
                                var error = $root.v2ray.core.common.net.PortRange.verify(message.range[i]);
                                if (error)
                                    return "range." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a PortList message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.net.PortList} PortList
                     */
                    PortList.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.net.PortList)
                            return object;
                        var message = new $root.v2ray.core.common.net.PortList();
                        if (object.range) {
                            if (!Array.isArray(object.range))
                                throw TypeError(".v2ray.core.common.net.PortList.range: array expected");
                            message.range = [];
                            for (var i = 0; i < object.range.length; ++i) {
                                if (typeof object.range[i] !== "object")
                                    throw TypeError(".v2ray.core.common.net.PortList.range: object expected");
                                message.range[i] = $root.v2ray.core.common.net.PortRange.fromObject(object.range[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a PortList message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.net.PortList
                     * @static
                     * @param {v2ray.core.common.net.PortList} message PortList
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PortList.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.range = [];
                        if (message.range && message.range.length) {
                            object.range = [];
                            for (var j = 0; j < message.range.length; ++j)
                                object.range[j] = $root.v2ray.core.common.net.PortRange.toObject(message.range[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this PortList to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.net.PortList
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PortList.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PortList;
                })();

                return net;
            })();

            common.protocol = (function() {

                /**
                 * Namespace protocol.
                 * @memberof v2ray.core.common
                 * @namespace
                 */
                var protocol = {};

                /**
                 * SecurityType enum.
                 * @name v2ray.core.common.protocol.SecurityType
                 * @enum {string}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} LEGACY=1 LEGACY value
                 * @property {number} AUTO=2 AUTO value
                 * @property {number} AES128_GCM=3 AES128_GCM value
                 * @property {number} CHACHA20_POLY1305=4 CHACHA20_POLY1305 value
                 * @property {number} NONE=5 NONE value
                 */
                protocol.SecurityType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "LEGACY"] = 1;
                    values[valuesById[2] = "AUTO"] = 2;
                    values[valuesById[3] = "AES128_GCM"] = 3;
                    values[valuesById[4] = "CHACHA20_POLY1305"] = 4;
                    values[valuesById[5] = "NONE"] = 5;
                    return values;
                })();

                protocol.SecurityConfig = (function() {

                    /**
                     * Properties of a SecurityConfig.
                     * @memberof v2ray.core.common.protocol
                     * @interface ISecurityConfig
                     * @property {v2ray.core.common.protocol.SecurityType|null} [type] SecurityConfig type
                     */

                    /**
                     * Constructs a new SecurityConfig.
                     * @memberof v2ray.core.common.protocol
                     * @classdesc Represents a SecurityConfig.
                     * @implements ISecurityConfig
                     * @constructor
                     * @param {v2ray.core.common.protocol.ISecurityConfig=} [properties] Properties to set
                     */
                    function SecurityConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SecurityConfig type.
                     * @member {v2ray.core.common.protocol.SecurityType} type
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @instance
                     */
                    SecurityConfig.prototype.type = 0;

                    /**
                     * Creates a new SecurityConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {v2ray.core.common.protocol.ISecurityConfig=} [properties] Properties to set
                     * @returns {v2ray.core.common.protocol.SecurityConfig} SecurityConfig instance
                     */
                    SecurityConfig.create = function create(properties) {
                        return new SecurityConfig(properties);
                    };

                    /**
                     * Encodes the specified SecurityConfig message. Does not implicitly {@link v2ray.core.common.protocol.SecurityConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {v2ray.core.common.protocol.ISecurityConfig} message SecurityConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SecurityConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        return writer;
                    };

                    /**
                     * Encodes the specified SecurityConfig message, length delimited. Does not implicitly {@link v2ray.core.common.protocol.SecurityConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {v2ray.core.common.protocol.ISecurityConfig} message SecurityConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SecurityConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SecurityConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.protocol.SecurityConfig} SecurityConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SecurityConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.protocol.SecurityConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SecurityConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.protocol.SecurityConfig} SecurityConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SecurityConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SecurityConfig message.
                     * @function verify
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SecurityConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a SecurityConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.protocol.SecurityConfig} SecurityConfig
                     */
                    SecurityConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.protocol.SecurityConfig)
                            return object;
                        var message = new $root.v2ray.core.common.protocol.SecurityConfig();
                        switch (object.type) {
                        case "UNKNOWN":
                        case 0:
                            message.type = 0;
                            break;
                        case "LEGACY":
                        case 1:
                            message.type = 1;
                            break;
                        case "AUTO":
                        case 2:
                            message.type = 2;
                            break;
                        case "AES128_GCM":
                        case 3:
                            message.type = 3;
                            break;
                        case "CHACHA20_POLY1305":
                        case 4:
                            message.type = 4;
                            break;
                        case "NONE":
                        case 5:
                            message.type = 5;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SecurityConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @static
                     * @param {v2ray.core.common.protocol.SecurityConfig} message SecurityConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SecurityConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.type = options.enums === String ? "UNKNOWN" : 0;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.v2ray.core.common.protocol.SecurityType[message.type] : message.type;
                        return object;
                    };

                    /**
                     * Converts this SecurityConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.protocol.SecurityConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SecurityConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SecurityConfig;
                })();

                protocol.ServerEndpoint = (function() {

                    /**
                     * Properties of a ServerEndpoint.
                     * @memberof v2ray.core.common.protocol
                     * @interface IServerEndpoint
                     * @property {v2ray.core.common.net.IIPOrDomain|null} [address] ServerEndpoint address
                     * @property {number|null} [port] ServerEndpoint port
                     * @property {Array.<v2ray.core.common.protocol.IUser>|null} [user] ServerEndpoint user
                     */

                    /**
                     * Constructs a new ServerEndpoint.
                     * @memberof v2ray.core.common.protocol
                     * @classdesc Represents a ServerEndpoint.
                     * @implements IServerEndpoint
                     * @constructor
                     * @param {v2ray.core.common.protocol.IServerEndpoint=} [properties] Properties to set
                     */
                    function ServerEndpoint(properties) {
                        this.user = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ServerEndpoint address.
                     * @member {v2ray.core.common.net.IIPOrDomain|null|undefined} address
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @instance
                     */
                    ServerEndpoint.prototype.address = null;

                    /**
                     * ServerEndpoint port.
                     * @member {number} port
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @instance
                     */
                    ServerEndpoint.prototype.port = 0;

                    /**
                     * ServerEndpoint user.
                     * @member {Array.<v2ray.core.common.protocol.IUser>} user
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @instance
                     */
                    ServerEndpoint.prototype.user = $util.emptyArray;

                    /**
                     * Creates a new ServerEndpoint instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {v2ray.core.common.protocol.IServerEndpoint=} [properties] Properties to set
                     * @returns {v2ray.core.common.protocol.ServerEndpoint} ServerEndpoint instance
                     */
                    ServerEndpoint.create = function create(properties) {
                        return new ServerEndpoint(properties);
                    };

                    /**
                     * Encodes the specified ServerEndpoint message. Does not implicitly {@link v2ray.core.common.protocol.ServerEndpoint.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {v2ray.core.common.protocol.IServerEndpoint} message ServerEndpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerEndpoint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && message.hasOwnProperty("address"))
                            $root.v2ray.core.common.net.IPOrDomain.encode(message.address, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.port != null && message.hasOwnProperty("port"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
                        if (message.user != null && message.user.length)
                            for (var i = 0; i < message.user.length; ++i)
                                $root.v2ray.core.common.protocol.User.encode(message.user[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ServerEndpoint message, length delimited. Does not implicitly {@link v2ray.core.common.protocol.ServerEndpoint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {v2ray.core.common.protocol.IServerEndpoint} message ServerEndpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerEndpoint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ServerEndpoint message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.protocol.ServerEndpoint} ServerEndpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerEndpoint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.protocol.ServerEndpoint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = $root.v2ray.core.common.net.IPOrDomain.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.port = reader.uint32();
                                break;
                            case 3:
                                if (!(message.user && message.user.length))
                                    message.user = [];
                                message.user.push($root.v2ray.core.common.protocol.User.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ServerEndpoint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.protocol.ServerEndpoint} ServerEndpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerEndpoint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ServerEndpoint message.
                     * @function verify
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ServerEndpoint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address")) {
                            var error = $root.v2ray.core.common.net.IPOrDomain.verify(message.address);
                            if (error)
                                return "address." + error;
                        }
                        if (message.port != null && message.hasOwnProperty("port"))
                            if (!$util.isInteger(message.port))
                                return "port: integer expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            if (!Array.isArray(message.user))
                                return "user: array expected";
                            for (var i = 0; i < message.user.length; ++i) {
                                var error = $root.v2ray.core.common.protocol.User.verify(message.user[i]);
                                if (error)
                                    return "user." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a ServerEndpoint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.protocol.ServerEndpoint} ServerEndpoint
                     */
                    ServerEndpoint.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.protocol.ServerEndpoint)
                            return object;
                        var message = new $root.v2ray.core.common.protocol.ServerEndpoint();
                        if (object.address != null) {
                            if (typeof object.address !== "object")
                                throw TypeError(".v2ray.core.common.protocol.ServerEndpoint.address: object expected");
                            message.address = $root.v2ray.core.common.net.IPOrDomain.fromObject(object.address);
                        }
                        if (object.port != null)
                            message.port = object.port >>> 0;
                        if (object.user) {
                            if (!Array.isArray(object.user))
                                throw TypeError(".v2ray.core.common.protocol.ServerEndpoint.user: array expected");
                            message.user = [];
                            for (var i = 0; i < object.user.length; ++i) {
                                if (typeof object.user[i] !== "object")
                                    throw TypeError(".v2ray.core.common.protocol.ServerEndpoint.user: object expected");
                                message.user[i] = $root.v2ray.core.common.protocol.User.fromObject(object.user[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ServerEndpoint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @static
                     * @param {v2ray.core.common.protocol.ServerEndpoint} message ServerEndpoint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ServerEndpoint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.user = [];
                        if (options.defaults) {
                            object.address = null;
                            object.port = 0;
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = $root.v2ray.core.common.net.IPOrDomain.toObject(message.address, options);
                        if (message.port != null && message.hasOwnProperty("port"))
                            object.port = message.port;
                        if (message.user && message.user.length) {
                            object.user = [];
                            for (var j = 0; j < message.user.length; ++j)
                                object.user[j] = $root.v2ray.core.common.protocol.User.toObject(message.user[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this ServerEndpoint to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.protocol.ServerEndpoint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ServerEndpoint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ServerEndpoint;
                })();

                protocol.User = (function() {

                    /**
                     * Properties of a User.
                     * @memberof v2ray.core.common.protocol
                     * @interface IUser
                     * @property {number|null} [level] User level
                     * @property {string|null} [email] User email
                     * @property {v2ray.core.common.serial.ITypedMessage|null} [account] User account
                     */

                    /**
                     * Constructs a new User.
                     * @memberof v2ray.core.common.protocol
                     * @classdesc Represents a User.
                     * @implements IUser
                     * @constructor
                     * @param {v2ray.core.common.protocol.IUser=} [properties] Properties to set
                     */
                    function User(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * User level.
                     * @member {number} level
                     * @memberof v2ray.core.common.protocol.User
                     * @instance
                     */
                    User.prototype.level = 0;

                    /**
                     * User email.
                     * @member {string} email
                     * @memberof v2ray.core.common.protocol.User
                     * @instance
                     */
                    User.prototype.email = "";

                    /**
                     * User account.
                     * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} account
                     * @memberof v2ray.core.common.protocol.User
                     * @instance
                     */
                    User.prototype.account = null;

                    /**
                     * Creates a new User instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {v2ray.core.common.protocol.IUser=} [properties] Properties to set
                     * @returns {v2ray.core.common.protocol.User} User instance
                     */
                    User.create = function create(properties) {
                        return new User(properties);
                    };

                    /**
                     * Encodes the specified User message. Does not implicitly {@link v2ray.core.common.protocol.User.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {v2ray.core.common.protocol.IUser} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.level != null && message.hasOwnProperty("level"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.level);
                        if (message.email != null && message.hasOwnProperty("email"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.email);
                        if (message.account != null && message.hasOwnProperty("account"))
                            $root.v2ray.core.common.serial.TypedMessage.encode(message.account, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified User message, length delimited. Does not implicitly {@link v2ray.core.common.protocol.User.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {v2ray.core.common.protocol.IUser} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a User message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.protocol.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.protocol.User();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.level = reader.uint32();
                                break;
                            case 2:
                                message.email = reader.string();
                                break;
                            case 3:
                                message.account = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a User message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.protocol.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a User message.
                     * @function verify
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    User.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.level != null && message.hasOwnProperty("level"))
                            if (!$util.isInteger(message.level))
                                return "level: integer expected";
                        if (message.email != null && message.hasOwnProperty("email"))
                            if (!$util.isString(message.email))
                                return "email: string expected";
                        if (message.account != null && message.hasOwnProperty("account")) {
                            var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.account);
                            if (error)
                                return "account." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a User message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.protocol.User} User
                     */
                    User.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.protocol.User)
                            return object;
                        var message = new $root.v2ray.core.common.protocol.User();
                        if (object.level != null)
                            message.level = object.level >>> 0;
                        if (object.email != null)
                            message.email = String(object.email);
                        if (object.account != null) {
                            if (typeof object.account !== "object")
                                throw TypeError(".v2ray.core.common.protocol.User.account: object expected");
                            message.account = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.account);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a User message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.protocol.User
                     * @static
                     * @param {v2ray.core.common.protocol.User} message User
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    User.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.level = 0;
                            object.email = "";
                            object.account = null;
                        }
                        if (message.level != null && message.hasOwnProperty("level"))
                            object.level = message.level;
                        if (message.email != null && message.hasOwnProperty("email"))
                            object.email = message.email;
                        if (message.account != null && message.hasOwnProperty("account"))
                            object.account = $root.v2ray.core.common.serial.TypedMessage.toObject(message.account, options);
                        return object;
                    };

                    /**
                     * Converts this User to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.protocol.User
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    User.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return User;
                })();

                return protocol;
            })();

            common.serial = (function() {

                /**
                 * Namespace serial.
                 * @memberof v2ray.core.common
                 * @namespace
                 */
                var serial = {};

                serial.TypedMessage = (function() {

                    /**
                     * Properties of a TypedMessage.
                     * @memberof v2ray.core.common.serial
                     * @interface ITypedMessage
                     * @property {string|null} [type] TypedMessage type
                     * @property {Uint8Array|null} [value] TypedMessage value
                     */

                    /**
                     * Constructs a new TypedMessage.
                     * @memberof v2ray.core.common.serial
                     * @classdesc Represents a TypedMessage.
                     * @implements ITypedMessage
                     * @constructor
                     * @param {v2ray.core.common.serial.ITypedMessage=} [properties] Properties to set
                     */
                    function TypedMessage(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TypedMessage type.
                     * @member {string} type
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @instance
                     */
                    TypedMessage.prototype.type = "";

                    /**
                     * TypedMessage value.
                     * @member {Uint8Array} value
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @instance
                     */
                    TypedMessage.prototype.value = $util.newBuffer([]);

                    /**
                     * Creates a new TypedMessage instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {v2ray.core.common.serial.ITypedMessage=} [properties] Properties to set
                     * @returns {v2ray.core.common.serial.TypedMessage} TypedMessage instance
                     */
                    TypedMessage.create = function create(properties) {
                        return new TypedMessage(properties);
                    };

                    /**
                     * Encodes the specified TypedMessage message. Does not implicitly {@link v2ray.core.common.serial.TypedMessage.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {v2ray.core.common.serial.ITypedMessage} message TypedMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TypedMessage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                        if (message.value != null && message.hasOwnProperty("value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                        return writer;
                    };

                    /**
                     * Encodes the specified TypedMessage message, length delimited. Does not implicitly {@link v2ray.core.common.serial.TypedMessage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {v2ray.core.common.serial.ITypedMessage} message TypedMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TypedMessage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TypedMessage message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.common.serial.TypedMessage} TypedMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TypedMessage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.common.serial.TypedMessage();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.type = reader.string();
                                break;
                            case 2:
                                message.value = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TypedMessage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.common.serial.TypedMessage} TypedMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TypedMessage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TypedMessage message.
                     * @function verify
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TypedMessage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isString(message.type))
                                return "type: string expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                                return "value: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a TypedMessage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.common.serial.TypedMessage} TypedMessage
                     */
                    TypedMessage.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.common.serial.TypedMessage)
                            return object;
                        var message = new $root.v2ray.core.common.serial.TypedMessage();
                        if (object.type != null)
                            message.type = String(object.type);
                        if (object.value != null)
                            if (typeof object.value === "string")
                                $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                            else if (object.value.length)
                                message.value = object.value;
                        return message;
                    };

                    /**
                     * Creates a plain object from a TypedMessage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @static
                     * @param {v2ray.core.common.serial.TypedMessage} message TypedMessage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TypedMessage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = "";
                            if (options.bytes === String)
                                object.value = "";
                            else {
                                object.value = [];
                                if (options.bytes !== Array)
                                    object.value = $util.newBuffer(object.value);
                            }
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                        return object;
                    };

                    /**
                     * Converts this TypedMessage to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.common.serial.TypedMessage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TypedMessage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TypedMessage;
                })();

                return serial;
            })();

            return common;
        })();

        core.Config = (function() {

            /**
             * Properties of a Config.
             * @memberof v2ray.core
             * @interface IConfig
             * @property {Array.<v2ray.core.IInboundHandlerConfig>|null} [inbound] Config inbound
             * @property {Array.<v2ray.core.IOutboundHandlerConfig>|null} [outbound] Config outbound
             * @property {Array.<v2ray.core.common.serial.ITypedMessage>|null} [app] Config app
             * @property {v2ray.core.transport.IConfig|null} [transport] Config transport
             * @property {Array.<v2ray.core.common.serial.ITypedMessage>|null} [extension] Config extension
             */

            /**
             * Constructs a new Config.
             * @memberof v2ray.core
             * @classdesc Represents a Config.
             * @implements IConfig
             * @constructor
             * @param {v2ray.core.IConfig=} [properties] Properties to set
             */
            function Config(properties) {
                this.inbound = [];
                this.outbound = [];
                this.app = [];
                this.extension = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Config inbound.
             * @member {Array.<v2ray.core.IInboundHandlerConfig>} inbound
             * @memberof v2ray.core.Config
             * @instance
             */
            Config.prototype.inbound = $util.emptyArray;

            /**
             * Config outbound.
             * @member {Array.<v2ray.core.IOutboundHandlerConfig>} outbound
             * @memberof v2ray.core.Config
             * @instance
             */
            Config.prototype.outbound = $util.emptyArray;

            /**
             * Config app.
             * @member {Array.<v2ray.core.common.serial.ITypedMessage>} app
             * @memberof v2ray.core.Config
             * @instance
             */
            Config.prototype.app = $util.emptyArray;

            /**
             * Config transport.
             * @member {v2ray.core.transport.IConfig|null|undefined} transport
             * @memberof v2ray.core.Config
             * @instance
             */
            Config.prototype.transport = null;

            /**
             * Config extension.
             * @member {Array.<v2ray.core.common.serial.ITypedMessage>} extension
             * @memberof v2ray.core.Config
             * @instance
             */
            Config.prototype.extension = $util.emptyArray;

            /**
             * Creates a new Config instance using the specified properties.
             * @function create
             * @memberof v2ray.core.Config
             * @static
             * @param {v2ray.core.IConfig=} [properties] Properties to set
             * @returns {v2ray.core.Config} Config instance
             */
            Config.create = function create(properties) {
                return new Config(properties);
            };

            /**
             * Encodes the specified Config message. Does not implicitly {@link v2ray.core.Config.verify|verify} messages.
             * @function encode
             * @memberof v2ray.core.Config
             * @static
             * @param {v2ray.core.IConfig} message Config message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Config.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.inbound != null && message.inbound.length)
                    for (var i = 0; i < message.inbound.length; ++i)
                        $root.v2ray.core.InboundHandlerConfig.encode(message.inbound[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.outbound != null && message.outbound.length)
                    for (var i = 0; i < message.outbound.length; ++i)
                        $root.v2ray.core.OutboundHandlerConfig.encode(message.outbound[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.app != null && message.app.length)
                    for (var i = 0; i < message.app.length; ++i)
                        $root.v2ray.core.common.serial.TypedMessage.encode(message.app[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.transport != null && message.hasOwnProperty("transport"))
                    $root.v2ray.core.transport.Config.encode(message.transport, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.v2ray.core.common.serial.TypedMessage.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.Config.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v2ray.core.Config
             * @static
             * @param {v2ray.core.IConfig} message Config message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Config.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Config message from the specified reader or buffer.
             * @function decode
             * @memberof v2ray.core.Config
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v2ray.core.Config} Config
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Config.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.Config();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.inbound && message.inbound.length))
                            message.inbound = [];
                        message.inbound.push($root.v2ray.core.InboundHandlerConfig.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.outbound && message.outbound.length))
                            message.outbound = [];
                        message.outbound.push($root.v2ray.core.OutboundHandlerConfig.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.app && message.app.length))
                            message.app = [];
                        message.app.push($root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.transport = $root.v2ray.core.transport.Config.decode(reader, reader.uint32());
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Config message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v2ray.core.Config
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v2ray.core.Config} Config
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Config.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Config message.
             * @function verify
             * @memberof v2ray.core.Config
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Config.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.inbound != null && message.hasOwnProperty("inbound")) {
                    if (!Array.isArray(message.inbound))
                        return "inbound: array expected";
                    for (var i = 0; i < message.inbound.length; ++i) {
                        var error = $root.v2ray.core.InboundHandlerConfig.verify(message.inbound[i]);
                        if (error)
                            return "inbound." + error;
                    }
                }
                if (message.outbound != null && message.hasOwnProperty("outbound")) {
                    if (!Array.isArray(message.outbound))
                        return "outbound: array expected";
                    for (var i = 0; i < message.outbound.length; ++i) {
                        var error = $root.v2ray.core.OutboundHandlerConfig.verify(message.outbound[i]);
                        if (error)
                            return "outbound." + error;
                    }
                }
                if (message.app != null && message.hasOwnProperty("app")) {
                    if (!Array.isArray(message.app))
                        return "app: array expected";
                    for (var i = 0; i < message.app.length; ++i) {
                        var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.app[i]);
                        if (error)
                            return "app." + error;
                    }
                }
                if (message.transport != null && message.hasOwnProperty("transport")) {
                    var error = $root.v2ray.core.transport.Config.verify(message.transport);
                    if (error)
                        return "transport." + error;
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Config message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v2ray.core.Config
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v2ray.core.Config} Config
             */
            Config.fromObject = function fromObject(object) {
                if (object instanceof $root.v2ray.core.Config)
                    return object;
                var message = new $root.v2ray.core.Config();
                if (object.inbound) {
                    if (!Array.isArray(object.inbound))
                        throw TypeError(".v2ray.core.Config.inbound: array expected");
                    message.inbound = [];
                    for (var i = 0; i < object.inbound.length; ++i) {
                        if (typeof object.inbound[i] !== "object")
                            throw TypeError(".v2ray.core.Config.inbound: object expected");
                        message.inbound[i] = $root.v2ray.core.InboundHandlerConfig.fromObject(object.inbound[i]);
                    }
                }
                if (object.outbound) {
                    if (!Array.isArray(object.outbound))
                        throw TypeError(".v2ray.core.Config.outbound: array expected");
                    message.outbound = [];
                    for (var i = 0; i < object.outbound.length; ++i) {
                        if (typeof object.outbound[i] !== "object")
                            throw TypeError(".v2ray.core.Config.outbound: object expected");
                        message.outbound[i] = $root.v2ray.core.OutboundHandlerConfig.fromObject(object.outbound[i]);
                    }
                }
                if (object.app) {
                    if (!Array.isArray(object.app))
                        throw TypeError(".v2ray.core.Config.app: array expected");
                    message.app = [];
                    for (var i = 0; i < object.app.length; ++i) {
                        if (typeof object.app[i] !== "object")
                            throw TypeError(".v2ray.core.Config.app: object expected");
                        message.app[i] = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.app[i]);
                    }
                }
                if (object.transport != null) {
                    if (typeof object.transport !== "object")
                        throw TypeError(".v2ray.core.Config.transport: object expected");
                    message.transport = $root.v2ray.core.transport.Config.fromObject(object.transport);
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".v2ray.core.Config.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".v2ray.core.Config.extension: object expected");
                        message.extension[i] = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.extension[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Config message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v2ray.core.Config
             * @static
             * @param {v2ray.core.Config} message Config
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Config.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.inbound = [];
                    object.outbound = [];
                    object.app = [];
                    object.extension = [];
                }
                if (options.defaults)
                    object.transport = null;
                if (message.inbound && message.inbound.length) {
                    object.inbound = [];
                    for (var j = 0; j < message.inbound.length; ++j)
                        object.inbound[j] = $root.v2ray.core.InboundHandlerConfig.toObject(message.inbound[j], options);
                }
                if (message.outbound && message.outbound.length) {
                    object.outbound = [];
                    for (var j = 0; j < message.outbound.length; ++j)
                        object.outbound[j] = $root.v2ray.core.OutboundHandlerConfig.toObject(message.outbound[j], options);
                }
                if (message.app && message.app.length) {
                    object.app = [];
                    for (var j = 0; j < message.app.length; ++j)
                        object.app[j] = $root.v2ray.core.common.serial.TypedMessage.toObject(message.app[j], options);
                }
                if (message.transport != null && message.hasOwnProperty("transport"))
                    object.transport = $root.v2ray.core.transport.Config.toObject(message.transport, options);
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.v2ray.core.common.serial.TypedMessage.toObject(message.extension[j], options);
                }
                return object;
            };

            /**
             * Converts this Config to JSON.
             * @function toJSON
             * @memberof v2ray.core.Config
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Config.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Config;
        })();

        core.InboundHandlerConfig = (function() {

            /**
             * Properties of an InboundHandlerConfig.
             * @memberof v2ray.core
             * @interface IInboundHandlerConfig
             * @property {string|null} [tag] InboundHandlerConfig tag
             * @property {v2ray.core.common.serial.ITypedMessage|null} [receiverSettings] InboundHandlerConfig receiverSettings
             * @property {v2ray.core.common.serial.ITypedMessage|null} [proxySettings] InboundHandlerConfig proxySettings
             */

            /**
             * Constructs a new InboundHandlerConfig.
             * @memberof v2ray.core
             * @classdesc Represents an InboundHandlerConfig.
             * @implements IInboundHandlerConfig
             * @constructor
             * @param {v2ray.core.IInboundHandlerConfig=} [properties] Properties to set
             */
            function InboundHandlerConfig(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InboundHandlerConfig tag.
             * @member {string} tag
             * @memberof v2ray.core.InboundHandlerConfig
             * @instance
             */
            InboundHandlerConfig.prototype.tag = "";

            /**
             * InboundHandlerConfig receiverSettings.
             * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} receiverSettings
             * @memberof v2ray.core.InboundHandlerConfig
             * @instance
             */
            InboundHandlerConfig.prototype.receiverSettings = null;

            /**
             * InboundHandlerConfig proxySettings.
             * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} proxySettings
             * @memberof v2ray.core.InboundHandlerConfig
             * @instance
             */
            InboundHandlerConfig.prototype.proxySettings = null;

            /**
             * Creates a new InboundHandlerConfig instance using the specified properties.
             * @function create
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {v2ray.core.IInboundHandlerConfig=} [properties] Properties to set
             * @returns {v2ray.core.InboundHandlerConfig} InboundHandlerConfig instance
             */
            InboundHandlerConfig.create = function create(properties) {
                return new InboundHandlerConfig(properties);
            };

            /**
             * Encodes the specified InboundHandlerConfig message. Does not implicitly {@link v2ray.core.InboundHandlerConfig.verify|verify} messages.
             * @function encode
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {v2ray.core.IInboundHandlerConfig} message InboundHandlerConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InboundHandlerConfig.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tag != null && message.hasOwnProperty("tag"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                if (message.receiverSettings != null && message.hasOwnProperty("receiverSettings"))
                    $root.v2ray.core.common.serial.TypedMessage.encode(message.receiverSettings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                    $root.v2ray.core.common.serial.TypedMessage.encode(message.proxySettings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified InboundHandlerConfig message, length delimited. Does not implicitly {@link v2ray.core.InboundHandlerConfig.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {v2ray.core.IInboundHandlerConfig} message InboundHandlerConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InboundHandlerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InboundHandlerConfig message from the specified reader or buffer.
             * @function decode
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v2ray.core.InboundHandlerConfig} InboundHandlerConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InboundHandlerConfig.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.InboundHandlerConfig();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tag = reader.string();
                        break;
                    case 2:
                        message.receiverSettings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.proxySettings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InboundHandlerConfig message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v2ray.core.InboundHandlerConfig} InboundHandlerConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InboundHandlerConfig.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InboundHandlerConfig message.
             * @function verify
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InboundHandlerConfig.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tag != null && message.hasOwnProperty("tag"))
                    if (!$util.isString(message.tag))
                        return "tag: string expected";
                if (message.receiverSettings != null && message.hasOwnProperty("receiverSettings")) {
                    var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.receiverSettings);
                    if (error)
                        return "receiverSettings." + error;
                }
                if (message.proxySettings != null && message.hasOwnProperty("proxySettings")) {
                    var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.proxySettings);
                    if (error)
                        return "proxySettings." + error;
                }
                return null;
            };

            /**
             * Creates an InboundHandlerConfig message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v2ray.core.InboundHandlerConfig} InboundHandlerConfig
             */
            InboundHandlerConfig.fromObject = function fromObject(object) {
                if (object instanceof $root.v2ray.core.InboundHandlerConfig)
                    return object;
                var message = new $root.v2ray.core.InboundHandlerConfig();
                if (object.tag != null)
                    message.tag = String(object.tag);
                if (object.receiverSettings != null) {
                    if (typeof object.receiverSettings !== "object")
                        throw TypeError(".v2ray.core.InboundHandlerConfig.receiverSettings: object expected");
                    message.receiverSettings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.receiverSettings);
                }
                if (object.proxySettings != null) {
                    if (typeof object.proxySettings !== "object")
                        throw TypeError(".v2ray.core.InboundHandlerConfig.proxySettings: object expected");
                    message.proxySettings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.proxySettings);
                }
                return message;
            };

            /**
             * Creates a plain object from an InboundHandlerConfig message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v2ray.core.InboundHandlerConfig
             * @static
             * @param {v2ray.core.InboundHandlerConfig} message InboundHandlerConfig
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InboundHandlerConfig.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.tag = "";
                    object.receiverSettings = null;
                    object.proxySettings = null;
                }
                if (message.tag != null && message.hasOwnProperty("tag"))
                    object.tag = message.tag;
                if (message.receiverSettings != null && message.hasOwnProperty("receiverSettings"))
                    object.receiverSettings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.receiverSettings, options);
                if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                    object.proxySettings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.proxySettings, options);
                return object;
            };

            /**
             * Converts this InboundHandlerConfig to JSON.
             * @function toJSON
             * @memberof v2ray.core.InboundHandlerConfig
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InboundHandlerConfig.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return InboundHandlerConfig;
        })();

        core.OutboundHandlerConfig = (function() {

            /**
             * Properties of an OutboundHandlerConfig.
             * @memberof v2ray.core
             * @interface IOutboundHandlerConfig
             * @property {string|null} [tag] OutboundHandlerConfig tag
             * @property {v2ray.core.common.serial.ITypedMessage|null} [senderSettings] OutboundHandlerConfig senderSettings
             * @property {v2ray.core.common.serial.ITypedMessage|null} [proxySettings] OutboundHandlerConfig proxySettings
             * @property {number|Long|null} [expire] OutboundHandlerConfig expire
             * @property {string|null} [comment] OutboundHandlerConfig comment
             */

            /**
             * Constructs a new OutboundHandlerConfig.
             * @memberof v2ray.core
             * @classdesc Represents an OutboundHandlerConfig.
             * @implements IOutboundHandlerConfig
             * @constructor
             * @param {v2ray.core.IOutboundHandlerConfig=} [properties] Properties to set
             */
            function OutboundHandlerConfig(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OutboundHandlerConfig tag.
             * @member {string} tag
             * @memberof v2ray.core.OutboundHandlerConfig
             * @instance
             */
            OutboundHandlerConfig.prototype.tag = "";

            /**
             * OutboundHandlerConfig senderSettings.
             * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} senderSettings
             * @memberof v2ray.core.OutboundHandlerConfig
             * @instance
             */
            OutboundHandlerConfig.prototype.senderSettings = null;

            /**
             * OutboundHandlerConfig proxySettings.
             * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} proxySettings
             * @memberof v2ray.core.OutboundHandlerConfig
             * @instance
             */
            OutboundHandlerConfig.prototype.proxySettings = null;

            /**
             * OutboundHandlerConfig expire.
             * @member {number|Long} expire
             * @memberof v2ray.core.OutboundHandlerConfig
             * @instance
             */
            OutboundHandlerConfig.prototype.expire = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * OutboundHandlerConfig comment.
             * @member {string} comment
             * @memberof v2ray.core.OutboundHandlerConfig
             * @instance
             */
            OutboundHandlerConfig.prototype.comment = "";

            /**
             * Creates a new OutboundHandlerConfig instance using the specified properties.
             * @function create
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {v2ray.core.IOutboundHandlerConfig=} [properties] Properties to set
             * @returns {v2ray.core.OutboundHandlerConfig} OutboundHandlerConfig instance
             */
            OutboundHandlerConfig.create = function create(properties) {
                return new OutboundHandlerConfig(properties);
            };

            /**
             * Encodes the specified OutboundHandlerConfig message. Does not implicitly {@link v2ray.core.OutboundHandlerConfig.verify|verify} messages.
             * @function encode
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {v2ray.core.IOutboundHandlerConfig} message OutboundHandlerConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutboundHandlerConfig.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tag != null && message.hasOwnProperty("tag"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                if (message.senderSettings != null && message.hasOwnProperty("senderSettings"))
                    $root.v2ray.core.common.serial.TypedMessage.encode(message.senderSettings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                    $root.v2ray.core.common.serial.TypedMessage.encode(message.proxySettings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.expire != null && message.hasOwnProperty("expire"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.expire);
                if (message.comment != null && message.hasOwnProperty("comment"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.comment);
                return writer;
            };

            /**
             * Encodes the specified OutboundHandlerConfig message, length delimited. Does not implicitly {@link v2ray.core.OutboundHandlerConfig.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {v2ray.core.IOutboundHandlerConfig} message OutboundHandlerConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OutboundHandlerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OutboundHandlerConfig message from the specified reader or buffer.
             * @function decode
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v2ray.core.OutboundHandlerConfig} OutboundHandlerConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutboundHandlerConfig.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.OutboundHandlerConfig();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tag = reader.string();
                        break;
                    case 2:
                        message.senderSettings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.proxySettings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.expire = reader.int64();
                        break;
                    case 5:
                        message.comment = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OutboundHandlerConfig message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v2ray.core.OutboundHandlerConfig} OutboundHandlerConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OutboundHandlerConfig.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OutboundHandlerConfig message.
             * @function verify
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OutboundHandlerConfig.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tag != null && message.hasOwnProperty("tag"))
                    if (!$util.isString(message.tag))
                        return "tag: string expected";
                if (message.senderSettings != null && message.hasOwnProperty("senderSettings")) {
                    var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.senderSettings);
                    if (error)
                        return "senderSettings." + error;
                }
                if (message.proxySettings != null && message.hasOwnProperty("proxySettings")) {
                    var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.proxySettings);
                    if (error)
                        return "proxySettings." + error;
                }
                if (message.expire != null && message.hasOwnProperty("expire"))
                    if (!$util.isInteger(message.expire) && !(message.expire && $util.isInteger(message.expire.low) && $util.isInteger(message.expire.high)))
                        return "expire: integer|Long expected";
                if (message.comment != null && message.hasOwnProperty("comment"))
                    if (!$util.isString(message.comment))
                        return "comment: string expected";
                return null;
            };

            /**
             * Creates an OutboundHandlerConfig message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v2ray.core.OutboundHandlerConfig} OutboundHandlerConfig
             */
            OutboundHandlerConfig.fromObject = function fromObject(object) {
                if (object instanceof $root.v2ray.core.OutboundHandlerConfig)
                    return object;
                var message = new $root.v2ray.core.OutboundHandlerConfig();
                if (object.tag != null)
                    message.tag = String(object.tag);
                if (object.senderSettings != null) {
                    if (typeof object.senderSettings !== "object")
                        throw TypeError(".v2ray.core.OutboundHandlerConfig.senderSettings: object expected");
                    message.senderSettings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.senderSettings);
                }
                if (object.proxySettings != null) {
                    if (typeof object.proxySettings !== "object")
                        throw TypeError(".v2ray.core.OutboundHandlerConfig.proxySettings: object expected");
                    message.proxySettings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.proxySettings);
                }
                if (object.expire != null)
                    if ($util.Long)
                        (message.expire = $util.Long.fromValue(object.expire)).unsigned = false;
                    else if (typeof object.expire === "string")
                        message.expire = parseInt(object.expire, 10);
                    else if (typeof object.expire === "number")
                        message.expire = object.expire;
                    else if (typeof object.expire === "object")
                        message.expire = new $util.LongBits(object.expire.low >>> 0, object.expire.high >>> 0).toNumber();
                if (object.comment != null)
                    message.comment = String(object.comment);
                return message;
            };

            /**
             * Creates a plain object from an OutboundHandlerConfig message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v2ray.core.OutboundHandlerConfig
             * @static
             * @param {v2ray.core.OutboundHandlerConfig} message OutboundHandlerConfig
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OutboundHandlerConfig.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.tag = "";
                    object.senderSettings = null;
                    object.proxySettings = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.expire = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.expire = options.longs === String ? "0" : 0;
                    object.comment = "";
                }
                if (message.tag != null && message.hasOwnProperty("tag"))
                    object.tag = message.tag;
                if (message.senderSettings != null && message.hasOwnProperty("senderSettings"))
                    object.senderSettings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.senderSettings, options);
                if (message.proxySettings != null && message.hasOwnProperty("proxySettings"))
                    object.proxySettings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.proxySettings, options);
                if (message.expire != null && message.hasOwnProperty("expire"))
                    if (typeof message.expire === "number")
                        object.expire = options.longs === String ? String(message.expire) : message.expire;
                    else
                        object.expire = options.longs === String ? $util.Long.prototype.toString.call(message.expire) : options.longs === Number ? new $util.LongBits(message.expire.low >>> 0, message.expire.high >>> 0).toNumber() : message.expire;
                if (message.comment != null && message.hasOwnProperty("comment"))
                    object.comment = message.comment;
                return object;
            };

            /**
             * Converts this OutboundHandlerConfig to JSON.
             * @function toJSON
             * @memberof v2ray.core.OutboundHandlerConfig
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OutboundHandlerConfig.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OutboundHandlerConfig;
        })();

        core.proxy = (function() {

            /**
             * Namespace proxy.
             * @memberof v2ray.core
             * @namespace
             */
            var proxy = {};

            proxy.blackhole = (function() {

                /**
                 * Namespace blackhole.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var blackhole = {};

                blackhole.NoneResponse = (function() {

                    /**
                     * Properties of a NoneResponse.
                     * @memberof v2ray.core.proxy.blackhole
                     * @interface INoneResponse
                     */

                    /**
                     * Constructs a new NoneResponse.
                     * @memberof v2ray.core.proxy.blackhole
                     * @classdesc Represents a NoneResponse.
                     * @implements INoneResponse
                     * @constructor
                     * @param {v2ray.core.proxy.blackhole.INoneResponse=} [properties] Properties to set
                     */
                    function NoneResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new NoneResponse instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.INoneResponse=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.blackhole.NoneResponse} NoneResponse instance
                     */
                    NoneResponse.create = function create(properties) {
                        return new NoneResponse(properties);
                    };

                    /**
                     * Encodes the specified NoneResponse message. Does not implicitly {@link v2ray.core.proxy.blackhole.NoneResponse.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.INoneResponse} message NoneResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NoneResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified NoneResponse message, length delimited. Does not implicitly {@link v2ray.core.proxy.blackhole.NoneResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.INoneResponse} message NoneResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NoneResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NoneResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.blackhole.NoneResponse} NoneResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NoneResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.blackhole.NoneResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NoneResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.blackhole.NoneResponse} NoneResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NoneResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NoneResponse message.
                     * @function verify
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NoneResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a NoneResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.blackhole.NoneResponse} NoneResponse
                     */
                    NoneResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.blackhole.NoneResponse)
                            return object;
                        return new $root.v2ray.core.proxy.blackhole.NoneResponse();
                    };

                    /**
                     * Creates a plain object from a NoneResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.NoneResponse} message NoneResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NoneResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this NoneResponse to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.blackhole.NoneResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NoneResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NoneResponse;
                })();

                blackhole.HTTPResponse = (function() {

                    /**
                     * Properties of a HTTPResponse.
                     * @memberof v2ray.core.proxy.blackhole
                     * @interface IHTTPResponse
                     */

                    /**
                     * Constructs a new HTTPResponse.
                     * @memberof v2ray.core.proxy.blackhole
                     * @classdesc Represents a HTTPResponse.
                     * @implements IHTTPResponse
                     * @constructor
                     * @param {v2ray.core.proxy.blackhole.IHTTPResponse=} [properties] Properties to set
                     */
                    function HTTPResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new HTTPResponse instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.IHTTPResponse=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.blackhole.HTTPResponse} HTTPResponse instance
                     */
                    HTTPResponse.create = function create(properties) {
                        return new HTTPResponse(properties);
                    };

                    /**
                     * Encodes the specified HTTPResponse message. Does not implicitly {@link v2ray.core.proxy.blackhole.HTTPResponse.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.IHTTPResponse} message HTTPResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HTTPResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified HTTPResponse message, length delimited. Does not implicitly {@link v2ray.core.proxy.blackhole.HTTPResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.IHTTPResponse} message HTTPResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HTTPResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HTTPResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.blackhole.HTTPResponse} HTTPResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HTTPResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.blackhole.HTTPResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HTTPResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.blackhole.HTTPResponse} HTTPResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HTTPResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HTTPResponse message.
                     * @function verify
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HTTPResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a HTTPResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.blackhole.HTTPResponse} HTTPResponse
                     */
                    HTTPResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.blackhole.HTTPResponse)
                            return object;
                        return new $root.v2ray.core.proxy.blackhole.HTTPResponse();
                    };

                    /**
                     * Creates a plain object from a HTTPResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @static
                     * @param {v2ray.core.proxy.blackhole.HTTPResponse} message HTTPResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HTTPResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this HTTPResponse to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.blackhole.HTTPResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HTTPResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return HTTPResponse;
                })();

                blackhole.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.proxy.blackhole
                     * @interface IConfig
                     * @property {v2ray.core.common.serial.ITypedMessage|null} [response] Config response
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.proxy.blackhole
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.proxy.blackhole.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config response.
                     * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} response
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @instance
                     */
                    Config.prototype.response = null;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {v2ray.core.proxy.blackhole.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.blackhole.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.proxy.blackhole.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {v2ray.core.proxy.blackhole.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.response != null && message.hasOwnProperty("response"))
                            $root.v2ray.core.common.serial.TypedMessage.encode(message.response, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.proxy.blackhole.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {v2ray.core.proxy.blackhole.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.blackhole.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.blackhole.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.response = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.blackhole.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.response != null && message.hasOwnProperty("response")) {
                            var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.blackhole.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.blackhole.Config)
                            return object;
                        var message = new $root.v2ray.core.proxy.blackhole.Config();
                        if (object.response != null) {
                            if (typeof object.response !== "object")
                                throw TypeError(".v2ray.core.proxy.blackhole.Config.response: object expected");
                            message.response = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.response);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @static
                     * @param {v2ray.core.proxy.blackhole.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.response = null;
                        if (message.response != null && message.hasOwnProperty("response"))
                            object.response = $root.v2ray.core.common.serial.TypedMessage.toObject(message.response, options);
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.blackhole.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return blackhole;
            })();

            proxy.dns = (function() {

                /**
                 * Namespace dns.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var dns = {};

                dns.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.proxy.dns
                     * @interface IConfig
                     * @property {v2ray.core.common.net.IEndpoint|null} [server] Config server
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.proxy.dns
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.proxy.dns.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config server.
                     * @member {v2ray.core.common.net.IEndpoint|null|undefined} server
                     * @memberof v2ray.core.proxy.dns.Config
                     * @instance
                     */
                    Config.prototype.server = null;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {v2ray.core.proxy.dns.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.dns.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.proxy.dns.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {v2ray.core.proxy.dns.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.server != null && message.hasOwnProperty("server"))
                            $root.v2ray.core.common.net.Endpoint.encode(message.server, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.proxy.dns.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {v2ray.core.proxy.dns.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.dns.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.dns.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.server = $root.v2ray.core.common.net.Endpoint.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.dns.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.server != null && message.hasOwnProperty("server")) {
                            var error = $root.v2ray.core.common.net.Endpoint.verify(message.server);
                            if (error)
                                return "server." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.dns.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.dns.Config)
                            return object;
                        var message = new $root.v2ray.core.proxy.dns.Config();
                        if (object.server != null) {
                            if (typeof object.server !== "object")
                                throw TypeError(".v2ray.core.proxy.dns.Config.server: object expected");
                            message.server = $root.v2ray.core.common.net.Endpoint.fromObject(object.server);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.dns.Config
                     * @static
                     * @param {v2ray.core.proxy.dns.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.server = null;
                        if (message.server != null && message.hasOwnProperty("server"))
                            object.server = $root.v2ray.core.common.net.Endpoint.toObject(message.server, options);
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.dns.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return dns;
            })();

            proxy.dokodemo = (function() {

                /**
                 * Namespace dokodemo.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var dokodemo = {};

                dokodemo.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.proxy.dokodemo
                     * @interface IConfig
                     * @property {v2ray.core.common.net.IIPOrDomain|null} [address] Config address
                     * @property {number|null} [port] Config port
                     * @property {v2ray.core.common.net.INetworkList|null} [networkList] Config networkList
                     * @property {Array.<v2ray.core.common.net.Network>|null} [networks] Config networks
                     * @property {number|null} [timeout] Config timeout
                     * @property {boolean|null} [followRedirect] Config followRedirect
                     * @property {number|null} [userLevel] Config userLevel
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.proxy.dokodemo
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.proxy.dokodemo.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        this.networks = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config address.
                     * @member {v2ray.core.common.net.IIPOrDomain|null|undefined} address
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     */
                    Config.prototype.address = null;

                    /**
                     * Config port.
                     * @member {number} port
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     */
                    Config.prototype.port = 0;

                    /**
                     * Config networkList.
                     * @member {v2ray.core.common.net.INetworkList|null|undefined} networkList
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     */
                    Config.prototype.networkList = null;

                    /**
                     * Config networks.
                     * @member {Array.<v2ray.core.common.net.Network>} networks
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     */
                    Config.prototype.networks = $util.emptyArray;

                    /**
                     * Config timeout.
                     * @member {number} timeout
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     */
                    Config.prototype.timeout = 0;

                    /**
                     * Config followRedirect.
                     * @member {boolean} followRedirect
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     */
                    Config.prototype.followRedirect = false;

                    /**
                     * Config userLevel.
                     * @member {number} userLevel
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     */
                    Config.prototype.userLevel = 0;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {v2ray.core.proxy.dokodemo.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.dokodemo.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.proxy.dokodemo.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {v2ray.core.proxy.dokodemo.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && message.hasOwnProperty("address"))
                            $root.v2ray.core.common.net.IPOrDomain.encode(message.address, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.port != null && message.hasOwnProperty("port"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
                        if (message.networkList != null && message.hasOwnProperty("networkList"))
                            $root.v2ray.core.common.net.NetworkList.encode(message.networkList, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.timeout);
                        if (message.followRedirect != null && message.hasOwnProperty("followRedirect"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.followRedirect);
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.userLevel);
                        if (message.networks != null && message.networks.length) {
                            writer.uint32(/* id 7, wireType 2 =*/58).fork();
                            for (var i = 0; i < message.networks.length; ++i)
                                writer.int32(message.networks[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.proxy.dokodemo.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {v2ray.core.proxy.dokodemo.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.dokodemo.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.dokodemo.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = $root.v2ray.core.common.net.IPOrDomain.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.port = reader.uint32();
                                break;
                            case 3:
                                message.networkList = $root.v2ray.core.common.net.NetworkList.decode(reader, reader.uint32());
                                break;
                            case 7:
                                if (!(message.networks && message.networks.length))
                                    message.networks = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.networks.push(reader.int32());
                                } else
                                    message.networks.push(reader.int32());
                                break;
                            case 4:
                                message.timeout = reader.uint32();
                                break;
                            case 5:
                                message.followRedirect = reader.bool();
                                break;
                            case 6:
                                message.userLevel = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.dokodemo.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address")) {
                            var error = $root.v2ray.core.common.net.IPOrDomain.verify(message.address);
                            if (error)
                                return "address." + error;
                        }
                        if (message.port != null && message.hasOwnProperty("port"))
                            if (!$util.isInteger(message.port))
                                return "port: integer expected";
                        if (message.networkList != null && message.hasOwnProperty("networkList")) {
                            var error = $root.v2ray.core.common.net.NetworkList.verify(message.networkList);
                            if (error)
                                return "networkList." + error;
                        }
                        if (message.networks != null && message.hasOwnProperty("networks")) {
                            if (!Array.isArray(message.networks))
                                return "networks: array expected";
                            for (var i = 0; i < message.networks.length; ++i)
                                switch (message.networks[i]) {
                                default:
                                    return "networks: enum value[] expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                        }
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            if (!$util.isInteger(message.timeout))
                                return "timeout: integer expected";
                        if (message.followRedirect != null && message.hasOwnProperty("followRedirect"))
                            if (typeof message.followRedirect !== "boolean")
                                return "followRedirect: boolean expected";
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            if (!$util.isInteger(message.userLevel))
                                return "userLevel: integer expected";
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.dokodemo.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.dokodemo.Config)
                            return object;
                        var message = new $root.v2ray.core.proxy.dokodemo.Config();
                        if (object.address != null) {
                            if (typeof object.address !== "object")
                                throw TypeError(".v2ray.core.proxy.dokodemo.Config.address: object expected");
                            message.address = $root.v2ray.core.common.net.IPOrDomain.fromObject(object.address);
                        }
                        if (object.port != null)
                            message.port = object.port >>> 0;
                        if (object.networkList != null) {
                            if (typeof object.networkList !== "object")
                                throw TypeError(".v2ray.core.proxy.dokodemo.Config.networkList: object expected");
                            message.networkList = $root.v2ray.core.common.net.NetworkList.fromObject(object.networkList);
                        }
                        if (object.networks) {
                            if (!Array.isArray(object.networks))
                                throw TypeError(".v2ray.core.proxy.dokodemo.Config.networks: array expected");
                            message.networks = [];
                            for (var i = 0; i < object.networks.length; ++i)
                                switch (object.networks[i]) {
                                default:
                                case "Unknown":
                                case 0:
                                    message.networks[i] = 0;
                                    break;
                                case "RawTCP":
                                case 1:
                                    message.networks[i] = 1;
                                    break;
                                case "TCP":
                                case 2:
                                    message.networks[i] = 2;
                                    break;
                                case "UDP":
                                case 3:
                                    message.networks[i] = 3;
                                    break;
                                }
                        }
                        if (object.timeout != null)
                            message.timeout = object.timeout >>> 0;
                        if (object.followRedirect != null)
                            message.followRedirect = Boolean(object.followRedirect);
                        if (object.userLevel != null)
                            message.userLevel = object.userLevel >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @static
                     * @param {v2ray.core.proxy.dokodemo.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.networks = [];
                        if (options.defaults) {
                            object.address = null;
                            object.port = 0;
                            object.networkList = null;
                            object.timeout = 0;
                            object.followRedirect = false;
                            object.userLevel = 0;
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = $root.v2ray.core.common.net.IPOrDomain.toObject(message.address, options);
                        if (message.port != null && message.hasOwnProperty("port"))
                            object.port = message.port;
                        if (message.networkList != null && message.hasOwnProperty("networkList"))
                            object.networkList = $root.v2ray.core.common.net.NetworkList.toObject(message.networkList, options);
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            object.timeout = message.timeout;
                        if (message.followRedirect != null && message.hasOwnProperty("followRedirect"))
                            object.followRedirect = message.followRedirect;
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            object.userLevel = message.userLevel;
                        if (message.networks && message.networks.length) {
                            object.networks = [];
                            for (var j = 0; j < message.networks.length; ++j)
                                object.networks[j] = options.enums === String ? $root.v2ray.core.common.net.Network[message.networks[j]] : message.networks[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.dokodemo.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Config;
                })();

                return dokodemo;
            })();

            proxy.freedom = (function() {

                /**
                 * Namespace freedom.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var freedom = {};

                freedom.DestinationOverride = (function() {

                    /**
                     * Properties of a DestinationOverride.
                     * @memberof v2ray.core.proxy.freedom
                     * @interface IDestinationOverride
                     * @property {v2ray.core.common.protocol.IServerEndpoint|null} [server] DestinationOverride server
                     */

                    /**
                     * Constructs a new DestinationOverride.
                     * @memberof v2ray.core.proxy.freedom
                     * @classdesc Represents a DestinationOverride.
                     * @implements IDestinationOverride
                     * @constructor
                     * @param {v2ray.core.proxy.freedom.IDestinationOverride=} [properties] Properties to set
                     */
                    function DestinationOverride(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DestinationOverride server.
                     * @member {v2ray.core.common.protocol.IServerEndpoint|null|undefined} server
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @instance
                     */
                    DestinationOverride.prototype.server = null;

                    /**
                     * Creates a new DestinationOverride instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {v2ray.core.proxy.freedom.IDestinationOverride=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.freedom.DestinationOverride} DestinationOverride instance
                     */
                    DestinationOverride.create = function create(properties) {
                        return new DestinationOverride(properties);
                    };

                    /**
                     * Encodes the specified DestinationOverride message. Does not implicitly {@link v2ray.core.proxy.freedom.DestinationOverride.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {v2ray.core.proxy.freedom.IDestinationOverride} message DestinationOverride message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DestinationOverride.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.server != null && message.hasOwnProperty("server"))
                            $root.v2ray.core.common.protocol.ServerEndpoint.encode(message.server, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified DestinationOverride message, length delimited. Does not implicitly {@link v2ray.core.proxy.freedom.DestinationOverride.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {v2ray.core.proxy.freedom.IDestinationOverride} message DestinationOverride message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DestinationOverride.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DestinationOverride message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.freedom.DestinationOverride} DestinationOverride
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DestinationOverride.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.freedom.DestinationOverride();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.server = $root.v2ray.core.common.protocol.ServerEndpoint.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DestinationOverride message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.freedom.DestinationOverride} DestinationOverride
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DestinationOverride.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DestinationOverride message.
                     * @function verify
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DestinationOverride.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.server != null && message.hasOwnProperty("server")) {
                            var error = $root.v2ray.core.common.protocol.ServerEndpoint.verify(message.server);
                            if (error)
                                return "server." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a DestinationOverride message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.freedom.DestinationOverride} DestinationOverride
                     */
                    DestinationOverride.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.freedom.DestinationOverride)
                            return object;
                        var message = new $root.v2ray.core.proxy.freedom.DestinationOverride();
                        if (object.server != null) {
                            if (typeof object.server !== "object")
                                throw TypeError(".v2ray.core.proxy.freedom.DestinationOverride.server: object expected");
                            message.server = $root.v2ray.core.common.protocol.ServerEndpoint.fromObject(object.server);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a DestinationOverride message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @static
                     * @param {v2ray.core.proxy.freedom.DestinationOverride} message DestinationOverride
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DestinationOverride.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.server = null;
                        if (message.server != null && message.hasOwnProperty("server"))
                            object.server = $root.v2ray.core.common.protocol.ServerEndpoint.toObject(message.server, options);
                        return object;
                    };

                    /**
                     * Converts this DestinationOverride to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.freedom.DestinationOverride
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DestinationOverride.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DestinationOverride;
                })();

                freedom.Config = (function() {

                    /**
                     * Properties of a Config.
                     * @memberof v2ray.core.proxy.freedom
                     * @interface IConfig
                     * @property {v2ray.core.proxy.freedom.Config.DomainStrategy|null} [domainStrategy] Config domainStrategy
                     * @property {number|null} [timeout] Config timeout
                     * @property {v2ray.core.proxy.freedom.IDestinationOverride|null} [destinationOverride] Config destinationOverride
                     * @property {number|null} [userLevel] Config userLevel
                     */

                    /**
                     * Constructs a new Config.
                     * @memberof v2ray.core.proxy.freedom
                     * @classdesc Represents a Config.
                     * @implements IConfig
                     * @constructor
                     * @param {v2ray.core.proxy.freedom.IConfig=} [properties] Properties to set
                     */
                    function Config(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Config domainStrategy.
                     * @member {v2ray.core.proxy.freedom.Config.DomainStrategy} domainStrategy
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @instance
                     */
                    Config.prototype.domainStrategy = 0;

                    /**
                     * Config timeout.
                     * @member {number} timeout
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @instance
                     */
                    Config.prototype.timeout = 0;

                    /**
                     * Config destinationOverride.
                     * @member {v2ray.core.proxy.freedom.IDestinationOverride|null|undefined} destinationOverride
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @instance
                     */
                    Config.prototype.destinationOverride = null;

                    /**
                     * Config userLevel.
                     * @member {number} userLevel
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @instance
                     */
                    Config.prototype.userLevel = 0;

                    /**
                     * Creates a new Config instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {v2ray.core.proxy.freedom.IConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.freedom.Config} Config instance
                     */
                    Config.create = function create(properties) {
                        return new Config(properties);
                    };

                    /**
                     * Encodes the specified Config message. Does not implicitly {@link v2ray.core.proxy.freedom.Config.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {v2ray.core.proxy.freedom.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.domainStrategy != null && message.hasOwnProperty("domainStrategy"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.domainStrategy);
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.timeout);
                        if (message.destinationOverride != null && message.hasOwnProperty("destinationOverride"))
                            $root.v2ray.core.proxy.freedom.DestinationOverride.encode(message.destinationOverride, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.userLevel);
                        return writer;
                    };

                    /**
                     * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.proxy.freedom.Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {v2ray.core.proxy.freedom.IConfig} message Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.freedom.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.freedom.Config();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.domainStrategy = reader.int32();
                                break;
                            case 2:
                                message.timeout = reader.uint32();
                                break;
                            case 3:
                                message.destinationOverride = $root.v2ray.core.proxy.freedom.DestinationOverride.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.userLevel = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.freedom.Config} Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Config message.
                     * @function verify
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.domainStrategy != null && message.hasOwnProperty("domainStrategy"))
                            switch (message.domainStrategy) {
                            default:
                                return "domainStrategy: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            if (!$util.isInteger(message.timeout))
                                return "timeout: integer expected";
                        if (message.destinationOverride != null && message.hasOwnProperty("destinationOverride")) {
                            var error = $root.v2ray.core.proxy.freedom.DestinationOverride.verify(message.destinationOverride);
                            if (error)
                                return "destinationOverride." + error;
                        }
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            if (!$util.isInteger(message.userLevel))
                                return "userLevel: integer expected";
                        return null;
                    };

                    /**
                     * Creates a Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.freedom.Config} Config
                     */
                    Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.freedom.Config)
                            return object;
                        var message = new $root.v2ray.core.proxy.freedom.Config();
                        switch (object.domainStrategy) {
                        case "AS_IS":
                        case 0:
                            message.domainStrategy = 0;
                            break;
                        case "USE_IP":
                        case 1:
                            message.domainStrategy = 1;
                            break;
                        case "USE_IP4":
                        case 2:
                            message.domainStrategy = 2;
                            break;
                        case "USE_IP6":
                        case 3:
                            message.domainStrategy = 3;
                            break;
                        }
                        if (object.timeout != null)
                            message.timeout = object.timeout >>> 0;
                        if (object.destinationOverride != null) {
                            if (typeof object.destinationOverride !== "object")
                                throw TypeError(".v2ray.core.proxy.freedom.Config.destinationOverride: object expected");
                            message.destinationOverride = $root.v2ray.core.proxy.freedom.DestinationOverride.fromObject(object.destinationOverride);
                        }
                        if (object.userLevel != null)
                            message.userLevel = object.userLevel >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @static
                     * @param {v2ray.core.proxy.freedom.Config} message Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.domainStrategy = options.enums === String ? "AS_IS" : 0;
                            object.timeout = 0;
                            object.destinationOverride = null;
                            object.userLevel = 0;
                        }
                        if (message.domainStrategy != null && message.hasOwnProperty("domainStrategy"))
                            object.domainStrategy = options.enums === String ? $root.v2ray.core.proxy.freedom.Config.DomainStrategy[message.domainStrategy] : message.domainStrategy;
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            object.timeout = message.timeout;
                        if (message.destinationOverride != null && message.hasOwnProperty("destinationOverride"))
                            object.destinationOverride = $root.v2ray.core.proxy.freedom.DestinationOverride.toObject(message.destinationOverride, options);
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            object.userLevel = message.userLevel;
                        return object;
                    };

                    /**
                     * Converts this Config to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.freedom.Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * DomainStrategy enum.
                     * @name v2ray.core.proxy.freedom.Config.DomainStrategy
                     * @enum {string}
                     * @property {number} AS_IS=0 AS_IS value
                     * @property {number} USE_IP=1 USE_IP value
                     * @property {number} USE_IP4=2 USE_IP4 value
                     * @property {number} USE_IP6=3 USE_IP6 value
                     */
                    Config.DomainStrategy = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "AS_IS"] = 0;
                        values[valuesById[1] = "USE_IP"] = 1;
                        values[valuesById[2] = "USE_IP4"] = 2;
                        values[valuesById[3] = "USE_IP6"] = 3;
                        return values;
                    })();

                    return Config;
                })();

                return freedom;
            })();

            proxy.http = (function() {

                /**
                 * Namespace http.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var http = {};

                http.ServerConfig = (function() {

                    /**
                     * Properties of a ServerConfig.
                     * @memberof v2ray.core.proxy.http
                     * @interface IServerConfig
                     * @property {number|null} [timeout] ServerConfig timeout
                     * @property {Object.<string,string>|null} [accounts] ServerConfig accounts
                     * @property {boolean|null} [allowTransparent] ServerConfig allowTransparent
                     * @property {number|null} [userLevel] ServerConfig userLevel
                     */

                    /**
                     * Constructs a new ServerConfig.
                     * @memberof v2ray.core.proxy.http
                     * @classdesc Represents a ServerConfig.
                     * @implements IServerConfig
                     * @constructor
                     * @param {v2ray.core.proxy.http.IServerConfig=} [properties] Properties to set
                     */
                    function ServerConfig(properties) {
                        this.accounts = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ServerConfig timeout.
                     * @member {number} timeout
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.timeout = 0;

                    /**
                     * ServerConfig accounts.
                     * @member {Object.<string,string>} accounts
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.accounts = $util.emptyObject;

                    /**
                     * ServerConfig allowTransparent.
                     * @member {boolean} allowTransparent
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.allowTransparent = false;

                    /**
                     * ServerConfig userLevel.
                     * @member {number} userLevel
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.userLevel = 0;

                    /**
                     * Creates a new ServerConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.http.IServerConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.http.ServerConfig} ServerConfig instance
                     */
                    ServerConfig.create = function create(properties) {
                        return new ServerConfig(properties);
                    };

                    /**
                     * Encodes the specified ServerConfig message. Does not implicitly {@link v2ray.core.proxy.http.ServerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.http.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.timeout);
                        if (message.accounts != null && message.hasOwnProperty("accounts"))
                            for (var keys = Object.keys(message.accounts), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.accounts[keys[i]]).ldelim();
                        if (message.allowTransparent != null && message.hasOwnProperty("allowTransparent"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.allowTransparent);
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.userLevel);
                        return writer;
                    };

                    /**
                     * Encodes the specified ServerConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.http.ServerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.http.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.http.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.http.ServerConfig(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.timeout = reader.uint32();
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.accounts === $util.emptyObject)
                                    message.accounts = {};
                                key = reader.string();
                                reader.pos++;
                                message.accounts[key] = reader.string();
                                break;
                            case 3:
                                message.allowTransparent = reader.bool();
                                break;
                            case 4:
                                message.userLevel = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.http.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ServerConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ServerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            if (!$util.isInteger(message.timeout))
                                return "timeout: integer expected";
                        if (message.accounts != null && message.hasOwnProperty("accounts")) {
                            if (!$util.isObject(message.accounts))
                                return "accounts: object expected";
                            var key = Object.keys(message.accounts);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.accounts[key[i]]))
                                    return "accounts: string{k:string} expected";
                        }
                        if (message.allowTransparent != null && message.hasOwnProperty("allowTransparent"))
                            if (typeof message.allowTransparent !== "boolean")
                                return "allowTransparent: boolean expected";
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            if (!$util.isInteger(message.userLevel))
                                return "userLevel: integer expected";
                        return null;
                    };

                    /**
                     * Creates a ServerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.http.ServerConfig} ServerConfig
                     */
                    ServerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.http.ServerConfig)
                            return object;
                        var message = new $root.v2ray.core.proxy.http.ServerConfig();
                        if (object.timeout != null)
                            message.timeout = object.timeout >>> 0;
                        if (object.accounts) {
                            if (typeof object.accounts !== "object")
                                throw TypeError(".v2ray.core.proxy.http.ServerConfig.accounts: object expected");
                            message.accounts = {};
                            for (var keys = Object.keys(object.accounts), i = 0; i < keys.length; ++i)
                                message.accounts[keys[i]] = String(object.accounts[keys[i]]);
                        }
                        if (object.allowTransparent != null)
                            message.allowTransparent = Boolean(object.allowTransparent);
                        if (object.userLevel != null)
                            message.userLevel = object.userLevel >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a ServerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.http.ServerConfig} message ServerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ServerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.accounts = {};
                        if (options.defaults) {
                            object.timeout = 0;
                            object.allowTransparent = false;
                            object.userLevel = 0;
                        }
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            object.timeout = message.timeout;
                        var keys2;
                        if (message.accounts && (keys2 = Object.keys(message.accounts)).length) {
                            object.accounts = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.accounts[keys2[j]] = message.accounts[keys2[j]];
                        }
                        if (message.allowTransparent != null && message.hasOwnProperty("allowTransparent"))
                            object.allowTransparent = message.allowTransparent;
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            object.userLevel = message.userLevel;
                        return object;
                    };

                    /**
                     * Converts this ServerConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.http.ServerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ServerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ServerConfig;
                })();

                http.ClientConfig = (function() {

                    /**
                     * Properties of a ClientConfig.
                     * @memberof v2ray.core.proxy.http
                     * @interface IClientConfig
                     */

                    /**
                     * Constructs a new ClientConfig.
                     * @memberof v2ray.core.proxy.http
                     * @classdesc Represents a ClientConfig.
                     * @implements IClientConfig
                     * @constructor
                     * @param {v2ray.core.proxy.http.IClientConfig=} [properties] Properties to set
                     */
                    function ClientConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new ClientConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.http.IClientConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.http.ClientConfig} ClientConfig instance
                     */
                    ClientConfig.create = function create(properties) {
                        return new ClientConfig(properties);
                    };

                    /**
                     * Encodes the specified ClientConfig message. Does not implicitly {@link v2ray.core.proxy.http.ClientConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.http.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.http.ClientConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.http.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.http.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.http.ClientConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.http.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a ClientConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.http.ClientConfig} ClientConfig
                     */
                    ClientConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.http.ClientConfig)
                            return object;
                        return new $root.v2ray.core.proxy.http.ClientConfig();
                    };

                    /**
                     * Creates a plain object from a ClientConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.http.ClientConfig} message ClientConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientConfig.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this ClientConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.http.ClientConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientConfig;
                })();

                return http;
            })();

            proxy.mtproto = (function() {

                /**
                 * Namespace mtproto.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var mtproto = {};

                mtproto.Account = (function() {

                    /**
                     * Properties of an Account.
                     * @memberof v2ray.core.proxy.mtproto
                     * @interface IAccount
                     * @property {Uint8Array|null} [secret] Account secret
                     */

                    /**
                     * Constructs a new Account.
                     * @memberof v2ray.core.proxy.mtproto
                     * @classdesc Represents an Account.
                     * @implements IAccount
                     * @constructor
                     * @param {v2ray.core.proxy.mtproto.IAccount=} [properties] Properties to set
                     */
                    function Account(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Account secret.
                     * @member {Uint8Array} secret
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @instance
                     */
                    Account.prototype.secret = $util.newBuffer([]);

                    /**
                     * Creates a new Account instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IAccount=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.mtproto.Account} Account instance
                     */
                    Account.create = function create(properties) {
                        return new Account(properties);
                    };

                    /**
                     * Encodes the specified Account message. Does not implicitly {@link v2ray.core.proxy.mtproto.Account.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.secret != null && message.hasOwnProperty("secret"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.secret);
                        return writer;
                    };

                    /**
                     * Encodes the specified Account message, length delimited. Does not implicitly {@link v2ray.core.proxy.mtproto.Account.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.mtproto.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.mtproto.Account();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.secret = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.mtproto.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Account message.
                     * @function verify
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Account.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.secret != null && message.hasOwnProperty("secret"))
                            if (!(message.secret && typeof message.secret.length === "number" || $util.isString(message.secret)))
                                return "secret: buffer expected";
                        return null;
                    };

                    /**
                     * Creates an Account message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.mtproto.Account} Account
                     */
                    Account.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.mtproto.Account)
                            return object;
                        var message = new $root.v2ray.core.proxy.mtproto.Account();
                        if (object.secret != null)
                            if (typeof object.secret === "string")
                                $util.base64.decode(object.secret, message.secret = $util.newBuffer($util.base64.length(object.secret)), 0);
                            else if (object.secret.length)
                                message.secret = object.secret;
                        return message;
                    };

                    /**
                     * Creates a plain object from an Account message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @static
                     * @param {v2ray.core.proxy.mtproto.Account} message Account
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Account.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.secret = "";
                            else {
                                object.secret = [];
                                if (options.bytes !== Array)
                                    object.secret = $util.newBuffer(object.secret);
                            }
                        if (message.secret != null && message.hasOwnProperty("secret"))
                            object.secret = options.bytes === String ? $util.base64.encode(message.secret, 0, message.secret.length) : options.bytes === Array ? Array.prototype.slice.call(message.secret) : message.secret;
                        return object;
                    };

                    /**
                     * Converts this Account to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.mtproto.Account
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Account.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Account;
                })();

                mtproto.ServerConfig = (function() {

                    /**
                     * Properties of a ServerConfig.
                     * @memberof v2ray.core.proxy.mtproto
                     * @interface IServerConfig
                     * @property {Array.<v2ray.core.common.protocol.IUser>|null} [user] ServerConfig user
                     */

                    /**
                     * Constructs a new ServerConfig.
                     * @memberof v2ray.core.proxy.mtproto
                     * @classdesc Represents a ServerConfig.
                     * @implements IServerConfig
                     * @constructor
                     * @param {v2ray.core.proxy.mtproto.IServerConfig=} [properties] Properties to set
                     */
                    function ServerConfig(properties) {
                        this.user = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ServerConfig user.
                     * @member {Array.<v2ray.core.common.protocol.IUser>} user
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.user = $util.emptyArray;

                    /**
                     * Creates a new ServerConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IServerConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.mtproto.ServerConfig} ServerConfig instance
                     */
                    ServerConfig.create = function create(properties) {
                        return new ServerConfig(properties);
                    };

                    /**
                     * Encodes the specified ServerConfig message. Does not implicitly {@link v2ray.core.proxy.mtproto.ServerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.user != null && message.user.length)
                            for (var i = 0; i < message.user.length; ++i)
                                $root.v2ray.core.common.protocol.User.encode(message.user[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ServerConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.mtproto.ServerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.mtproto.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.mtproto.ServerConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.user && message.user.length))
                                    message.user = [];
                                message.user.push($root.v2ray.core.common.protocol.User.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.mtproto.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ServerConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ServerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            if (!Array.isArray(message.user))
                                return "user: array expected";
                            for (var i = 0; i < message.user.length; ++i) {
                                var error = $root.v2ray.core.common.protocol.User.verify(message.user[i]);
                                if (error)
                                    return "user." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a ServerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.mtproto.ServerConfig} ServerConfig
                     */
                    ServerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.mtproto.ServerConfig)
                            return object;
                        var message = new $root.v2ray.core.proxy.mtproto.ServerConfig();
                        if (object.user) {
                            if (!Array.isArray(object.user))
                                throw TypeError(".v2ray.core.proxy.mtproto.ServerConfig.user: array expected");
                            message.user = [];
                            for (var i = 0; i < object.user.length; ++i) {
                                if (typeof object.user[i] !== "object")
                                    throw TypeError(".v2ray.core.proxy.mtproto.ServerConfig.user: object expected");
                                message.user[i] = $root.v2ray.core.common.protocol.User.fromObject(object.user[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ServerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.ServerConfig} message ServerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ServerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.user = [];
                        if (message.user && message.user.length) {
                            object.user = [];
                            for (var j = 0; j < message.user.length; ++j)
                                object.user[j] = $root.v2ray.core.common.protocol.User.toObject(message.user[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this ServerConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.mtproto.ServerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ServerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ServerConfig;
                })();

                mtproto.ClientConfig = (function() {

                    /**
                     * Properties of a ClientConfig.
                     * @memberof v2ray.core.proxy.mtproto
                     * @interface IClientConfig
                     */

                    /**
                     * Constructs a new ClientConfig.
                     * @memberof v2ray.core.proxy.mtproto
                     * @classdesc Represents a ClientConfig.
                     * @implements IClientConfig
                     * @constructor
                     * @param {v2ray.core.proxy.mtproto.IClientConfig=} [properties] Properties to set
                     */
                    function ClientConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new ClientConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IClientConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.mtproto.ClientConfig} ClientConfig instance
                     */
                    ClientConfig.create = function create(properties) {
                        return new ClientConfig(properties);
                    };

                    /**
                     * Encodes the specified ClientConfig message. Does not implicitly {@link v2ray.core.proxy.mtproto.ClientConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.mtproto.ClientConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.mtproto.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.mtproto.ClientConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.mtproto.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a ClientConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.mtproto.ClientConfig} ClientConfig
                     */
                    ClientConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.mtproto.ClientConfig)
                            return object;
                        return new $root.v2ray.core.proxy.mtproto.ClientConfig();
                    };

                    /**
                     * Creates a plain object from a ClientConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.mtproto.ClientConfig} message ClientConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientConfig.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this ClientConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.mtproto.ClientConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientConfig;
                })();

                return mtproto;
            })();

            proxy.shadowsocks = (function() {

                /**
                 * Namespace shadowsocks.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var shadowsocks = {};

                shadowsocks.Account = (function() {

                    /**
                     * Properties of an Account.
                     * @memberof v2ray.core.proxy.shadowsocks
                     * @interface IAccount
                     * @property {string|null} [password] Account password
                     * @property {v2ray.core.proxy.shadowsocks.CipherType|null} [cipherType] Account cipherType
                     * @property {v2ray.core.proxy.shadowsocks.Account.OneTimeAuth|null} [ota] Account ota
                     */

                    /**
                     * Constructs a new Account.
                     * @memberof v2ray.core.proxy.shadowsocks
                     * @classdesc Represents an Account.
                     * @implements IAccount
                     * @constructor
                     * @param {v2ray.core.proxy.shadowsocks.IAccount=} [properties] Properties to set
                     */
                    function Account(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Account password.
                     * @member {string} password
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @instance
                     */
                    Account.prototype.password = "";

                    /**
                     * Account cipherType.
                     * @member {v2ray.core.proxy.shadowsocks.CipherType} cipherType
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @instance
                     */
                    Account.prototype.cipherType = 0;

                    /**
                     * Account ota.
                     * @member {v2ray.core.proxy.shadowsocks.Account.OneTimeAuth} ota
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @instance
                     */
                    Account.prototype.ota = 0;

                    /**
                     * Creates a new Account instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IAccount=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.shadowsocks.Account} Account instance
                     */
                    Account.create = function create(properties) {
                        return new Account(properties);
                    };

                    /**
                     * Encodes the specified Account message. Does not implicitly {@link v2ray.core.proxy.shadowsocks.Account.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.password != null && message.hasOwnProperty("password"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.password);
                        if (message.cipherType != null && message.hasOwnProperty("cipherType"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cipherType);
                        if (message.ota != null && message.hasOwnProperty("ota"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.ota);
                        return writer;
                    };

                    /**
                     * Encodes the specified Account message, length delimited. Does not implicitly {@link v2ray.core.proxy.shadowsocks.Account.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.shadowsocks.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.shadowsocks.Account();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.password = reader.string();
                                break;
                            case 2:
                                message.cipherType = reader.int32();
                                break;
                            case 3:
                                message.ota = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.shadowsocks.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Account message.
                     * @function verify
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Account.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.password != null && message.hasOwnProperty("password"))
                            if (!$util.isString(message.password))
                                return "password: string expected";
                        if (message.cipherType != null && message.hasOwnProperty("cipherType"))
                            switch (message.cipherType) {
                            default:
                                return "cipherType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                break;
                            }
                        if (message.ota != null && message.hasOwnProperty("ota"))
                            switch (message.ota) {
                            default:
                                return "ota: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates an Account message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.shadowsocks.Account} Account
                     */
                    Account.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.shadowsocks.Account)
                            return object;
                        var message = new $root.v2ray.core.proxy.shadowsocks.Account();
                        if (object.password != null)
                            message.password = String(object.password);
                        switch (object.cipherType) {
                        case "UNKNOWN":
                        case 0:
                            message.cipherType = 0;
                            break;
                        case "AES_128_CFB":
                        case 1:
                            message.cipherType = 1;
                            break;
                        case "AES_256_CFB":
                        case 2:
                            message.cipherType = 2;
                            break;
                        case "CHACHA20":
                        case 3:
                            message.cipherType = 3;
                            break;
                        case "CHACHA20_IETF":
                        case 4:
                            message.cipherType = 4;
                            break;
                        case "AES_128_GCM":
                        case 5:
                            message.cipherType = 5;
                            break;
                        case "AES_256_GCM":
                        case 6:
                            message.cipherType = 6;
                            break;
                        case "CHACHA20_POLY1305":
                        case 7:
                            message.cipherType = 7;
                            break;
                        case "NONE":
                        case 8:
                            message.cipherType = 8;
                            break;
                        }
                        switch (object.ota) {
                        case "Auto":
                        case 0:
                            message.ota = 0;
                            break;
                        case "Disabled":
                        case 1:
                            message.ota = 1;
                            break;
                        case "Enabled":
                        case 2:
                            message.ota = 2;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an Account message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.Account} message Account
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Account.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.password = "";
                            object.cipherType = options.enums === String ? "UNKNOWN" : 0;
                            object.ota = options.enums === String ? "Auto" : 0;
                        }
                        if (message.password != null && message.hasOwnProperty("password"))
                            object.password = message.password;
                        if (message.cipherType != null && message.hasOwnProperty("cipherType"))
                            object.cipherType = options.enums === String ? $root.v2ray.core.proxy.shadowsocks.CipherType[message.cipherType] : message.cipherType;
                        if (message.ota != null && message.hasOwnProperty("ota"))
                            object.ota = options.enums === String ? $root.v2ray.core.proxy.shadowsocks.Account.OneTimeAuth[message.ota] : message.ota;
                        return object;
                    };

                    /**
                     * Converts this Account to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.shadowsocks.Account
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Account.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * OneTimeAuth enum.
                     * @name v2ray.core.proxy.shadowsocks.Account.OneTimeAuth
                     * @enum {string}
                     * @property {number} Auto=0 Auto value
                     * @property {number} Disabled=1 Disabled value
                     * @property {number} Enabled=2 Enabled value
                     */
                    Account.OneTimeAuth = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "Auto"] = 0;
                        values[valuesById[1] = "Disabled"] = 1;
                        values[valuesById[2] = "Enabled"] = 2;
                        return values;
                    })();

                    return Account;
                })();

                /**
                 * CipherType enum.
                 * @name v2ray.core.proxy.shadowsocks.CipherType
                 * @enum {string}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} AES_128_CFB=1 AES_128_CFB value
                 * @property {number} AES_256_CFB=2 AES_256_CFB value
                 * @property {number} CHACHA20=3 CHACHA20 value
                 * @property {number} CHACHA20_IETF=4 CHACHA20_IETF value
                 * @property {number} AES_128_GCM=5 AES_128_GCM value
                 * @property {number} AES_256_GCM=6 AES_256_GCM value
                 * @property {number} CHACHA20_POLY1305=7 CHACHA20_POLY1305 value
                 * @property {number} NONE=8 NONE value
                 */
                shadowsocks.CipherType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "AES_128_CFB"] = 1;
                    values[valuesById[2] = "AES_256_CFB"] = 2;
                    values[valuesById[3] = "CHACHA20"] = 3;
                    values[valuesById[4] = "CHACHA20_IETF"] = 4;
                    values[valuesById[5] = "AES_128_GCM"] = 5;
                    values[valuesById[6] = "AES_256_GCM"] = 6;
                    values[valuesById[7] = "CHACHA20_POLY1305"] = 7;
                    values[valuesById[8] = "NONE"] = 8;
                    return values;
                })();

                shadowsocks.ServerConfig = (function() {

                    /**
                     * Properties of a ServerConfig.
                     * @memberof v2ray.core.proxy.shadowsocks
                     * @interface IServerConfig
                     * @property {boolean|null} [udpEnabled] ServerConfig udpEnabled
                     * @property {v2ray.core.common.protocol.IUser|null} [user] ServerConfig user
                     * @property {Array.<v2ray.core.common.net.Network>|null} [network] ServerConfig network
                     */

                    /**
                     * Constructs a new ServerConfig.
                     * @memberof v2ray.core.proxy.shadowsocks
                     * @classdesc Represents a ServerConfig.
                     * @implements IServerConfig
                     * @constructor
                     * @param {v2ray.core.proxy.shadowsocks.IServerConfig=} [properties] Properties to set
                     */
                    function ServerConfig(properties) {
                        this.network = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ServerConfig udpEnabled.
                     * @member {boolean} udpEnabled
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.udpEnabled = false;

                    /**
                     * ServerConfig user.
                     * @member {v2ray.core.common.protocol.IUser|null|undefined} user
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.user = null;

                    /**
                     * ServerConfig network.
                     * @member {Array.<v2ray.core.common.net.Network>} network
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.network = $util.emptyArray;

                    /**
                     * Creates a new ServerConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IServerConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.shadowsocks.ServerConfig} ServerConfig instance
                     */
                    ServerConfig.create = function create(properties) {
                        return new ServerConfig(properties);
                    };

                    /**
                     * Encodes the specified ServerConfig message. Does not implicitly {@link v2ray.core.proxy.shadowsocks.ServerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.udpEnabled != null && message.hasOwnProperty("udpEnabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.udpEnabled);
                        if (message.user != null && message.hasOwnProperty("user"))
                            $root.v2ray.core.common.protocol.User.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.network != null && message.network.length) {
                            writer.uint32(/* id 3, wireType 2 =*/26).fork();
                            for (var i = 0; i < message.network.length; ++i)
                                writer.int32(message.network[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified ServerConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.shadowsocks.ServerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.shadowsocks.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.shadowsocks.ServerConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.udpEnabled = reader.bool();
                                break;
                            case 2:
                                message.user = $root.v2ray.core.common.protocol.User.decode(reader, reader.uint32());
                                break;
                            case 3:
                                if (!(message.network && message.network.length))
                                    message.network = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.network.push(reader.int32());
                                } else
                                    message.network.push(reader.int32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.shadowsocks.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ServerConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ServerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.udpEnabled != null && message.hasOwnProperty("udpEnabled"))
                            if (typeof message.udpEnabled !== "boolean")
                                return "udpEnabled: boolean expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            var error = $root.v2ray.core.common.protocol.User.verify(message.user);
                            if (error)
                                return "user." + error;
                        }
                        if (message.network != null && message.hasOwnProperty("network")) {
                            if (!Array.isArray(message.network))
                                return "network: array expected";
                            for (var i = 0; i < message.network.length; ++i)
                                switch (message.network[i]) {
                                default:
                                    return "network: enum value[] expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                        }
                        return null;
                    };

                    /**
                     * Creates a ServerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.shadowsocks.ServerConfig} ServerConfig
                     */
                    ServerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.shadowsocks.ServerConfig)
                            return object;
                        var message = new $root.v2ray.core.proxy.shadowsocks.ServerConfig();
                        if (object.udpEnabled != null)
                            message.udpEnabled = Boolean(object.udpEnabled);
                        if (object.user != null) {
                            if (typeof object.user !== "object")
                                throw TypeError(".v2ray.core.proxy.shadowsocks.ServerConfig.user: object expected");
                            message.user = $root.v2ray.core.common.protocol.User.fromObject(object.user);
                        }
                        if (object.network) {
                            if (!Array.isArray(object.network))
                                throw TypeError(".v2ray.core.proxy.shadowsocks.ServerConfig.network: array expected");
                            message.network = [];
                            for (var i = 0; i < object.network.length; ++i)
                                switch (object.network[i]) {
                                default:
                                case "Unknown":
                                case 0:
                                    message.network[i] = 0;
                                    break;
                                case "RawTCP":
                                case 1:
                                    message.network[i] = 1;
                                    break;
                                case "TCP":
                                case 2:
                                    message.network[i] = 2;
                                    break;
                                case "UDP":
                                case 3:
                                    message.network[i] = 3;
                                    break;
                                }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ServerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.ServerConfig} message ServerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ServerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.network = [];
                        if (options.defaults) {
                            object.udpEnabled = false;
                            object.user = null;
                        }
                        if (message.udpEnabled != null && message.hasOwnProperty("udpEnabled"))
                            object.udpEnabled = message.udpEnabled;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = $root.v2ray.core.common.protocol.User.toObject(message.user, options);
                        if (message.network && message.network.length) {
                            object.network = [];
                            for (var j = 0; j < message.network.length; ++j)
                                object.network[j] = options.enums === String ? $root.v2ray.core.common.net.Network[message.network[j]] : message.network[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this ServerConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.shadowsocks.ServerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ServerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ServerConfig;
                })();

                shadowsocks.ClientConfig = (function() {

                    /**
                     * Properties of a ClientConfig.
                     * @memberof v2ray.core.proxy.shadowsocks
                     * @interface IClientConfig
                     * @property {Array.<v2ray.core.common.protocol.IServerEndpoint>|null} [server] ClientConfig server
                     */

                    /**
                     * Constructs a new ClientConfig.
                     * @memberof v2ray.core.proxy.shadowsocks
                     * @classdesc Represents a ClientConfig.
                     * @implements IClientConfig
                     * @constructor
                     * @param {v2ray.core.proxy.shadowsocks.IClientConfig=} [properties] Properties to set
                     */
                    function ClientConfig(properties) {
                        this.server = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientConfig server.
                     * @member {Array.<v2ray.core.common.protocol.IServerEndpoint>} server
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @instance
                     */
                    ClientConfig.prototype.server = $util.emptyArray;

                    /**
                     * Creates a new ClientConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IClientConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.shadowsocks.ClientConfig} ClientConfig instance
                     */
                    ClientConfig.create = function create(properties) {
                        return new ClientConfig(properties);
                    };

                    /**
                     * Encodes the specified ClientConfig message. Does not implicitly {@link v2ray.core.proxy.shadowsocks.ClientConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.server != null && message.server.length)
                            for (var i = 0; i < message.server.length; ++i)
                                $root.v2ray.core.common.protocol.ServerEndpoint.encode(message.server[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.shadowsocks.ClientConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.shadowsocks.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.shadowsocks.ClientConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.server && message.server.length))
                                    message.server = [];
                                message.server.push($root.v2ray.core.common.protocol.ServerEndpoint.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.shadowsocks.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.server != null && message.hasOwnProperty("server")) {
                            if (!Array.isArray(message.server))
                                return "server: array expected";
                            for (var i = 0; i < message.server.length; ++i) {
                                var error = $root.v2ray.core.common.protocol.ServerEndpoint.verify(message.server[i]);
                                if (error)
                                    return "server." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.shadowsocks.ClientConfig} ClientConfig
                     */
                    ClientConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.shadowsocks.ClientConfig)
                            return object;
                        var message = new $root.v2ray.core.proxy.shadowsocks.ClientConfig();
                        if (object.server) {
                            if (!Array.isArray(object.server))
                                throw TypeError(".v2ray.core.proxy.shadowsocks.ClientConfig.server: array expected");
                            message.server = [];
                            for (var i = 0; i < object.server.length; ++i) {
                                if (typeof object.server[i] !== "object")
                                    throw TypeError(".v2ray.core.proxy.shadowsocks.ClientConfig.server: object expected");
                                message.server[i] = $root.v2ray.core.common.protocol.ServerEndpoint.fromObject(object.server[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.shadowsocks.ClientConfig} message ClientConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.server = [];
                        if (message.server && message.server.length) {
                            object.server = [];
                            for (var j = 0; j < message.server.length; ++j)
                                object.server[j] = $root.v2ray.core.common.protocol.ServerEndpoint.toObject(message.server[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this ClientConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.shadowsocks.ClientConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientConfig;
                })();

                return shadowsocks;
            })();

            proxy.socks = (function() {

                /**
                 * Namespace socks.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var socks = {};

                socks.Account = (function() {

                    /**
                     * Properties of an Account.
                     * @memberof v2ray.core.proxy.socks
                     * @interface IAccount
                     * @property {string|null} [username] Account username
                     * @property {string|null} [password] Account password
                     */

                    /**
                     * Constructs a new Account.
                     * @memberof v2ray.core.proxy.socks
                     * @classdesc Represents an Account.
                     * @implements IAccount
                     * @constructor
                     * @param {v2ray.core.proxy.socks.IAccount=} [properties] Properties to set
                     */
                    function Account(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Account username.
                     * @member {string} username
                     * @memberof v2ray.core.proxy.socks.Account
                     * @instance
                     */
                    Account.prototype.username = "";

                    /**
                     * Account password.
                     * @member {string} password
                     * @memberof v2ray.core.proxy.socks.Account
                     * @instance
                     */
                    Account.prototype.password = "";

                    /**
                     * Creates a new Account instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {v2ray.core.proxy.socks.IAccount=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.socks.Account} Account instance
                     */
                    Account.create = function create(properties) {
                        return new Account(properties);
                    };

                    /**
                     * Encodes the specified Account message. Does not implicitly {@link v2ray.core.proxy.socks.Account.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {v2ray.core.proxy.socks.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.username != null && message.hasOwnProperty("username"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
                        if (message.password != null && message.hasOwnProperty("password"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
                        return writer;
                    };

                    /**
                     * Encodes the specified Account message, length delimited. Does not implicitly {@link v2ray.core.proxy.socks.Account.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {v2ray.core.proxy.socks.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.socks.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.socks.Account();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.username = reader.string();
                                break;
                            case 2:
                                message.password = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.socks.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Account message.
                     * @function verify
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Account.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.username != null && message.hasOwnProperty("username"))
                            if (!$util.isString(message.username))
                                return "username: string expected";
                        if (message.password != null && message.hasOwnProperty("password"))
                            if (!$util.isString(message.password))
                                return "password: string expected";
                        return null;
                    };

                    /**
                     * Creates an Account message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.socks.Account} Account
                     */
                    Account.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.socks.Account)
                            return object;
                        var message = new $root.v2ray.core.proxy.socks.Account();
                        if (object.username != null)
                            message.username = String(object.username);
                        if (object.password != null)
                            message.password = String(object.password);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Account message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.socks.Account
                     * @static
                     * @param {v2ray.core.proxy.socks.Account} message Account
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Account.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.username = "";
                            object.password = "";
                        }
                        if (message.username != null && message.hasOwnProperty("username"))
                            object.username = message.username;
                        if (message.password != null && message.hasOwnProperty("password"))
                            object.password = message.password;
                        return object;
                    };

                    /**
                     * Converts this Account to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.socks.Account
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Account.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Account;
                })();

                /**
                 * AuthType enum.
                 * @name v2ray.core.proxy.socks.AuthType
                 * @enum {string}
                 * @property {number} NO_AUTH=0 NO_AUTH value
                 * @property {number} PASSWORD=1 PASSWORD value
                 */
                socks.AuthType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NO_AUTH"] = 0;
                    values[valuesById[1] = "PASSWORD"] = 1;
                    return values;
                })();

                socks.ServerConfig = (function() {

                    /**
                     * Properties of a ServerConfig.
                     * @memberof v2ray.core.proxy.socks
                     * @interface IServerConfig
                     * @property {v2ray.core.proxy.socks.AuthType|null} [authType] ServerConfig authType
                     * @property {Object.<string,string>|null} [accounts] ServerConfig accounts
                     * @property {v2ray.core.common.net.IIPOrDomain|null} [address] ServerConfig address
                     * @property {boolean|null} [udpEnabled] ServerConfig udpEnabled
                     * @property {number|null} [timeout] ServerConfig timeout
                     * @property {number|null} [userLevel] ServerConfig userLevel
                     */

                    /**
                     * Constructs a new ServerConfig.
                     * @memberof v2ray.core.proxy.socks
                     * @classdesc Represents a ServerConfig.
                     * @implements IServerConfig
                     * @constructor
                     * @param {v2ray.core.proxy.socks.IServerConfig=} [properties] Properties to set
                     */
                    function ServerConfig(properties) {
                        this.accounts = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ServerConfig authType.
                     * @member {v2ray.core.proxy.socks.AuthType} authType
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.authType = 0;

                    /**
                     * ServerConfig accounts.
                     * @member {Object.<string,string>} accounts
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.accounts = $util.emptyObject;

                    /**
                     * ServerConfig address.
                     * @member {v2ray.core.common.net.IIPOrDomain|null|undefined} address
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.address = null;

                    /**
                     * ServerConfig udpEnabled.
                     * @member {boolean} udpEnabled
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.udpEnabled = false;

                    /**
                     * ServerConfig timeout.
                     * @member {number} timeout
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.timeout = 0;

                    /**
                     * ServerConfig userLevel.
                     * @member {number} userLevel
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @instance
                     */
                    ServerConfig.prototype.userLevel = 0;

                    /**
                     * Creates a new ServerConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.IServerConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.socks.ServerConfig} ServerConfig instance
                     */
                    ServerConfig.create = function create(properties) {
                        return new ServerConfig(properties);
                    };

                    /**
                     * Encodes the specified ServerConfig message. Does not implicitly {@link v2ray.core.proxy.socks.ServerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.authType != null && message.hasOwnProperty("authType"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.authType);
                        if (message.accounts != null && message.hasOwnProperty("accounts"))
                            for (var keys = Object.keys(message.accounts), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.accounts[keys[i]]).ldelim();
                        if (message.address != null && message.hasOwnProperty("address"))
                            $root.v2ray.core.common.net.IPOrDomain.encode(message.address, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.udpEnabled != null && message.hasOwnProperty("udpEnabled"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.udpEnabled);
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.timeout);
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.userLevel);
                        return writer;
                    };

                    /**
                     * Encodes the specified ServerConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.socks.ServerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.IServerConfig} message ServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ServerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.socks.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.socks.ServerConfig(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.authType = reader.int32();
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.accounts === $util.emptyObject)
                                    message.accounts = {};
                                key = reader.string();
                                reader.pos++;
                                message.accounts[key] = reader.string();
                                break;
                            case 3:
                                message.address = $root.v2ray.core.common.net.IPOrDomain.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.udpEnabled = reader.bool();
                                break;
                            case 5:
                                message.timeout = reader.uint32();
                                break;
                            case 6:
                                message.userLevel = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ServerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.socks.ServerConfig} ServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ServerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ServerConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ServerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.authType != null && message.hasOwnProperty("authType"))
                            switch (message.authType) {
                            default:
                                return "authType: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.accounts != null && message.hasOwnProperty("accounts")) {
                            if (!$util.isObject(message.accounts))
                                return "accounts: object expected";
                            var key = Object.keys(message.accounts);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.accounts[key[i]]))
                                    return "accounts: string{k:string} expected";
                        }
                        if (message.address != null && message.hasOwnProperty("address")) {
                            var error = $root.v2ray.core.common.net.IPOrDomain.verify(message.address);
                            if (error)
                                return "address." + error;
                        }
                        if (message.udpEnabled != null && message.hasOwnProperty("udpEnabled"))
                            if (typeof message.udpEnabled !== "boolean")
                                return "udpEnabled: boolean expected";
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            if (!$util.isInteger(message.timeout))
                                return "timeout: integer expected";
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            if (!$util.isInteger(message.userLevel))
                                return "userLevel: integer expected";
                        return null;
                    };

                    /**
                     * Creates a ServerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.socks.ServerConfig} ServerConfig
                     */
                    ServerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.socks.ServerConfig)
                            return object;
                        var message = new $root.v2ray.core.proxy.socks.ServerConfig();
                        switch (object.authType) {
                        case "NO_AUTH":
                        case 0:
                            message.authType = 0;
                            break;
                        case "PASSWORD":
                        case 1:
                            message.authType = 1;
                            break;
                        }
                        if (object.accounts) {
                            if (typeof object.accounts !== "object")
                                throw TypeError(".v2ray.core.proxy.socks.ServerConfig.accounts: object expected");
                            message.accounts = {};
                            for (var keys = Object.keys(object.accounts), i = 0; i < keys.length; ++i)
                                message.accounts[keys[i]] = String(object.accounts[keys[i]]);
                        }
                        if (object.address != null) {
                            if (typeof object.address !== "object")
                                throw TypeError(".v2ray.core.proxy.socks.ServerConfig.address: object expected");
                            message.address = $root.v2ray.core.common.net.IPOrDomain.fromObject(object.address);
                        }
                        if (object.udpEnabled != null)
                            message.udpEnabled = Boolean(object.udpEnabled);
                        if (object.timeout != null)
                            message.timeout = object.timeout >>> 0;
                        if (object.userLevel != null)
                            message.userLevel = object.userLevel >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a ServerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.ServerConfig} message ServerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ServerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.accounts = {};
                        if (options.defaults) {
                            object.authType = options.enums === String ? "NO_AUTH" : 0;
                            object.address = null;
                            object.udpEnabled = false;
                            object.timeout = 0;
                            object.userLevel = 0;
                        }
                        if (message.authType != null && message.hasOwnProperty("authType"))
                            object.authType = options.enums === String ? $root.v2ray.core.proxy.socks.AuthType[message.authType] : message.authType;
                        var keys2;
                        if (message.accounts && (keys2 = Object.keys(message.accounts)).length) {
                            object.accounts = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.accounts[keys2[j]] = message.accounts[keys2[j]];
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = $root.v2ray.core.common.net.IPOrDomain.toObject(message.address, options);
                        if (message.udpEnabled != null && message.hasOwnProperty("udpEnabled"))
                            object.udpEnabled = message.udpEnabled;
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            object.timeout = message.timeout;
                        if (message.userLevel != null && message.hasOwnProperty("userLevel"))
                            object.userLevel = message.userLevel;
                        return object;
                    };

                    /**
                     * Converts this ServerConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.socks.ServerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ServerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ServerConfig;
                })();

                socks.ClientConfig = (function() {

                    /**
                     * Properties of a ClientConfig.
                     * @memberof v2ray.core.proxy.socks
                     * @interface IClientConfig
                     * @property {Array.<v2ray.core.common.protocol.IServerEndpoint>|null} [server] ClientConfig server
                     */

                    /**
                     * Constructs a new ClientConfig.
                     * @memberof v2ray.core.proxy.socks
                     * @classdesc Represents a ClientConfig.
                     * @implements IClientConfig
                     * @constructor
                     * @param {v2ray.core.proxy.socks.IClientConfig=} [properties] Properties to set
                     */
                    function ClientConfig(properties) {
                        this.server = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientConfig server.
                     * @member {Array.<v2ray.core.common.protocol.IServerEndpoint>} server
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @instance
                     */
                    ClientConfig.prototype.server = $util.emptyArray;

                    /**
                     * Creates a new ClientConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.IClientConfig=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.socks.ClientConfig} ClientConfig instance
                     */
                    ClientConfig.create = function create(properties) {
                        return new ClientConfig(properties);
                    };

                    /**
                     * Encodes the specified ClientConfig message. Does not implicitly {@link v2ray.core.proxy.socks.ClientConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.server != null && message.server.length)
                            for (var i = 0; i < message.server.length; ++i)
                                $root.v2ray.core.common.protocol.ServerEndpoint.encode(message.server[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.socks.ClientConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.IClientConfig} message ClientConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.socks.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.socks.ClientConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.server && message.server.length))
                                    message.server = [];
                                message.server.push($root.v2ray.core.common.protocol.ServerEndpoint.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.socks.ClientConfig} ClientConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientConfig message.
                     * @function verify
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.server != null && message.hasOwnProperty("server")) {
                            if (!Array.isArray(message.server))
                                return "server: array expected";
                            for (var i = 0; i < message.server.length; ++i) {
                                var error = $root.v2ray.core.common.protocol.ServerEndpoint.verify(message.server[i]);
                                if (error)
                                    return "server." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.socks.ClientConfig} ClientConfig
                     */
                    ClientConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.socks.ClientConfig)
                            return object;
                        var message = new $root.v2ray.core.proxy.socks.ClientConfig();
                        if (object.server) {
                            if (!Array.isArray(object.server))
                                throw TypeError(".v2ray.core.proxy.socks.ClientConfig.server: array expected");
                            message.server = [];
                            for (var i = 0; i < object.server.length; ++i) {
                                if (typeof object.server[i] !== "object")
                                    throw TypeError(".v2ray.core.proxy.socks.ClientConfig.server: object expected");
                                message.server[i] = $root.v2ray.core.common.protocol.ServerEndpoint.fromObject(object.server[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @static
                     * @param {v2ray.core.proxy.socks.ClientConfig} message ClientConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.server = [];
                        if (message.server && message.server.length) {
                            object.server = [];
                            for (var j = 0; j < message.server.length; ++j)
                                object.server[j] = $root.v2ray.core.common.protocol.ServerEndpoint.toObject(message.server[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this ClientConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.socks.ClientConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientConfig;
                })();

                return socks;
            })();

            proxy.vmess = (function() {

                /**
                 * Namespace vmess.
                 * @memberof v2ray.core.proxy
                 * @namespace
                 */
                var vmess = {};

                vmess.Account = (function() {

                    /**
                     * Properties of an Account.
                     * @memberof v2ray.core.proxy.vmess
                     * @interface IAccount
                     * @property {string|null} [id] Account id
                     * @property {number|null} [alterId] Account alterId
                     * @property {v2ray.core.common.protocol.ISecurityConfig|null} [securitySettings] Account securitySettings
                     */

                    /**
                     * Constructs a new Account.
                     * @memberof v2ray.core.proxy.vmess
                     * @classdesc Represents an Account.
                     * @implements IAccount
                     * @constructor
                     * @param {v2ray.core.proxy.vmess.IAccount=} [properties] Properties to set
                     */
                    function Account(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Account id.
                     * @member {string} id
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @instance
                     */
                    Account.prototype.id = "";

                    /**
                     * Account alterId.
                     * @member {number} alterId
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @instance
                     */
                    Account.prototype.alterId = 0;

                    /**
                     * Account securitySettings.
                     * @member {v2ray.core.common.protocol.ISecurityConfig|null|undefined} securitySettings
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @instance
                     */
                    Account.prototype.securitySettings = null;

                    /**
                     * Creates a new Account instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {v2ray.core.proxy.vmess.IAccount=} [properties] Properties to set
                     * @returns {v2ray.core.proxy.vmess.Account} Account instance
                     */
                    Account.create = function create(properties) {
                        return new Account(properties);
                    };

                    /**
                     * Encodes the specified Account message. Does not implicitly {@link v2ray.core.proxy.vmess.Account.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {v2ray.core.proxy.vmess.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && message.hasOwnProperty("id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.alterId != null && message.hasOwnProperty("alterId"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.alterId);
                        if (message.securitySettings != null && message.hasOwnProperty("securitySettings"))
                            $root.v2ray.core.common.protocol.SecurityConfig.encode(message.securitySettings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Account message, length delimited. Does not implicitly {@link v2ray.core.proxy.vmess.Account.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {v2ray.core.proxy.vmess.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.proxy.vmess.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.vmess.Account();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.alterId = reader.uint32();
                                break;
                            case 3:
                                message.securitySettings = $root.v2ray.core.common.protocol.SecurityConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Account message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.proxy.vmess.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Account message.
                     * @function verify
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Account.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.alterId != null && message.hasOwnProperty("alterId"))
                            if (!$util.isInteger(message.alterId))
                                return "alterId: integer expected";
                        if (message.securitySettings != null && message.hasOwnProperty("securitySettings")) {
                            var error = $root.v2ray.core.common.protocol.SecurityConfig.verify(message.securitySettings);
                            if (error)
                                return "securitySettings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an Account message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.proxy.vmess.Account} Account
                     */
                    Account.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.proxy.vmess.Account)
                            return object;
                        var message = new $root.v2ray.core.proxy.vmess.Account();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.alterId != null)
                            message.alterId = object.alterId >>> 0;
                        if (object.securitySettings != null) {
                            if (typeof object.securitySettings !== "object")
                                throw TypeError(".v2ray.core.proxy.vmess.Account.securitySettings: object expected");
                            message.securitySettings = $root.v2ray.core.common.protocol.SecurityConfig.fromObject(object.securitySettings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an Account message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @static
                     * @param {v2ray.core.proxy.vmess.Account} message Account
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Account.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.alterId = 0;
                            object.securitySettings = null;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.alterId != null && message.hasOwnProperty("alterId"))
                            object.alterId = message.alterId;
                        if (message.securitySettings != null && message.hasOwnProperty("securitySettings"))
                            object.securitySettings = $root.v2ray.core.common.protocol.SecurityConfig.toObject(message.securitySettings, options);
                        return object;
                    };

                    /**
                     * Converts this Account to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.proxy.vmess.Account
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Account.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Account;
                })();

                vmess.inbound = (function() {

                    /**
                     * Namespace inbound.
                     * @memberof v2ray.core.proxy.vmess
                     * @namespace
                     */
                    var inbound = {};

                    inbound.DetourConfig = (function() {

                        /**
                         * Properties of a DetourConfig.
                         * @memberof v2ray.core.proxy.vmess.inbound
                         * @interface IDetourConfig
                         * @property {string|null} [to] DetourConfig to
                         */

                        /**
                         * Constructs a new DetourConfig.
                         * @memberof v2ray.core.proxy.vmess.inbound
                         * @classdesc Represents a DetourConfig.
                         * @implements IDetourConfig
                         * @constructor
                         * @param {v2ray.core.proxy.vmess.inbound.IDetourConfig=} [properties] Properties to set
                         */
                        function DetourConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DetourConfig to.
                         * @member {string} to
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @instance
                         */
                        DetourConfig.prototype.to = "";

                        /**
                         * Creates a new DetourConfig instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IDetourConfig=} [properties] Properties to set
                         * @returns {v2ray.core.proxy.vmess.inbound.DetourConfig} DetourConfig instance
                         */
                        DetourConfig.create = function create(properties) {
                            return new DetourConfig(properties);
                        };

                        /**
                         * Encodes the specified DetourConfig message. Does not implicitly {@link v2ray.core.proxy.vmess.inbound.DetourConfig.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IDetourConfig} message DetourConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetourConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.to != null && message.hasOwnProperty("to"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.to);
                            return writer;
                        };

                        /**
                         * Encodes the specified DetourConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.vmess.inbound.DetourConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IDetourConfig} message DetourConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetourConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DetourConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.proxy.vmess.inbound.DetourConfig} DetourConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetourConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.vmess.inbound.DetourConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.to = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DetourConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.proxy.vmess.inbound.DetourConfig} DetourConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetourConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DetourConfig message.
                         * @function verify
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DetourConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.to != null && message.hasOwnProperty("to"))
                                if (!$util.isString(message.to))
                                    return "to: string expected";
                            return null;
                        };

                        /**
                         * Creates a DetourConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.proxy.vmess.inbound.DetourConfig} DetourConfig
                         */
                        DetourConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.proxy.vmess.inbound.DetourConfig)
                                return object;
                            var message = new $root.v2ray.core.proxy.vmess.inbound.DetourConfig();
                            if (object.to != null)
                                message.to = String(object.to);
                            return message;
                        };

                        /**
                         * Creates a plain object from a DetourConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.DetourConfig} message DetourConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DetourConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.to = "";
                            if (message.to != null && message.hasOwnProperty("to"))
                                object.to = message.to;
                            return object;
                        };

                        /**
                         * Converts this DetourConfig to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.proxy.vmess.inbound.DetourConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DetourConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return DetourConfig;
                    })();

                    inbound.DefaultConfig = (function() {

                        /**
                         * Properties of a DefaultConfig.
                         * @memberof v2ray.core.proxy.vmess.inbound
                         * @interface IDefaultConfig
                         * @property {number|null} [alterId] DefaultConfig alterId
                         * @property {number|null} [level] DefaultConfig level
                         */

                        /**
                         * Constructs a new DefaultConfig.
                         * @memberof v2ray.core.proxy.vmess.inbound
                         * @classdesc Represents a DefaultConfig.
                         * @implements IDefaultConfig
                         * @constructor
                         * @param {v2ray.core.proxy.vmess.inbound.IDefaultConfig=} [properties] Properties to set
                         */
                        function DefaultConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DefaultConfig alterId.
                         * @member {number} alterId
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @instance
                         */
                        DefaultConfig.prototype.alterId = 0;

                        /**
                         * DefaultConfig level.
                         * @member {number} level
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @instance
                         */
                        DefaultConfig.prototype.level = 0;

                        /**
                         * Creates a new DefaultConfig instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IDefaultConfig=} [properties] Properties to set
                         * @returns {v2ray.core.proxy.vmess.inbound.DefaultConfig} DefaultConfig instance
                         */
                        DefaultConfig.create = function create(properties) {
                            return new DefaultConfig(properties);
                        };

                        /**
                         * Encodes the specified DefaultConfig message. Does not implicitly {@link v2ray.core.proxy.vmess.inbound.DefaultConfig.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IDefaultConfig} message DefaultConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DefaultConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.alterId != null && message.hasOwnProperty("alterId"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.alterId);
                            if (message.level != null && message.hasOwnProperty("level"))
                                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.level);
                            return writer;
                        };

                        /**
                         * Encodes the specified DefaultConfig message, length delimited. Does not implicitly {@link v2ray.core.proxy.vmess.inbound.DefaultConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IDefaultConfig} message DefaultConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DefaultConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DefaultConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.proxy.vmess.inbound.DefaultConfig} DefaultConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DefaultConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.vmess.inbound.DefaultConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.alterId = reader.uint32();
                                    break;
                                case 2:
                                    message.level = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DefaultConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.proxy.vmess.inbound.DefaultConfig} DefaultConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DefaultConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DefaultConfig message.
                         * @function verify
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DefaultConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.alterId != null && message.hasOwnProperty("alterId"))
                                if (!$util.isInteger(message.alterId))
                                    return "alterId: integer expected";
                            if (message.level != null && message.hasOwnProperty("level"))
                                if (!$util.isInteger(message.level))
                                    return "level: integer expected";
                            return null;
                        };

                        /**
                         * Creates a DefaultConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.proxy.vmess.inbound.DefaultConfig} DefaultConfig
                         */
                        DefaultConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.proxy.vmess.inbound.DefaultConfig)
                                return object;
                            var message = new $root.v2ray.core.proxy.vmess.inbound.DefaultConfig();
                            if (object.alterId != null)
                                message.alterId = object.alterId >>> 0;
                            if (object.level != null)
                                message.level = object.level >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a DefaultConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.DefaultConfig} message DefaultConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DefaultConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.alterId = 0;
                                object.level = 0;
                            }
                            if (message.alterId != null && message.hasOwnProperty("alterId"))
                                object.alterId = message.alterId;
                            if (message.level != null && message.hasOwnProperty("level"))
                                object.level = message.level;
                            return object;
                        };

                        /**
                         * Converts this DefaultConfig to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.proxy.vmess.inbound.DefaultConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DefaultConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return DefaultConfig;
                    })();

                    inbound.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.proxy.vmess.inbound
                         * @interface IConfig
                         * @property {Array.<v2ray.core.common.protocol.IUser>|null} [user] Config user
                         * @property {v2ray.core.proxy.vmess.inbound.IDefaultConfig|null} ["default"] Config default
                         * @property {v2ray.core.proxy.vmess.inbound.IDetourConfig|null} [detour] Config detour
                         * @property {boolean|null} [secureEncryptionOnly] Config secureEncryptionOnly
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.proxy.vmess.inbound
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.proxy.vmess.inbound.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            this.user = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config user.
                         * @member {Array.<v2ray.core.common.protocol.IUser>} user
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @instance
                         */
                        Config.prototype.user = $util.emptyArray;

                        /**
                         * Config default.
                         * @member {v2ray.core.proxy.vmess.inbound.IDefaultConfig|null|undefined} default
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @instance
                         */
                        Config.prototype["default"] = null;

                        /**
                         * Config detour.
                         * @member {v2ray.core.proxy.vmess.inbound.IDetourConfig|null|undefined} detour
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @instance
                         */
                        Config.prototype.detour = null;

                        /**
                         * Config secureEncryptionOnly.
                         * @member {boolean} secureEncryptionOnly
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @instance
                         */
                        Config.prototype.secureEncryptionOnly = false;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.proxy.vmess.inbound.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.proxy.vmess.inbound.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.user != null && message.user.length)
                                for (var i = 0; i < message.user.length; ++i)
                                    $root.v2ray.core.common.protocol.User.encode(message.user[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message["default"] != null && message.hasOwnProperty("default"))
                                $root.v2ray.core.proxy.vmess.inbound.DefaultConfig.encode(message["default"], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.detour != null && message.hasOwnProperty("detour"))
                                $root.v2ray.core.proxy.vmess.inbound.DetourConfig.encode(message.detour, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.secureEncryptionOnly != null && message.hasOwnProperty("secureEncryptionOnly"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.secureEncryptionOnly);
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.proxy.vmess.inbound.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.proxy.vmess.inbound.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.vmess.inbound.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.user && message.user.length))
                                        message.user = [];
                                    message.user.push($root.v2ray.core.common.protocol.User.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message["default"] = $root.v2ray.core.proxy.vmess.inbound.DefaultConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.detour = $root.v2ray.core.proxy.vmess.inbound.DetourConfig.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.secureEncryptionOnly = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.proxy.vmess.inbound.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.user != null && message.hasOwnProperty("user")) {
                                if (!Array.isArray(message.user))
                                    return "user: array expected";
                                for (var i = 0; i < message.user.length; ++i) {
                                    var error = $root.v2ray.core.common.protocol.User.verify(message.user[i]);
                                    if (error)
                                        return "user." + error;
                                }
                            }
                            if (message["default"] != null && message.hasOwnProperty("default")) {
                                var error = $root.v2ray.core.proxy.vmess.inbound.DefaultConfig.verify(message["default"]);
                                if (error)
                                    return "default." + error;
                            }
                            if (message.detour != null && message.hasOwnProperty("detour")) {
                                var error = $root.v2ray.core.proxy.vmess.inbound.DetourConfig.verify(message.detour);
                                if (error)
                                    return "detour." + error;
                            }
                            if (message.secureEncryptionOnly != null && message.hasOwnProperty("secureEncryptionOnly"))
                                if (typeof message.secureEncryptionOnly !== "boolean")
                                    return "secureEncryptionOnly: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.proxy.vmess.inbound.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.proxy.vmess.inbound.Config)
                                return object;
                            var message = new $root.v2ray.core.proxy.vmess.inbound.Config();
                            if (object.user) {
                                if (!Array.isArray(object.user))
                                    throw TypeError(".v2ray.core.proxy.vmess.inbound.Config.user: array expected");
                                message.user = [];
                                for (var i = 0; i < object.user.length; ++i) {
                                    if (typeof object.user[i] !== "object")
                                        throw TypeError(".v2ray.core.proxy.vmess.inbound.Config.user: object expected");
                                    message.user[i] = $root.v2ray.core.common.protocol.User.fromObject(object.user[i]);
                                }
                            }
                            if (object["default"] != null) {
                                if (typeof object["default"] !== "object")
                                    throw TypeError(".v2ray.core.proxy.vmess.inbound.Config.default: object expected");
                                message["default"] = $root.v2ray.core.proxy.vmess.inbound.DefaultConfig.fromObject(object["default"]);
                            }
                            if (object.detour != null) {
                                if (typeof object.detour !== "object")
                                    throw TypeError(".v2ray.core.proxy.vmess.inbound.Config.detour: object expected");
                                message.detour = $root.v2ray.core.proxy.vmess.inbound.DetourConfig.fromObject(object.detour);
                            }
                            if (object.secureEncryptionOnly != null)
                                message.secureEncryptionOnly = Boolean(object.secureEncryptionOnly);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.inbound.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.user = [];
                            if (options.defaults) {
                                object["default"] = null;
                                object.detour = null;
                                object.secureEncryptionOnly = false;
                            }
                            if (message.user && message.user.length) {
                                object.user = [];
                                for (var j = 0; j < message.user.length; ++j)
                                    object.user[j] = $root.v2ray.core.common.protocol.User.toObject(message.user[j], options);
                            }
                            if (message["default"] != null && message.hasOwnProperty("default"))
                                object["default"] = $root.v2ray.core.proxy.vmess.inbound.DefaultConfig.toObject(message["default"], options);
                            if (message.detour != null && message.hasOwnProperty("detour"))
                                object.detour = $root.v2ray.core.proxy.vmess.inbound.DetourConfig.toObject(message.detour, options);
                            if (message.secureEncryptionOnly != null && message.hasOwnProperty("secureEncryptionOnly"))
                                object.secureEncryptionOnly = message.secureEncryptionOnly;
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.proxy.vmess.inbound.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return inbound;
                })();

                vmess.outbound = (function() {

                    /**
                     * Namespace outbound.
                     * @memberof v2ray.core.proxy.vmess
                     * @namespace
                     */
                    var outbound = {};

                    outbound.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.proxy.vmess.outbound
                         * @interface IConfig
                         * @property {Array.<v2ray.core.common.protocol.IServerEndpoint>|null} [Receiver] Config Receiver
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.proxy.vmess.outbound
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.proxy.vmess.outbound.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            this.Receiver = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config Receiver.
                         * @member {Array.<v2ray.core.common.protocol.IServerEndpoint>} Receiver
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @instance
                         */
                        Config.prototype.Receiver = $util.emptyArray;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.outbound.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.proxy.vmess.outbound.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.proxy.vmess.outbound.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.outbound.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.Receiver != null && message.Receiver.length)
                                for (var i = 0; i < message.Receiver.length; ++i)
                                    $root.v2ray.core.common.protocol.ServerEndpoint.encode(message.Receiver[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.proxy.vmess.outbound.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.outbound.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.proxy.vmess.outbound.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.proxy.vmess.outbound.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.Receiver && message.Receiver.length))
                                        message.Receiver = [];
                                    message.Receiver.push($root.v2ray.core.common.protocol.ServerEndpoint.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.proxy.vmess.outbound.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.Receiver != null && message.hasOwnProperty("Receiver")) {
                                if (!Array.isArray(message.Receiver))
                                    return "Receiver: array expected";
                                for (var i = 0; i < message.Receiver.length; ++i) {
                                    var error = $root.v2ray.core.common.protocol.ServerEndpoint.verify(message.Receiver[i]);
                                    if (error)
                                        return "Receiver." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.proxy.vmess.outbound.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.proxy.vmess.outbound.Config)
                                return object;
                            var message = new $root.v2ray.core.proxy.vmess.outbound.Config();
                            if (object.Receiver) {
                                if (!Array.isArray(object.Receiver))
                                    throw TypeError(".v2ray.core.proxy.vmess.outbound.Config.Receiver: array expected");
                                message.Receiver = [];
                                for (var i = 0; i < object.Receiver.length; ++i) {
                                    if (typeof object.Receiver[i] !== "object")
                                        throw TypeError(".v2ray.core.proxy.vmess.outbound.Config.Receiver: object expected");
                                    message.Receiver[i] = $root.v2ray.core.common.protocol.ServerEndpoint.fromObject(object.Receiver[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @static
                         * @param {v2ray.core.proxy.vmess.outbound.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.Receiver = [];
                            if (message.Receiver && message.Receiver.length) {
                                object.Receiver = [];
                                for (var j = 0; j < message.Receiver.length; ++j)
                                    object.Receiver[j] = $root.v2ray.core.common.protocol.ServerEndpoint.toObject(message.Receiver[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.proxy.vmess.outbound.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return outbound;
                })();

                return vmess;
            })();

            return proxy;
        })();

        core.transport = (function() {

            /**
             * Namespace transport.
             * @memberof v2ray.core
             * @namespace
             */
            var transport = {};

            transport.Config = (function() {

                /**
                 * Properties of a Config.
                 * @memberof v2ray.core.transport
                 * @interface IConfig
                 * @property {Array.<v2ray.core.transport.internet.ITransportConfig>|null} [transportSettings] Config transportSettings
                 */

                /**
                 * Constructs a new Config.
                 * @memberof v2ray.core.transport
                 * @classdesc Represents a Config.
                 * @implements IConfig
                 * @constructor
                 * @param {v2ray.core.transport.IConfig=} [properties] Properties to set
                 */
                function Config(properties) {
                    this.transportSettings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Config transportSettings.
                 * @member {Array.<v2ray.core.transport.internet.ITransportConfig>} transportSettings
                 * @memberof v2ray.core.transport.Config
                 * @instance
                 */
                Config.prototype.transportSettings = $util.emptyArray;

                /**
                 * Creates a new Config instance using the specified properties.
                 * @function create
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {v2ray.core.transport.IConfig=} [properties] Properties to set
                 * @returns {v2ray.core.transport.Config} Config instance
                 */
                Config.create = function create(properties) {
                    return new Config(properties);
                };

                /**
                 * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.Config.verify|verify} messages.
                 * @function encode
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {v2ray.core.transport.IConfig} message Config message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Config.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.transportSettings != null && message.transportSettings.length)
                        for (var i = 0; i < message.transportSettings.length; ++i)
                            $root.v2ray.core.transport.internet.TransportConfig.encode(message.transportSettings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.Config.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {v2ray.core.transport.IConfig} message Config message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Config.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Config message from the specified reader or buffer.
                 * @function decode
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v2ray.core.transport.Config} Config
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Config.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.Config();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.transportSettings && message.transportSettings.length))
                                message.transportSettings = [];
                            message.transportSettings.push($root.v2ray.core.transport.internet.TransportConfig.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Config message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v2ray.core.transport.Config} Config
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Config.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Config message.
                 * @function verify
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Config.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.transportSettings != null && message.hasOwnProperty("transportSettings")) {
                        if (!Array.isArray(message.transportSettings))
                            return "transportSettings: array expected";
                        for (var i = 0; i < message.transportSettings.length; ++i) {
                            var error = $root.v2ray.core.transport.internet.TransportConfig.verify(message.transportSettings[i]);
                            if (error)
                                return "transportSettings." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a Config message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v2ray.core.transport.Config} Config
                 */
                Config.fromObject = function fromObject(object) {
                    if (object instanceof $root.v2ray.core.transport.Config)
                        return object;
                    var message = new $root.v2ray.core.transport.Config();
                    if (object.transportSettings) {
                        if (!Array.isArray(object.transportSettings))
                            throw TypeError(".v2ray.core.transport.Config.transportSettings: array expected");
                        message.transportSettings = [];
                        for (var i = 0; i < object.transportSettings.length; ++i) {
                            if (typeof object.transportSettings[i] !== "object")
                                throw TypeError(".v2ray.core.transport.Config.transportSettings: object expected");
                            message.transportSettings[i] = $root.v2ray.core.transport.internet.TransportConfig.fromObject(object.transportSettings[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Config message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v2ray.core.transport.Config
                 * @static
                 * @param {v2ray.core.transport.Config} message Config
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Config.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.transportSettings = [];
                    if (message.transportSettings && message.transportSettings.length) {
                        object.transportSettings = [];
                        for (var j = 0; j < message.transportSettings.length; ++j)
                            object.transportSettings[j] = $root.v2ray.core.transport.internet.TransportConfig.toObject(message.transportSettings[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Config to JSON.
                 * @function toJSON
                 * @memberof v2ray.core.transport.Config
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Config.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Config;
            })();

            transport.internet = (function() {

                /**
                 * Namespace internet.
                 * @memberof v2ray.core.transport
                 * @namespace
                 */
                var internet = {};

                /**
                 * TransportProtocol enum.
                 * @name v2ray.core.transport.internet.TransportProtocol
                 * @enum {string}
                 * @property {number} TCP=0 TCP value
                 * @property {number} UDP=1 UDP value
                 * @property {number} MKCP=2 MKCP value
                 * @property {number} WebSocket=3 WebSocket value
                 * @property {number} HTTP=4 HTTP value
                 * @property {number} DomainSocket=5 DomainSocket value
                 */
                internet.TransportProtocol = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TCP"] = 0;
                    values[valuesById[1] = "UDP"] = 1;
                    values[valuesById[2] = "MKCP"] = 2;
                    values[valuesById[3] = "WebSocket"] = 3;
                    values[valuesById[4] = "HTTP"] = 4;
                    values[valuesById[5] = "DomainSocket"] = 5;
                    return values;
                })();

                internet.TransportConfig = (function() {

                    /**
                     * Properties of a TransportConfig.
                     * @memberof v2ray.core.transport.internet
                     * @interface ITransportConfig
                     * @property {v2ray.core.transport.internet.TransportProtocol|null} [protocol] TransportConfig protocol
                     * @property {string|null} [protocolName] TransportConfig protocolName
                     * @property {v2ray.core.common.serial.ITypedMessage|null} [settings] TransportConfig settings
                     */

                    /**
                     * Constructs a new TransportConfig.
                     * @memberof v2ray.core.transport.internet
                     * @classdesc Represents a TransportConfig.
                     * @implements ITransportConfig
                     * @constructor
                     * @param {v2ray.core.transport.internet.ITransportConfig=} [properties] Properties to set
                     */
                    function TransportConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TransportConfig protocol.
                     * @member {v2ray.core.transport.internet.TransportProtocol} protocol
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @instance
                     */
                    TransportConfig.prototype.protocol = 0;

                    /**
                     * TransportConfig protocolName.
                     * @member {string} protocolName
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @instance
                     */
                    TransportConfig.prototype.protocolName = "";

                    /**
                     * TransportConfig settings.
                     * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} settings
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @instance
                     */
                    TransportConfig.prototype.settings = null;

                    /**
                     * Creates a new TransportConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {v2ray.core.transport.internet.ITransportConfig=} [properties] Properties to set
                     * @returns {v2ray.core.transport.internet.TransportConfig} TransportConfig instance
                     */
                    TransportConfig.create = function create(properties) {
                        return new TransportConfig(properties);
                    };

                    /**
                     * Encodes the specified TransportConfig message. Does not implicitly {@link v2ray.core.transport.internet.TransportConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {v2ray.core.transport.internet.ITransportConfig} message TransportConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransportConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.protocol);
                        if (message.settings != null && message.hasOwnProperty("settings"))
                            $root.v2ray.core.common.serial.TypedMessage.encode(message.settings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.protocolName != null && message.hasOwnProperty("protocolName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.protocolName);
                        return writer;
                    };

                    /**
                     * Encodes the specified TransportConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.TransportConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {v2ray.core.transport.internet.ITransportConfig} message TransportConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransportConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TransportConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.transport.internet.TransportConfig} TransportConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransportConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.TransportConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.protocol = reader.int32();
                                break;
                            case 3:
                                message.protocolName = reader.string();
                                break;
                            case 2:
                                message.settings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TransportConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.transport.internet.TransportConfig} TransportConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransportConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TransportConfig message.
                     * @function verify
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransportConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            switch (message.protocol) {
                            default:
                                return "protocol: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.protocolName != null && message.hasOwnProperty("protocolName"))
                            if (!$util.isString(message.protocolName))
                                return "protocolName: string expected";
                        if (message.settings != null && message.hasOwnProperty("settings")) {
                            var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.settings);
                            if (error)
                                return "settings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a TransportConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.transport.internet.TransportConfig} TransportConfig
                     */
                    TransportConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.transport.internet.TransportConfig)
                            return object;
                        var message = new $root.v2ray.core.transport.internet.TransportConfig();
                        switch (object.protocol) {
                        case "TCP":
                        case 0:
                            message.protocol = 0;
                            break;
                        case "UDP":
                        case 1:
                            message.protocol = 1;
                            break;
                        case "MKCP":
                        case 2:
                            message.protocol = 2;
                            break;
                        case "WebSocket":
                        case 3:
                            message.protocol = 3;
                            break;
                        case "HTTP":
                        case 4:
                            message.protocol = 4;
                            break;
                        case "DomainSocket":
                        case 5:
                            message.protocol = 5;
                            break;
                        }
                        if (object.protocolName != null)
                            message.protocolName = String(object.protocolName);
                        if (object.settings != null) {
                            if (typeof object.settings !== "object")
                                throw TypeError(".v2ray.core.transport.internet.TransportConfig.settings: object expected");
                            message.settings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.settings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a TransportConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @static
                     * @param {v2ray.core.transport.internet.TransportConfig} message TransportConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransportConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.protocol = options.enums === String ? "TCP" : 0;
                            object.settings = null;
                            object.protocolName = "";
                        }
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            object.protocol = options.enums === String ? $root.v2ray.core.transport.internet.TransportProtocol[message.protocol] : message.protocol;
                        if (message.settings != null && message.hasOwnProperty("settings"))
                            object.settings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.settings, options);
                        if (message.protocolName != null && message.hasOwnProperty("protocolName"))
                            object.protocolName = message.protocolName;
                        return object;
                    };

                    /**
                     * Converts this TransportConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.transport.internet.TransportConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransportConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TransportConfig;
                })();

                internet.StreamConfig = (function() {

                    /**
                     * Properties of a StreamConfig.
                     * @memberof v2ray.core.transport.internet
                     * @interface IStreamConfig
                     * @property {v2ray.core.transport.internet.TransportProtocol|null} [protocol] StreamConfig protocol
                     * @property {string|null} [protocolName] StreamConfig protocolName
                     * @property {Array.<v2ray.core.transport.internet.ITransportConfig>|null} [transportSettings] StreamConfig transportSettings
                     * @property {string|null} [securityType] StreamConfig securityType
                     * @property {Array.<v2ray.core.common.serial.ITypedMessage>|null} [securitySettings] StreamConfig securitySettings
                     * @property {v2ray.core.transport.internet.ISocketConfig|null} [socketSettings] StreamConfig socketSettings
                     */

                    /**
                     * Constructs a new StreamConfig.
                     * @memberof v2ray.core.transport.internet
                     * @classdesc Represents a StreamConfig.
                     * @implements IStreamConfig
                     * @constructor
                     * @param {v2ray.core.transport.internet.IStreamConfig=} [properties] Properties to set
                     */
                    function StreamConfig(properties) {
                        this.transportSettings = [];
                        this.securitySettings = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * StreamConfig protocol.
                     * @member {v2ray.core.transport.internet.TransportProtocol} protocol
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @instance
                     */
                    StreamConfig.prototype.protocol = 0;

                    /**
                     * StreamConfig protocolName.
                     * @member {string} protocolName
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @instance
                     */
                    StreamConfig.prototype.protocolName = "";

                    /**
                     * StreamConfig transportSettings.
                     * @member {Array.<v2ray.core.transport.internet.ITransportConfig>} transportSettings
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @instance
                     */
                    StreamConfig.prototype.transportSettings = $util.emptyArray;

                    /**
                     * StreamConfig securityType.
                     * @member {string} securityType
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @instance
                     */
                    StreamConfig.prototype.securityType = "";

                    /**
                     * StreamConfig securitySettings.
                     * @member {Array.<v2ray.core.common.serial.ITypedMessage>} securitySettings
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @instance
                     */
                    StreamConfig.prototype.securitySettings = $util.emptyArray;

                    /**
                     * StreamConfig socketSettings.
                     * @member {v2ray.core.transport.internet.ISocketConfig|null|undefined} socketSettings
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @instance
                     */
                    StreamConfig.prototype.socketSettings = null;

                    /**
                     * Creates a new StreamConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {v2ray.core.transport.internet.IStreamConfig=} [properties] Properties to set
                     * @returns {v2ray.core.transport.internet.StreamConfig} StreamConfig instance
                     */
                    StreamConfig.create = function create(properties) {
                        return new StreamConfig(properties);
                    };

                    /**
                     * Encodes the specified StreamConfig message. Does not implicitly {@link v2ray.core.transport.internet.StreamConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {v2ray.core.transport.internet.IStreamConfig} message StreamConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.protocol);
                        if (message.transportSettings != null && message.transportSettings.length)
                            for (var i = 0; i < message.transportSettings.length; ++i)
                                $root.v2ray.core.transport.internet.TransportConfig.encode(message.transportSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.securityType != null && message.hasOwnProperty("securityType"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.securityType);
                        if (message.securitySettings != null && message.securitySettings.length)
                            for (var i = 0; i < message.securitySettings.length; ++i)
                                $root.v2ray.core.common.serial.TypedMessage.encode(message.securitySettings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.protocolName != null && message.hasOwnProperty("protocolName"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.protocolName);
                        if (message.socketSettings != null && message.hasOwnProperty("socketSettings"))
                            $root.v2ray.core.transport.internet.SocketConfig.encode(message.socketSettings, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified StreamConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.StreamConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {v2ray.core.transport.internet.IStreamConfig} message StreamConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a StreamConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.transport.internet.StreamConfig} StreamConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.StreamConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.protocol = reader.int32();
                                break;
                            case 5:
                                message.protocolName = reader.string();
                                break;
                            case 2:
                                if (!(message.transportSettings && message.transportSettings.length))
                                    message.transportSettings = [];
                                message.transportSettings.push($root.v2ray.core.transport.internet.TransportConfig.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.securityType = reader.string();
                                break;
                            case 4:
                                if (!(message.securitySettings && message.securitySettings.length))
                                    message.securitySettings = [];
                                message.securitySettings.push($root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                message.socketSettings = $root.v2ray.core.transport.internet.SocketConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a StreamConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.transport.internet.StreamConfig} StreamConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a StreamConfig message.
                     * @function verify
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StreamConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            switch (message.protocol) {
                            default:
                                return "protocol: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                break;
                            }
                        if (message.protocolName != null && message.hasOwnProperty("protocolName"))
                            if (!$util.isString(message.protocolName))
                                return "protocolName: string expected";
                        if (message.transportSettings != null && message.hasOwnProperty("transportSettings")) {
                            if (!Array.isArray(message.transportSettings))
                                return "transportSettings: array expected";
                            for (var i = 0; i < message.transportSettings.length; ++i) {
                                var error = $root.v2ray.core.transport.internet.TransportConfig.verify(message.transportSettings[i]);
                                if (error)
                                    return "transportSettings." + error;
                            }
                        }
                        if (message.securityType != null && message.hasOwnProperty("securityType"))
                            if (!$util.isString(message.securityType))
                                return "securityType: string expected";
                        if (message.securitySettings != null && message.hasOwnProperty("securitySettings")) {
                            if (!Array.isArray(message.securitySettings))
                                return "securitySettings: array expected";
                            for (var i = 0; i < message.securitySettings.length; ++i) {
                                var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.securitySettings[i]);
                                if (error)
                                    return "securitySettings." + error;
                            }
                        }
                        if (message.socketSettings != null && message.hasOwnProperty("socketSettings")) {
                            var error = $root.v2ray.core.transport.internet.SocketConfig.verify(message.socketSettings);
                            if (error)
                                return "socketSettings." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a StreamConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.transport.internet.StreamConfig} StreamConfig
                     */
                    StreamConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.transport.internet.StreamConfig)
                            return object;
                        var message = new $root.v2ray.core.transport.internet.StreamConfig();
                        switch (object.protocol) {
                        case "TCP":
                        case 0:
                            message.protocol = 0;
                            break;
                        case "UDP":
                        case 1:
                            message.protocol = 1;
                            break;
                        case "MKCP":
                        case 2:
                            message.protocol = 2;
                            break;
                        case "WebSocket":
                        case 3:
                            message.protocol = 3;
                            break;
                        case "HTTP":
                        case 4:
                            message.protocol = 4;
                            break;
                        case "DomainSocket":
                        case 5:
                            message.protocol = 5;
                            break;
                        }
                        if (object.protocolName != null)
                            message.protocolName = String(object.protocolName);
                        if (object.transportSettings) {
                            if (!Array.isArray(object.transportSettings))
                                throw TypeError(".v2ray.core.transport.internet.StreamConfig.transportSettings: array expected");
                            message.transportSettings = [];
                            for (var i = 0; i < object.transportSettings.length; ++i) {
                                if (typeof object.transportSettings[i] !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.StreamConfig.transportSettings: object expected");
                                message.transportSettings[i] = $root.v2ray.core.transport.internet.TransportConfig.fromObject(object.transportSettings[i]);
                            }
                        }
                        if (object.securityType != null)
                            message.securityType = String(object.securityType);
                        if (object.securitySettings) {
                            if (!Array.isArray(object.securitySettings))
                                throw TypeError(".v2ray.core.transport.internet.StreamConfig.securitySettings: array expected");
                            message.securitySettings = [];
                            for (var i = 0; i < object.securitySettings.length; ++i) {
                                if (typeof object.securitySettings[i] !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.StreamConfig.securitySettings: object expected");
                                message.securitySettings[i] = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.securitySettings[i]);
                            }
                        }
                        if (object.socketSettings != null) {
                            if (typeof object.socketSettings !== "object")
                                throw TypeError(".v2ray.core.transport.internet.StreamConfig.socketSettings: object expected");
                            message.socketSettings = $root.v2ray.core.transport.internet.SocketConfig.fromObject(object.socketSettings);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a StreamConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @static
                     * @param {v2ray.core.transport.internet.StreamConfig} message StreamConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StreamConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.transportSettings = [];
                            object.securitySettings = [];
                        }
                        if (options.defaults) {
                            object.protocol = options.enums === String ? "TCP" : 0;
                            object.securityType = "";
                            object.protocolName = "";
                            object.socketSettings = null;
                        }
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            object.protocol = options.enums === String ? $root.v2ray.core.transport.internet.TransportProtocol[message.protocol] : message.protocol;
                        if (message.transportSettings && message.transportSettings.length) {
                            object.transportSettings = [];
                            for (var j = 0; j < message.transportSettings.length; ++j)
                                object.transportSettings[j] = $root.v2ray.core.transport.internet.TransportConfig.toObject(message.transportSettings[j], options);
                        }
                        if (message.securityType != null && message.hasOwnProperty("securityType"))
                            object.securityType = message.securityType;
                        if (message.securitySettings && message.securitySettings.length) {
                            object.securitySettings = [];
                            for (var j = 0; j < message.securitySettings.length; ++j)
                                object.securitySettings[j] = $root.v2ray.core.common.serial.TypedMessage.toObject(message.securitySettings[j], options);
                        }
                        if (message.protocolName != null && message.hasOwnProperty("protocolName"))
                            object.protocolName = message.protocolName;
                        if (message.socketSettings != null && message.hasOwnProperty("socketSettings"))
                            object.socketSettings = $root.v2ray.core.transport.internet.SocketConfig.toObject(message.socketSettings, options);
                        return object;
                    };

                    /**
                     * Converts this StreamConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.transport.internet.StreamConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StreamConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return StreamConfig;
                })();

                internet.ProxyConfig = (function() {

                    /**
                     * Properties of a ProxyConfig.
                     * @memberof v2ray.core.transport.internet
                     * @interface IProxyConfig
                     * @property {string|null} [tag] ProxyConfig tag
                     */

                    /**
                     * Constructs a new ProxyConfig.
                     * @memberof v2ray.core.transport.internet
                     * @classdesc Represents a ProxyConfig.
                     * @implements IProxyConfig
                     * @constructor
                     * @param {v2ray.core.transport.internet.IProxyConfig=} [properties] Properties to set
                     */
                    function ProxyConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ProxyConfig tag.
                     * @member {string} tag
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @instance
                     */
                    ProxyConfig.prototype.tag = "";

                    /**
                     * Creates a new ProxyConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {v2ray.core.transport.internet.IProxyConfig=} [properties] Properties to set
                     * @returns {v2ray.core.transport.internet.ProxyConfig} ProxyConfig instance
                     */
                    ProxyConfig.create = function create(properties) {
                        return new ProxyConfig(properties);
                    };

                    /**
                     * Encodes the specified ProxyConfig message. Does not implicitly {@link v2ray.core.transport.internet.ProxyConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {v2ray.core.transport.internet.IProxyConfig} message ProxyConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProxyConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.tag);
                        return writer;
                    };

                    /**
                     * Encodes the specified ProxyConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.ProxyConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {v2ray.core.transport.internet.IProxyConfig} message ProxyConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProxyConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ProxyConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.transport.internet.ProxyConfig} ProxyConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProxyConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.ProxyConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.tag = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ProxyConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.transport.internet.ProxyConfig} ProxyConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProxyConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ProxyConfig message.
                     * @function verify
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ProxyConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            if (!$util.isString(message.tag))
                                return "tag: string expected";
                        return null;
                    };

                    /**
                     * Creates a ProxyConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.transport.internet.ProxyConfig} ProxyConfig
                     */
                    ProxyConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.transport.internet.ProxyConfig)
                            return object;
                        var message = new $root.v2ray.core.transport.internet.ProxyConfig();
                        if (object.tag != null)
                            message.tag = String(object.tag);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ProxyConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @static
                     * @param {v2ray.core.transport.internet.ProxyConfig} message ProxyConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ProxyConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.tag = "";
                        if (message.tag != null && message.hasOwnProperty("tag"))
                            object.tag = message.tag;
                        return object;
                    };

                    /**
                     * Converts this ProxyConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.transport.internet.ProxyConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ProxyConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ProxyConfig;
                })();

                internet.SocketConfig = (function() {

                    /**
                     * Properties of a SocketConfig.
                     * @memberof v2ray.core.transport.internet
                     * @interface ISocketConfig
                     * @property {number|null} [mark] SocketConfig mark
                     * @property {v2ray.core.transport.internet.SocketConfig.TCPFastOpenState|null} [tfo] SocketConfig tfo
                     * @property {v2ray.core.transport.internet.SocketConfig.TProxyMode|null} [tproxy] SocketConfig tproxy
                     * @property {boolean|null} [receiveOriginalDestAddress] SocketConfig receiveOriginalDestAddress
                     * @property {Uint8Array|null} [bindAddress] SocketConfig bindAddress
                     * @property {number|null} [bindPort] SocketConfig bindPort
                     */

                    /**
                     * Constructs a new SocketConfig.
                     * @memberof v2ray.core.transport.internet
                     * @classdesc Represents a SocketConfig.
                     * @implements ISocketConfig
                     * @constructor
                     * @param {v2ray.core.transport.internet.ISocketConfig=} [properties] Properties to set
                     */
                    function SocketConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SocketConfig mark.
                     * @member {number} mark
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @instance
                     */
                    SocketConfig.prototype.mark = 0;

                    /**
                     * SocketConfig tfo.
                     * @member {v2ray.core.transport.internet.SocketConfig.TCPFastOpenState} tfo
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @instance
                     */
                    SocketConfig.prototype.tfo = 0;

                    /**
                     * SocketConfig tproxy.
                     * @member {v2ray.core.transport.internet.SocketConfig.TProxyMode} tproxy
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @instance
                     */
                    SocketConfig.prototype.tproxy = 0;

                    /**
                     * SocketConfig receiveOriginalDestAddress.
                     * @member {boolean} receiveOriginalDestAddress
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @instance
                     */
                    SocketConfig.prototype.receiveOriginalDestAddress = false;

                    /**
                     * SocketConfig bindAddress.
                     * @member {Uint8Array} bindAddress
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @instance
                     */
                    SocketConfig.prototype.bindAddress = $util.newBuffer([]);

                    /**
                     * SocketConfig bindPort.
                     * @member {number} bindPort
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @instance
                     */
                    SocketConfig.prototype.bindPort = 0;

                    /**
                     * Creates a new SocketConfig instance using the specified properties.
                     * @function create
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {v2ray.core.transport.internet.ISocketConfig=} [properties] Properties to set
                     * @returns {v2ray.core.transport.internet.SocketConfig} SocketConfig instance
                     */
                    SocketConfig.create = function create(properties) {
                        return new SocketConfig(properties);
                    };

                    /**
                     * Encodes the specified SocketConfig message. Does not implicitly {@link v2ray.core.transport.internet.SocketConfig.verify|verify} messages.
                     * @function encode
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {v2ray.core.transport.internet.ISocketConfig} message SocketConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SocketConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.mark != null && message.hasOwnProperty("mark"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mark);
                        if (message.tfo != null && message.hasOwnProperty("tfo"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.tfo);
                        if (message.tproxy != null && message.hasOwnProperty("tproxy"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.tproxy);
                        if (message.receiveOriginalDestAddress != null && message.hasOwnProperty("receiveOriginalDestAddress"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.receiveOriginalDestAddress);
                        if (message.bindAddress != null && message.hasOwnProperty("bindAddress"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.bindAddress);
                        if (message.bindPort != null && message.hasOwnProperty("bindPort"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.bindPort);
                        return writer;
                    };

                    /**
                     * Encodes the specified SocketConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.SocketConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {v2ray.core.transport.internet.ISocketConfig} message SocketConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SocketConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SocketConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {v2ray.core.transport.internet.SocketConfig} SocketConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SocketConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.SocketConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.mark = reader.int32();
                                break;
                            case 2:
                                message.tfo = reader.int32();
                                break;
                            case 3:
                                message.tproxy = reader.int32();
                                break;
                            case 4:
                                message.receiveOriginalDestAddress = reader.bool();
                                break;
                            case 5:
                                message.bindAddress = reader.bytes();
                                break;
                            case 6:
                                message.bindPort = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SocketConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {v2ray.core.transport.internet.SocketConfig} SocketConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SocketConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SocketConfig message.
                     * @function verify
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SocketConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.mark != null && message.hasOwnProperty("mark"))
                            if (!$util.isInteger(message.mark))
                                return "mark: integer expected";
                        if (message.tfo != null && message.hasOwnProperty("tfo"))
                            switch (message.tfo) {
                            default:
                                return "tfo: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.tproxy != null && message.hasOwnProperty("tproxy"))
                            switch (message.tproxy) {
                            default:
                                return "tproxy: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.receiveOriginalDestAddress != null && message.hasOwnProperty("receiveOriginalDestAddress"))
                            if (typeof message.receiveOriginalDestAddress !== "boolean")
                                return "receiveOriginalDestAddress: boolean expected";
                        if (message.bindAddress != null && message.hasOwnProperty("bindAddress"))
                            if (!(message.bindAddress && typeof message.bindAddress.length === "number" || $util.isString(message.bindAddress)))
                                return "bindAddress: buffer expected";
                        if (message.bindPort != null && message.hasOwnProperty("bindPort"))
                            if (!$util.isInteger(message.bindPort))
                                return "bindPort: integer expected";
                        return null;
                    };

                    /**
                     * Creates a SocketConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {v2ray.core.transport.internet.SocketConfig} SocketConfig
                     */
                    SocketConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.v2ray.core.transport.internet.SocketConfig)
                            return object;
                        var message = new $root.v2ray.core.transport.internet.SocketConfig();
                        if (object.mark != null)
                            message.mark = object.mark | 0;
                        switch (object.tfo) {
                        case "AsIs":
                        case 0:
                            message.tfo = 0;
                            break;
                        case "Enable":
                        case 1:
                            message.tfo = 1;
                            break;
                        case "Disable":
                        case 2:
                            message.tfo = 2;
                            break;
                        }
                        switch (object.tproxy) {
                        case "Off":
                        case 0:
                            message.tproxy = 0;
                            break;
                        case "TProxy":
                        case 1:
                            message.tproxy = 1;
                            break;
                        case "Redirect":
                        case 2:
                            message.tproxy = 2;
                            break;
                        }
                        if (object.receiveOriginalDestAddress != null)
                            message.receiveOriginalDestAddress = Boolean(object.receiveOriginalDestAddress);
                        if (object.bindAddress != null)
                            if (typeof object.bindAddress === "string")
                                $util.base64.decode(object.bindAddress, message.bindAddress = $util.newBuffer($util.base64.length(object.bindAddress)), 0);
                            else if (object.bindAddress.length)
                                message.bindAddress = object.bindAddress;
                        if (object.bindPort != null)
                            message.bindPort = object.bindPort >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a SocketConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @static
                     * @param {v2ray.core.transport.internet.SocketConfig} message SocketConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SocketConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.mark = 0;
                            object.tfo = options.enums === String ? "AsIs" : 0;
                            object.tproxy = options.enums === String ? "Off" : 0;
                            object.receiveOriginalDestAddress = false;
                            if (options.bytes === String)
                                object.bindAddress = "";
                            else {
                                object.bindAddress = [];
                                if (options.bytes !== Array)
                                    object.bindAddress = $util.newBuffer(object.bindAddress);
                            }
                            object.bindPort = 0;
                        }
                        if (message.mark != null && message.hasOwnProperty("mark"))
                            object.mark = message.mark;
                        if (message.tfo != null && message.hasOwnProperty("tfo"))
                            object.tfo = options.enums === String ? $root.v2ray.core.transport.internet.SocketConfig.TCPFastOpenState[message.tfo] : message.tfo;
                        if (message.tproxy != null && message.hasOwnProperty("tproxy"))
                            object.tproxy = options.enums === String ? $root.v2ray.core.transport.internet.SocketConfig.TProxyMode[message.tproxy] : message.tproxy;
                        if (message.receiveOriginalDestAddress != null && message.hasOwnProperty("receiveOriginalDestAddress"))
                            object.receiveOriginalDestAddress = message.receiveOriginalDestAddress;
                        if (message.bindAddress != null && message.hasOwnProperty("bindAddress"))
                            object.bindAddress = options.bytes === String ? $util.base64.encode(message.bindAddress, 0, message.bindAddress.length) : options.bytes === Array ? Array.prototype.slice.call(message.bindAddress) : message.bindAddress;
                        if (message.bindPort != null && message.hasOwnProperty("bindPort"))
                            object.bindPort = message.bindPort;
                        return object;
                    };

                    /**
                     * Converts this SocketConfig to JSON.
                     * @function toJSON
                     * @memberof v2ray.core.transport.internet.SocketConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SocketConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * TCPFastOpenState enum.
                     * @name v2ray.core.transport.internet.SocketConfig.TCPFastOpenState
                     * @enum {string}
                     * @property {number} AsIs=0 AsIs value
                     * @property {number} Enable=1 Enable value
                     * @property {number} Disable=2 Disable value
                     */
                    SocketConfig.TCPFastOpenState = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "AsIs"] = 0;
                        values[valuesById[1] = "Enable"] = 1;
                        values[valuesById[2] = "Disable"] = 2;
                        return values;
                    })();

                    /**
                     * TProxyMode enum.
                     * @name v2ray.core.transport.internet.SocketConfig.TProxyMode
                     * @enum {string}
                     * @property {number} Off=0 Off value
                     * @property {number} TProxy=1 TProxy value
                     * @property {number} Redirect=2 Redirect value
                     */
                    SocketConfig.TProxyMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "Off"] = 0;
                        values[valuesById[1] = "TProxy"] = 1;
                        values[valuesById[2] = "Redirect"] = 2;
                        return values;
                    })();

                    return SocketConfig;
                })();

                internet.domainsocket = (function() {

                    /**
                     * Namespace domainsocket.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var domainsocket = {};

                    domainsocket.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.domainsocket
                         * @interface IConfig
                         * @property {string|null} [path] Config path
                         * @property {boolean|null} [abstract] Config abstract
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.domainsocket
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.domainsocket.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config path.
                         * @member {string} path
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @instance
                         */
                        Config.prototype.path = "";

                        /**
                         * Config abstract.
                         * @member {boolean} abstract
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @instance
                         */
                        Config.prototype.abstract = false;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.domainsocket.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.domainsocket.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.domainsocket.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.domainsocket.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.path != null && message.hasOwnProperty("path"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                            if (message.abstract != null && message.hasOwnProperty("abstract"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.abstract);
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.domainsocket.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.domainsocket.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.domainsocket.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.domainsocket.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.path = reader.string();
                                    break;
                                case 2:
                                    message.abstract = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.domainsocket.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.path != null && message.hasOwnProperty("path"))
                                if (!$util.isString(message.path))
                                    return "path: string expected";
                            if (message.abstract != null && message.hasOwnProperty("abstract"))
                                if (typeof message.abstract !== "boolean")
                                    return "abstract: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.domainsocket.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.domainsocket.Config)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.domainsocket.Config();
                            if (object.path != null)
                                message.path = String(object.path);
                            if (object.abstract != null)
                                message.abstract = Boolean(object.abstract);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.domainsocket.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.path = "";
                                object.abstract = false;
                            }
                            if (message.path != null && message.hasOwnProperty("path"))
                                object.path = message.path;
                            if (message.abstract != null && message.hasOwnProperty("abstract"))
                                object.abstract = message.abstract;
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.domainsocket.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return domainsocket;
                })();

                internet.headers = (function() {

                    /**
                     * Namespace headers.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var headers = {};

                    headers.http = (function() {

                        /**
                         * Namespace http.
                         * @memberof v2ray.core.transport.internet.headers
                         * @namespace
                         */
                        var http = {};

                        http.Header = (function() {

                            /**
                             * Properties of a Header.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @interface IHeader
                             * @property {string|null} [name] Header name
                             * @property {Array.<string>|null} [value] Header value
                             */

                            /**
                             * Constructs a new Header.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @classdesc Represents a Header.
                             * @implements IHeader
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.http.IHeader=} [properties] Properties to set
                             */
                            function Header(properties) {
                                this.value = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Header name.
                             * @member {string} name
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @instance
                             */
                            Header.prototype.name = "";

                            /**
                             * Header value.
                             * @member {Array.<string>} value
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @instance
                             */
                            Header.prototype.value = $util.emptyArray;

                            /**
                             * Creates a new Header instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IHeader=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.http.Header} Header instance
                             */
                            Header.create = function create(properties) {
                                return new Header(properties);
                            };

                            /**
                             * Encodes the specified Header message. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Header.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IHeader} message Header message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Header.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && message.hasOwnProperty("name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.value != null && message.value.length)
                                    for (var i = 0; i < message.value.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.value[i]);
                                return writer;
                            };

                            /**
                             * Encodes the specified Header message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Header.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IHeader} message Header message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Header.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Header message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.http.Header} Header
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Header.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.http.Header();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        if (!(message.value && message.value.length))
                                            message.value = [];
                                        message.value.push(reader.string());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Header message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.http.Header} Header
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Header.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Header message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Header.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.value != null && message.hasOwnProperty("value")) {
                                    if (!Array.isArray(message.value))
                                        return "value: array expected";
                                    for (var i = 0; i < message.value.length; ++i)
                                        if (!$util.isString(message.value[i]))
                                            return "value: string[] expected";
                                }
                                return null;
                            };

                            /**
                             * Creates a Header message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.http.Header} Header
                             */
                            Header.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.http.Header)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.http.Header();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.value) {
                                    if (!Array.isArray(object.value))
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.Header.value: array expected");
                                    message.value = [];
                                    for (var i = 0; i < object.value.length; ++i)
                                        message.value[i] = String(object.value[i]);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a Header message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.Header} message Header
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Header.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.value = [];
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.value && message.value.length) {
                                    object.value = [];
                                    for (var j = 0; j < message.value.length; ++j)
                                        object.value[j] = message.value[j];
                                }
                                return object;
                            };

                            /**
                             * Converts this Header to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.http.Header
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Header.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Header;
                        })();

                        http.Version = (function() {

                            /**
                             * Properties of a Version.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @interface IVersion
                             * @property {string|null} [value] Version value
                             */

                            /**
                             * Constructs a new Version.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @classdesc Represents a Version.
                             * @implements IVersion
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.http.IVersion=} [properties] Properties to set
                             */
                            function Version(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Version value.
                             * @member {string} value
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @instance
                             */
                            Version.prototype.value = "";

                            /**
                             * Creates a new Version instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IVersion=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.http.Version} Version instance
                             */
                            Version.create = function create(properties) {
                                return new Version(properties);
                            };

                            /**
                             * Encodes the specified Version message. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Version.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IVersion} message Version message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Version.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.value != null && message.hasOwnProperty("value"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                                return writer;
                            };

                            /**
                             * Encodes the specified Version message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Version.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IVersion} message Version message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Version.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Version message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.http.Version} Version
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Version.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.http.Version();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Version message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.http.Version} Version
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Version.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Version message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Version.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (!$util.isString(message.value))
                                        return "value: string expected";
                                return null;
                            };

                            /**
                             * Creates a Version message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.http.Version} Version
                             */
                            Version.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.http.Version)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.http.Version();
                                if (object.value != null)
                                    message.value = String(object.value);
                                return message;
                            };

                            /**
                             * Creates a plain object from a Version message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.Version} message Version
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Version.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.value = "";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = message.value;
                                return object;
                            };

                            /**
                             * Converts this Version to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.http.Version
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Version.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Version;
                        })();

                        http.Method = (function() {

                            /**
                             * Properties of a Method.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @interface IMethod
                             * @property {string|null} [value] Method value
                             */

                            /**
                             * Constructs a new Method.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @classdesc Represents a Method.
                             * @implements IMethod
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.http.IMethod=} [properties] Properties to set
                             */
                            function Method(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Method value.
                             * @member {string} value
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @instance
                             */
                            Method.prototype.value = "";

                            /**
                             * Creates a new Method instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IMethod=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.http.Method} Method instance
                             */
                            Method.create = function create(properties) {
                                return new Method(properties);
                            };

                            /**
                             * Encodes the specified Method message. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Method.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IMethod} message Method message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Method.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.value != null && message.hasOwnProperty("value"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                                return writer;
                            };

                            /**
                             * Encodes the specified Method message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Method.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IMethod} message Method message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Method.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Method message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.http.Method} Method
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Method.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.http.Method();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Method message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.http.Method} Method
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Method.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Method message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Method.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (!$util.isString(message.value))
                                        return "value: string expected";
                                return null;
                            };

                            /**
                             * Creates a Method message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.http.Method} Method
                             */
                            Method.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.http.Method)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.http.Method();
                                if (object.value != null)
                                    message.value = String(object.value);
                                return message;
                            };

                            /**
                             * Creates a plain object from a Method message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.Method} message Method
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Method.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.value = "";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = message.value;
                                return object;
                            };

                            /**
                             * Converts this Method to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.http.Method
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Method.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Method;
                        })();

                        http.RequestConfig = (function() {

                            /**
                             * Properties of a RequestConfig.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @interface IRequestConfig
                             * @property {v2ray.core.transport.internet.headers.http.IVersion|null} [version] RequestConfig version
                             * @property {v2ray.core.transport.internet.headers.http.IMethod|null} [method] RequestConfig method
                             * @property {Array.<string>|null} [uri] RequestConfig uri
                             * @property {Array.<v2ray.core.transport.internet.headers.http.IHeader>|null} [header] RequestConfig header
                             */

                            /**
                             * Constructs a new RequestConfig.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @classdesc Represents a RequestConfig.
                             * @implements IRequestConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.http.IRequestConfig=} [properties] Properties to set
                             */
                            function RequestConfig(properties) {
                                this.uri = [];
                                this.header = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * RequestConfig version.
                             * @member {v2ray.core.transport.internet.headers.http.IVersion|null|undefined} version
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @instance
                             */
                            RequestConfig.prototype.version = null;

                            /**
                             * RequestConfig method.
                             * @member {v2ray.core.transport.internet.headers.http.IMethod|null|undefined} method
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @instance
                             */
                            RequestConfig.prototype.method = null;

                            /**
                             * RequestConfig uri.
                             * @member {Array.<string>} uri
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @instance
                             */
                            RequestConfig.prototype.uri = $util.emptyArray;

                            /**
                             * RequestConfig header.
                             * @member {Array.<v2ray.core.transport.internet.headers.http.IHeader>} header
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @instance
                             */
                            RequestConfig.prototype.header = $util.emptyArray;

                            /**
                             * Creates a new RequestConfig instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IRequestConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.http.RequestConfig} RequestConfig instance
                             */
                            RequestConfig.create = function create(properties) {
                                return new RequestConfig(properties);
                            };

                            /**
                             * Encodes the specified RequestConfig message. Does not implicitly {@link v2ray.core.transport.internet.headers.http.RequestConfig.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IRequestConfig} message RequestConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RequestConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.version != null && message.hasOwnProperty("version"))
                                    $root.v2ray.core.transport.internet.headers.http.Version.encode(message.version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.method != null && message.hasOwnProperty("method"))
                                    $root.v2ray.core.transport.internet.headers.http.Method.encode(message.method, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.uri != null && message.uri.length)
                                    for (var i = 0; i < message.uri.length; ++i)
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.uri[i]);
                                if (message.header != null && message.header.length)
                                    for (var i = 0; i < message.header.length; ++i)
                                        $root.v2ray.core.transport.internet.headers.http.Header.encode(message.header[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified RequestConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.http.RequestConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IRequestConfig} message RequestConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RequestConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a RequestConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.http.RequestConfig} RequestConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RequestConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.http.RequestConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.version = $root.v2ray.core.transport.internet.headers.http.Version.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.method = $root.v2ray.core.transport.internet.headers.http.Method.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        if (!(message.uri && message.uri.length))
                                            message.uri = [];
                                        message.uri.push(reader.string());
                                        break;
                                    case 4:
                                        if (!(message.header && message.header.length))
                                            message.header = [];
                                        message.header.push($root.v2ray.core.transport.internet.headers.http.Header.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a RequestConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.http.RequestConfig} RequestConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RequestConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a RequestConfig message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            RequestConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.version != null && message.hasOwnProperty("version")) {
                                    var error = $root.v2ray.core.transport.internet.headers.http.Version.verify(message.version);
                                    if (error)
                                        return "version." + error;
                                }
                                if (message.method != null && message.hasOwnProperty("method")) {
                                    var error = $root.v2ray.core.transport.internet.headers.http.Method.verify(message.method);
                                    if (error)
                                        return "method." + error;
                                }
                                if (message.uri != null && message.hasOwnProperty("uri")) {
                                    if (!Array.isArray(message.uri))
                                        return "uri: array expected";
                                    for (var i = 0; i < message.uri.length; ++i)
                                        if (!$util.isString(message.uri[i]))
                                            return "uri: string[] expected";
                                }
                                if (message.header != null && message.hasOwnProperty("header")) {
                                    if (!Array.isArray(message.header))
                                        return "header: array expected";
                                    for (var i = 0; i < message.header.length; ++i) {
                                        var error = $root.v2ray.core.transport.internet.headers.http.Header.verify(message.header[i]);
                                        if (error)
                                            return "header." + error;
                                    }
                                }
                                return null;
                            };

                            /**
                             * Creates a RequestConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.http.RequestConfig} RequestConfig
                             */
                            RequestConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.http.RequestConfig)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.http.RequestConfig();
                                if (object.version != null) {
                                    if (typeof object.version !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.RequestConfig.version: object expected");
                                    message.version = $root.v2ray.core.transport.internet.headers.http.Version.fromObject(object.version);
                                }
                                if (object.method != null) {
                                    if (typeof object.method !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.RequestConfig.method: object expected");
                                    message.method = $root.v2ray.core.transport.internet.headers.http.Method.fromObject(object.method);
                                }
                                if (object.uri) {
                                    if (!Array.isArray(object.uri))
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.RequestConfig.uri: array expected");
                                    message.uri = [];
                                    for (var i = 0; i < object.uri.length; ++i)
                                        message.uri[i] = String(object.uri[i]);
                                }
                                if (object.header) {
                                    if (!Array.isArray(object.header))
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.RequestConfig.header: array expected");
                                    message.header = [];
                                    for (var i = 0; i < object.header.length; ++i) {
                                        if (typeof object.header[i] !== "object")
                                            throw TypeError(".v2ray.core.transport.internet.headers.http.RequestConfig.header: object expected");
                                        message.header[i] = $root.v2ray.core.transport.internet.headers.http.Header.fromObject(object.header[i]);
                                    }
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a RequestConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.RequestConfig} message RequestConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            RequestConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.uri = [];
                                    object.header = [];
                                }
                                if (options.defaults) {
                                    object.version = null;
                                    object.method = null;
                                }
                                if (message.version != null && message.hasOwnProperty("version"))
                                    object.version = $root.v2ray.core.transport.internet.headers.http.Version.toObject(message.version, options);
                                if (message.method != null && message.hasOwnProperty("method"))
                                    object.method = $root.v2ray.core.transport.internet.headers.http.Method.toObject(message.method, options);
                                if (message.uri && message.uri.length) {
                                    object.uri = [];
                                    for (var j = 0; j < message.uri.length; ++j)
                                        object.uri[j] = message.uri[j];
                                }
                                if (message.header && message.header.length) {
                                    object.header = [];
                                    for (var j = 0; j < message.header.length; ++j)
                                        object.header[j] = $root.v2ray.core.transport.internet.headers.http.Header.toObject(message.header[j], options);
                                }
                                return object;
                            };

                            /**
                             * Converts this RequestConfig to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.http.RequestConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            RequestConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return RequestConfig;
                        })();

                        http.Status = (function() {

                            /**
                             * Properties of a Status.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @interface IStatus
                             * @property {string|null} [code] Status code
                             * @property {string|null} [reason] Status reason
                             */

                            /**
                             * Constructs a new Status.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @classdesc Represents a Status.
                             * @implements IStatus
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.http.IStatus=} [properties] Properties to set
                             */
                            function Status(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Status code.
                             * @member {string} code
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @instance
                             */
                            Status.prototype.code = "";

                            /**
                             * Status reason.
                             * @member {string} reason
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @instance
                             */
                            Status.prototype.reason = "";

                            /**
                             * Creates a new Status instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IStatus=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.http.Status} Status instance
                             */
                            Status.create = function create(properties) {
                                return new Status(properties);
                            };

                            /**
                             * Encodes the specified Status message. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Status.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IStatus} message Status message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Status.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.code != null && message.hasOwnProperty("code"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
                                if (message.reason != null && message.hasOwnProperty("reason"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
                                return writer;
                            };

                            /**
                             * Encodes the specified Status message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Status.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IStatus} message Status message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Status.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Status message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.http.Status} Status
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Status.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.http.Status();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.code = reader.string();
                                        break;
                                    case 2:
                                        message.reason = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Status message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.http.Status} Status
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Status.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Status message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Status.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.code != null && message.hasOwnProperty("code"))
                                    if (!$util.isString(message.code))
                                        return "code: string expected";
                                if (message.reason != null && message.hasOwnProperty("reason"))
                                    if (!$util.isString(message.reason))
                                        return "reason: string expected";
                                return null;
                            };

                            /**
                             * Creates a Status message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.http.Status} Status
                             */
                            Status.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.http.Status)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.http.Status();
                                if (object.code != null)
                                    message.code = String(object.code);
                                if (object.reason != null)
                                    message.reason = String(object.reason);
                                return message;
                            };

                            /**
                             * Creates a plain object from a Status message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.Status} message Status
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Status.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.code = "";
                                    object.reason = "";
                                }
                                if (message.code != null && message.hasOwnProperty("code"))
                                    object.code = message.code;
                                if (message.reason != null && message.hasOwnProperty("reason"))
                                    object.reason = message.reason;
                                return object;
                            };

                            /**
                             * Converts this Status to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.http.Status
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Status.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Status;
                        })();

                        http.ResponseConfig = (function() {

                            /**
                             * Properties of a ResponseConfig.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @interface IResponseConfig
                             * @property {v2ray.core.transport.internet.headers.http.IVersion|null} [version] ResponseConfig version
                             * @property {v2ray.core.transport.internet.headers.http.IStatus|null} [status] ResponseConfig status
                             * @property {Array.<v2ray.core.transport.internet.headers.http.IHeader>|null} [header] ResponseConfig header
                             */

                            /**
                             * Constructs a new ResponseConfig.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @classdesc Represents a ResponseConfig.
                             * @implements IResponseConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.http.IResponseConfig=} [properties] Properties to set
                             */
                            function ResponseConfig(properties) {
                                this.header = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * ResponseConfig version.
                             * @member {v2ray.core.transport.internet.headers.http.IVersion|null|undefined} version
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @instance
                             */
                            ResponseConfig.prototype.version = null;

                            /**
                             * ResponseConfig status.
                             * @member {v2ray.core.transport.internet.headers.http.IStatus|null|undefined} status
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @instance
                             */
                            ResponseConfig.prototype.status = null;

                            /**
                             * ResponseConfig header.
                             * @member {Array.<v2ray.core.transport.internet.headers.http.IHeader>} header
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @instance
                             */
                            ResponseConfig.prototype.header = $util.emptyArray;

                            /**
                             * Creates a new ResponseConfig instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IResponseConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.http.ResponseConfig} ResponseConfig instance
                             */
                            ResponseConfig.create = function create(properties) {
                                return new ResponseConfig(properties);
                            };

                            /**
                             * Encodes the specified ResponseConfig message. Does not implicitly {@link v2ray.core.transport.internet.headers.http.ResponseConfig.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IResponseConfig} message ResponseConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ResponseConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.version != null && message.hasOwnProperty("version"))
                                    $root.v2ray.core.transport.internet.headers.http.Version.encode(message.version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.status != null && message.hasOwnProperty("status"))
                                    $root.v2ray.core.transport.internet.headers.http.Status.encode(message.status, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.header != null && message.header.length)
                                    for (var i = 0; i < message.header.length; ++i)
                                        $root.v2ray.core.transport.internet.headers.http.Header.encode(message.header[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified ResponseConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.http.ResponseConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IResponseConfig} message ResponseConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ResponseConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a ResponseConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.http.ResponseConfig} ResponseConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ResponseConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.http.ResponseConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.version = $root.v2ray.core.transport.internet.headers.http.Version.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.status = $root.v2ray.core.transport.internet.headers.http.Status.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        if (!(message.header && message.header.length))
                                            message.header = [];
                                        message.header.push($root.v2ray.core.transport.internet.headers.http.Header.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a ResponseConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.http.ResponseConfig} ResponseConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ResponseConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a ResponseConfig message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ResponseConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.version != null && message.hasOwnProperty("version")) {
                                    var error = $root.v2ray.core.transport.internet.headers.http.Version.verify(message.version);
                                    if (error)
                                        return "version." + error;
                                }
                                if (message.status != null && message.hasOwnProperty("status")) {
                                    var error = $root.v2ray.core.transport.internet.headers.http.Status.verify(message.status);
                                    if (error)
                                        return "status." + error;
                                }
                                if (message.header != null && message.hasOwnProperty("header")) {
                                    if (!Array.isArray(message.header))
                                        return "header: array expected";
                                    for (var i = 0; i < message.header.length; ++i) {
                                        var error = $root.v2ray.core.transport.internet.headers.http.Header.verify(message.header[i]);
                                        if (error)
                                            return "header." + error;
                                    }
                                }
                                return null;
                            };

                            /**
                             * Creates a ResponseConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.http.ResponseConfig} ResponseConfig
                             */
                            ResponseConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.http.ResponseConfig)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.http.ResponseConfig();
                                if (object.version != null) {
                                    if (typeof object.version !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.ResponseConfig.version: object expected");
                                    message.version = $root.v2ray.core.transport.internet.headers.http.Version.fromObject(object.version);
                                }
                                if (object.status != null) {
                                    if (typeof object.status !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.ResponseConfig.status: object expected");
                                    message.status = $root.v2ray.core.transport.internet.headers.http.Status.fromObject(object.status);
                                }
                                if (object.header) {
                                    if (!Array.isArray(object.header))
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.ResponseConfig.header: array expected");
                                    message.header = [];
                                    for (var i = 0; i < object.header.length; ++i) {
                                        if (typeof object.header[i] !== "object")
                                            throw TypeError(".v2ray.core.transport.internet.headers.http.ResponseConfig.header: object expected");
                                        message.header[i] = $root.v2ray.core.transport.internet.headers.http.Header.fromObject(object.header[i]);
                                    }
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a ResponseConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.ResponseConfig} message ResponseConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ResponseConfig.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.header = [];
                                if (options.defaults) {
                                    object.version = null;
                                    object.status = null;
                                }
                                if (message.version != null && message.hasOwnProperty("version"))
                                    object.version = $root.v2ray.core.transport.internet.headers.http.Version.toObject(message.version, options);
                                if (message.status != null && message.hasOwnProperty("status"))
                                    object.status = $root.v2ray.core.transport.internet.headers.http.Status.toObject(message.status, options);
                                if (message.header && message.header.length) {
                                    object.header = [];
                                    for (var j = 0; j < message.header.length; ++j)
                                        object.header[j] = $root.v2ray.core.transport.internet.headers.http.Header.toObject(message.header[j], options);
                                }
                                return object;
                            };

                            /**
                             * Converts this ResponseConfig to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.http.ResponseConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ResponseConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return ResponseConfig;
                        })();

                        http.Config = (function() {

                            /**
                             * Properties of a Config.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @interface IConfig
                             * @property {v2ray.core.transport.internet.headers.http.IRequestConfig|null} [request] Config request
                             * @property {v2ray.core.transport.internet.headers.http.IResponseConfig|null} [response] Config response
                             */

                            /**
                             * Constructs a new Config.
                             * @memberof v2ray.core.transport.internet.headers.http
                             * @classdesc Represents a Config.
                             * @implements IConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.http.IConfig=} [properties] Properties to set
                             */
                            function Config(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Config request.
                             * @member {v2ray.core.transport.internet.headers.http.IRequestConfig|null|undefined} request
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @instance
                             */
                            Config.prototype.request = null;

                            /**
                             * Config response.
                             * @member {v2ray.core.transport.internet.headers.http.IResponseConfig|null|undefined} response
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @instance
                             */
                            Config.prototype.response = null;

                            /**
                             * Creates a new Config instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.http.Config} Config instance
                             */
                            Config.create = function create(properties) {
                                return new Config(properties);
                            };

                            /**
                             * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Config.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.request != null && message.hasOwnProperty("request"))
                                    $root.v2ray.core.transport.internet.headers.http.RequestConfig.encode(message.request, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.response != null && message.hasOwnProperty("response"))
                                    $root.v2ray.core.transport.internet.headers.http.ResponseConfig.encode(message.response, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.http.Config.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.http.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.http.Config();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.request = $root.v2ray.core.transport.internet.headers.http.RequestConfig.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.response = $root.v2ray.core.transport.internet.headers.http.ResponseConfig.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.http.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Config message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Config.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.request != null && message.hasOwnProperty("request")) {
                                    var error = $root.v2ray.core.transport.internet.headers.http.RequestConfig.verify(message.request);
                                    if (error)
                                        return "request." + error;
                                }
                                if (message.response != null && message.hasOwnProperty("response")) {
                                    var error = $root.v2ray.core.transport.internet.headers.http.ResponseConfig.verify(message.response);
                                    if (error)
                                        return "response." + error;
                                }
                                return null;
                            };

                            /**
                             * Creates a Config message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.http.Config} Config
                             */
                            Config.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.http.Config)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.http.Config();
                                if (object.request != null) {
                                    if (typeof object.request !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.Config.request: object expected");
                                    message.request = $root.v2ray.core.transport.internet.headers.http.RequestConfig.fromObject(object.request);
                                }
                                if (object.response != null) {
                                    if (typeof object.response !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.headers.http.Config.response: object expected");
                                    message.response = $root.v2ray.core.transport.internet.headers.http.ResponseConfig.fromObject(object.response);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a Config message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.http.Config} message Config
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Config.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.request = null;
                                    object.response = null;
                                }
                                if (message.request != null && message.hasOwnProperty("request"))
                                    object.request = $root.v2ray.core.transport.internet.headers.http.RequestConfig.toObject(message.request, options);
                                if (message.response != null && message.hasOwnProperty("response"))
                                    object.response = $root.v2ray.core.transport.internet.headers.http.ResponseConfig.toObject(message.response, options);
                                return object;
                            };

                            /**
                             * Converts this Config to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.http.Config
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Config.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Config;
                        })();

                        return http;
                    })();

                    headers.noop = (function() {

                        /**
                         * Namespace noop.
                         * @memberof v2ray.core.transport.internet.headers
                         * @namespace
                         */
                        var noop = {};

                        noop.Config = (function() {

                            /**
                             * Properties of a Config.
                             * @memberof v2ray.core.transport.internet.headers.noop
                             * @interface IConfig
                             */

                            /**
                             * Constructs a new Config.
                             * @memberof v2ray.core.transport.internet.headers.noop
                             * @classdesc Represents a Config.
                             * @implements IConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.noop.IConfig=} [properties] Properties to set
                             */
                            function Config(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Creates a new Config instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.IConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.noop.Config} Config instance
                             */
                            Config.create = function create(properties) {
                                return new Config(properties);
                            };

                            /**
                             * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.headers.noop.Config.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };

                            /**
                             * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.noop.Config.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.noop.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.noop.Config();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.noop.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Config message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Config.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };

                            /**
                             * Creates a Config message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.noop.Config} Config
                             */
                            Config.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.noop.Config)
                                    return object;
                                return new $root.v2ray.core.transport.internet.headers.noop.Config();
                            };

                            /**
                             * Creates a plain object from a Config message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.Config} message Config
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Config.toObject = function toObject() {
                                return {};
                            };

                            /**
                             * Converts this Config to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.noop.Config
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Config.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Config;
                        })();

                        noop.ConnectionConfig = (function() {

                            /**
                             * Properties of a ConnectionConfig.
                             * @memberof v2ray.core.transport.internet.headers.noop
                             * @interface IConnectionConfig
                             */

                            /**
                             * Constructs a new ConnectionConfig.
                             * @memberof v2ray.core.transport.internet.headers.noop
                             * @classdesc Represents a ConnectionConfig.
                             * @implements IConnectionConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.noop.IConnectionConfig=} [properties] Properties to set
                             */
                            function ConnectionConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Creates a new ConnectionConfig instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.IConnectionConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.noop.ConnectionConfig} ConnectionConfig instance
                             */
                            ConnectionConfig.create = function create(properties) {
                                return new ConnectionConfig(properties);
                            };

                            /**
                             * Encodes the specified ConnectionConfig message. Does not implicitly {@link v2ray.core.transport.internet.headers.noop.ConnectionConfig.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.IConnectionConfig} message ConnectionConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConnectionConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };

                            /**
                             * Encodes the specified ConnectionConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.noop.ConnectionConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.IConnectionConfig} message ConnectionConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConnectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a ConnectionConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.noop.ConnectionConfig} ConnectionConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConnectionConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.noop.ConnectionConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a ConnectionConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.noop.ConnectionConfig} ConnectionConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConnectionConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a ConnectionConfig message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ConnectionConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };

                            /**
                             * Creates a ConnectionConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.noop.ConnectionConfig} ConnectionConfig
                             */
                            ConnectionConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.noop.ConnectionConfig)
                                    return object;
                                return new $root.v2ray.core.transport.internet.headers.noop.ConnectionConfig();
                            };

                            /**
                             * Creates a plain object from a ConnectionConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.noop.ConnectionConfig} message ConnectionConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ConnectionConfig.toObject = function toObject() {
                                return {};
                            };

                            /**
                             * Converts this ConnectionConfig to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.noop.ConnectionConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ConnectionConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return ConnectionConfig;
                        })();

                        return noop;
                    })();

                    headers.srtp = (function() {

                        /**
                         * Namespace srtp.
                         * @memberof v2ray.core.transport.internet.headers
                         * @namespace
                         */
                        var srtp = {};

                        srtp.Config = (function() {

                            /**
                             * Properties of a Config.
                             * @memberof v2ray.core.transport.internet.headers.srtp
                             * @interface IConfig
                             * @property {number|null} [version] Config version
                             * @property {boolean|null} [padding] Config padding
                             * @property {boolean|null} [extension] Config extension
                             * @property {number|null} [csrcCount] Config csrcCount
                             * @property {boolean|null} [marker] Config marker
                             * @property {number|null} [payloadType] Config payloadType
                             */

                            /**
                             * Constructs a new Config.
                             * @memberof v2ray.core.transport.internet.headers.srtp
                             * @classdesc Represents a Config.
                             * @implements IConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.srtp.IConfig=} [properties] Properties to set
                             */
                            function Config(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Config version.
                             * @member {number} version
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @instance
                             */
                            Config.prototype.version = 0;

                            /**
                             * Config padding.
                             * @member {boolean} padding
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @instance
                             */
                            Config.prototype.padding = false;

                            /**
                             * Config extension.
                             * @member {boolean} extension
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @instance
                             */
                            Config.prototype.extension = false;

                            /**
                             * Config csrcCount.
                             * @member {number} csrcCount
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @instance
                             */
                            Config.prototype.csrcCount = 0;

                            /**
                             * Config marker.
                             * @member {boolean} marker
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @instance
                             */
                            Config.prototype.marker = false;

                            /**
                             * Config payloadType.
                             * @member {number} payloadType
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @instance
                             */
                            Config.prototype.payloadType = 0;

                            /**
                             * Creates a new Config instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.srtp.IConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.srtp.Config} Config instance
                             */
                            Config.create = function create(properties) {
                                return new Config(properties);
                            };

                            /**
                             * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.headers.srtp.Config.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.srtp.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.version != null && message.hasOwnProperty("version"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
                                if (message.padding != null && message.hasOwnProperty("padding"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.padding);
                                if (message.extension != null && message.hasOwnProperty("extension"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.extension);
                                if (message.csrcCount != null && message.hasOwnProperty("csrcCount"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.csrcCount);
                                if (message.marker != null && message.hasOwnProperty("marker"))
                                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.marker);
                                if (message.payloadType != null && message.hasOwnProperty("payloadType"))
                                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.payloadType);
                                return writer;
                            };

                            /**
                             * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.srtp.Config.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.srtp.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.srtp.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.srtp.Config();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.version = reader.uint32();
                                        break;
                                    case 2:
                                        message.padding = reader.bool();
                                        break;
                                    case 3:
                                        message.extension = reader.bool();
                                        break;
                                    case 4:
                                        message.csrcCount = reader.uint32();
                                        break;
                                    case 5:
                                        message.marker = reader.bool();
                                        break;
                                    case 6:
                                        message.payloadType = reader.uint32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.srtp.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Config message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Config.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.version != null && message.hasOwnProperty("version"))
                                    if (!$util.isInteger(message.version))
                                        return "version: integer expected";
                                if (message.padding != null && message.hasOwnProperty("padding"))
                                    if (typeof message.padding !== "boolean")
                                        return "padding: boolean expected";
                                if (message.extension != null && message.hasOwnProperty("extension"))
                                    if (typeof message.extension !== "boolean")
                                        return "extension: boolean expected";
                                if (message.csrcCount != null && message.hasOwnProperty("csrcCount"))
                                    if (!$util.isInteger(message.csrcCount))
                                        return "csrcCount: integer expected";
                                if (message.marker != null && message.hasOwnProperty("marker"))
                                    if (typeof message.marker !== "boolean")
                                        return "marker: boolean expected";
                                if (message.payloadType != null && message.hasOwnProperty("payloadType"))
                                    if (!$util.isInteger(message.payloadType))
                                        return "payloadType: integer expected";
                                return null;
                            };

                            /**
                             * Creates a Config message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.srtp.Config} Config
                             */
                            Config.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.srtp.Config)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.srtp.Config();
                                if (object.version != null)
                                    message.version = object.version >>> 0;
                                if (object.padding != null)
                                    message.padding = Boolean(object.padding);
                                if (object.extension != null)
                                    message.extension = Boolean(object.extension);
                                if (object.csrcCount != null)
                                    message.csrcCount = object.csrcCount >>> 0;
                                if (object.marker != null)
                                    message.marker = Boolean(object.marker);
                                if (object.payloadType != null)
                                    message.payloadType = object.payloadType >>> 0;
                                return message;
                            };

                            /**
                             * Creates a plain object from a Config message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.srtp.Config} message Config
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Config.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.version = 0;
                                    object.padding = false;
                                    object.extension = false;
                                    object.csrcCount = 0;
                                    object.marker = false;
                                    object.payloadType = 0;
                                }
                                if (message.version != null && message.hasOwnProperty("version"))
                                    object.version = message.version;
                                if (message.padding != null && message.hasOwnProperty("padding"))
                                    object.padding = message.padding;
                                if (message.extension != null && message.hasOwnProperty("extension"))
                                    object.extension = message.extension;
                                if (message.csrcCount != null && message.hasOwnProperty("csrcCount"))
                                    object.csrcCount = message.csrcCount;
                                if (message.marker != null && message.hasOwnProperty("marker"))
                                    object.marker = message.marker;
                                if (message.payloadType != null && message.hasOwnProperty("payloadType"))
                                    object.payloadType = message.payloadType;
                                return object;
                            };

                            /**
                             * Converts this Config to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.srtp.Config
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Config.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Config;
                        })();

                        return srtp;
                    })();

                    headers.tls = (function() {

                        /**
                         * Namespace tls.
                         * @memberof v2ray.core.transport.internet.headers
                         * @namespace
                         */
                        var tls = {};

                        tls.PacketConfig = (function() {

                            /**
                             * Properties of a PacketConfig.
                             * @memberof v2ray.core.transport.internet.headers.tls
                             * @interface IPacketConfig
                             */

                            /**
                             * Constructs a new PacketConfig.
                             * @memberof v2ray.core.transport.internet.headers.tls
                             * @classdesc Represents a PacketConfig.
                             * @implements IPacketConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.tls.IPacketConfig=} [properties] Properties to set
                             */
                            function PacketConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Creates a new PacketConfig instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.tls.IPacketConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.tls.PacketConfig} PacketConfig instance
                             */
                            PacketConfig.create = function create(properties) {
                                return new PacketConfig(properties);
                            };

                            /**
                             * Encodes the specified PacketConfig message. Does not implicitly {@link v2ray.core.transport.internet.headers.tls.PacketConfig.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.tls.IPacketConfig} message PacketConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PacketConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };

                            /**
                             * Encodes the specified PacketConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.tls.PacketConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.tls.IPacketConfig} message PacketConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PacketConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a PacketConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.tls.PacketConfig} PacketConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PacketConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.tls.PacketConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a PacketConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.tls.PacketConfig} PacketConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PacketConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a PacketConfig message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PacketConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };

                            /**
                             * Creates a PacketConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.tls.PacketConfig} PacketConfig
                             */
                            PacketConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.tls.PacketConfig)
                                    return object;
                                return new $root.v2ray.core.transport.internet.headers.tls.PacketConfig();
                            };

                            /**
                             * Creates a plain object from a PacketConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.tls.PacketConfig} message PacketConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PacketConfig.toObject = function toObject() {
                                return {};
                            };

                            /**
                             * Converts this PacketConfig to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.tls.PacketConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PacketConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return PacketConfig;
                        })();

                        return tls;
                    })();

                    headers.utp = (function() {

                        /**
                         * Namespace utp.
                         * @memberof v2ray.core.transport.internet.headers
                         * @namespace
                         */
                        var utp = {};

                        utp.Config = (function() {

                            /**
                             * Properties of a Config.
                             * @memberof v2ray.core.transport.internet.headers.utp
                             * @interface IConfig
                             * @property {number|null} [version] Config version
                             */

                            /**
                             * Constructs a new Config.
                             * @memberof v2ray.core.transport.internet.headers.utp
                             * @classdesc Represents a Config.
                             * @implements IConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.utp.IConfig=} [properties] Properties to set
                             */
                            function Config(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Config version.
                             * @member {number} version
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @instance
                             */
                            Config.prototype.version = 0;

                            /**
                             * Creates a new Config instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.utp.IConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.utp.Config} Config instance
                             */
                            Config.create = function create(properties) {
                                return new Config(properties);
                            };

                            /**
                             * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.headers.utp.Config.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.utp.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.version != null && message.hasOwnProperty("version"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
                                return writer;
                            };

                            /**
                             * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.utp.Config.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.utp.IConfig} message Config message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Config.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.utp.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.utp.Config();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.version = reader.uint32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Config message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.utp.Config} Config
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Config.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Config message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Config.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.version != null && message.hasOwnProperty("version"))
                                    if (!$util.isInteger(message.version))
                                        return "version: integer expected";
                                return null;
                            };

                            /**
                             * Creates a Config message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.utp.Config} Config
                             */
                            Config.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.utp.Config)
                                    return object;
                                var message = new $root.v2ray.core.transport.internet.headers.utp.Config();
                                if (object.version != null)
                                    message.version = object.version >>> 0;
                                return message;
                            };

                            /**
                             * Creates a plain object from a Config message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @static
                             * @param {v2ray.core.transport.internet.headers.utp.Config} message Config
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Config.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.version = 0;
                                if (message.version != null && message.hasOwnProperty("version"))
                                    object.version = message.version;
                                return object;
                            };

                            /**
                             * Converts this Config to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.utp.Config
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Config.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Config;
                        })();

                        return utp;
                    })();

                    headers.wechat = (function() {

                        /**
                         * Namespace wechat.
                         * @memberof v2ray.core.transport.internet.headers
                         * @namespace
                         */
                        var wechat = {};

                        wechat.VideoConfig = (function() {

                            /**
                             * Properties of a VideoConfig.
                             * @memberof v2ray.core.transport.internet.headers.wechat
                             * @interface IVideoConfig
                             */

                            /**
                             * Constructs a new VideoConfig.
                             * @memberof v2ray.core.transport.internet.headers.wechat
                             * @classdesc Represents a VideoConfig.
                             * @implements IVideoConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.wechat.IVideoConfig=} [properties] Properties to set
                             */
                            function VideoConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Creates a new VideoConfig instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wechat.IVideoConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.wechat.VideoConfig} VideoConfig instance
                             */
                            VideoConfig.create = function create(properties) {
                                return new VideoConfig(properties);
                            };

                            /**
                             * Encodes the specified VideoConfig message. Does not implicitly {@link v2ray.core.transport.internet.headers.wechat.VideoConfig.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wechat.IVideoConfig} message VideoConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            VideoConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };

                            /**
                             * Encodes the specified VideoConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.wechat.VideoConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wechat.IVideoConfig} message VideoConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            VideoConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a VideoConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.wechat.VideoConfig} VideoConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            VideoConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.wechat.VideoConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a VideoConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.wechat.VideoConfig} VideoConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            VideoConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a VideoConfig message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            VideoConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };

                            /**
                             * Creates a VideoConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.wechat.VideoConfig} VideoConfig
                             */
                            VideoConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.wechat.VideoConfig)
                                    return object;
                                return new $root.v2ray.core.transport.internet.headers.wechat.VideoConfig();
                            };

                            /**
                             * Creates a plain object from a VideoConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wechat.VideoConfig} message VideoConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            VideoConfig.toObject = function toObject() {
                                return {};
                            };

                            /**
                             * Converts this VideoConfig to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.wechat.VideoConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            VideoConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return VideoConfig;
                        })();

                        return wechat;
                    })();

                    headers.wireguard = (function() {

                        /**
                         * Namespace wireguard.
                         * @memberof v2ray.core.transport.internet.headers
                         * @namespace
                         */
                        var wireguard = {};

                        wireguard.WireguardConfig = (function() {

                            /**
                             * Properties of a WireguardConfig.
                             * @memberof v2ray.core.transport.internet.headers.wireguard
                             * @interface IWireguardConfig
                             */

                            /**
                             * Constructs a new WireguardConfig.
                             * @memberof v2ray.core.transport.internet.headers.wireguard
                             * @classdesc Represents a WireguardConfig.
                             * @implements IWireguardConfig
                             * @constructor
                             * @param {v2ray.core.transport.internet.headers.wireguard.IWireguardConfig=} [properties] Properties to set
                             */
                            function WireguardConfig(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Creates a new WireguardConfig instance using the specified properties.
                             * @function create
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wireguard.IWireguardConfig=} [properties] Properties to set
                             * @returns {v2ray.core.transport.internet.headers.wireguard.WireguardConfig} WireguardConfig instance
                             */
                            WireguardConfig.create = function create(properties) {
                                return new WireguardConfig(properties);
                            };

                            /**
                             * Encodes the specified WireguardConfig message. Does not implicitly {@link v2ray.core.transport.internet.headers.wireguard.WireguardConfig.verify|verify} messages.
                             * @function encode
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wireguard.IWireguardConfig} message WireguardConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            WireguardConfig.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };

                            /**
                             * Encodes the specified WireguardConfig message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.headers.wireguard.WireguardConfig.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wireguard.IWireguardConfig} message WireguardConfig message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            WireguardConfig.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a WireguardConfig message from the specified reader or buffer.
                             * @function decode
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {v2ray.core.transport.internet.headers.wireguard.WireguardConfig} WireguardConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            WireguardConfig.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.headers.wireguard.WireguardConfig();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a WireguardConfig message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {v2ray.core.transport.internet.headers.wireguard.WireguardConfig} WireguardConfig
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            WireguardConfig.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a WireguardConfig message.
                             * @function verify
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            WireguardConfig.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };

                            /**
                             * Creates a WireguardConfig message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {v2ray.core.transport.internet.headers.wireguard.WireguardConfig} WireguardConfig
                             */
                            WireguardConfig.fromObject = function fromObject(object) {
                                if (object instanceof $root.v2ray.core.transport.internet.headers.wireguard.WireguardConfig)
                                    return object;
                                return new $root.v2ray.core.transport.internet.headers.wireguard.WireguardConfig();
                            };

                            /**
                             * Creates a plain object from a WireguardConfig message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @static
                             * @param {v2ray.core.transport.internet.headers.wireguard.WireguardConfig} message WireguardConfig
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            WireguardConfig.toObject = function toObject() {
                                return {};
                            };

                            /**
                             * Converts this WireguardConfig to JSON.
                             * @function toJSON
                             * @memberof v2ray.core.transport.internet.headers.wireguard.WireguardConfig
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            WireguardConfig.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return WireguardConfig;
                        })();

                        return wireguard;
                    })();

                    return headers;
                })();

                internet.http = (function() {

                    /**
                     * Namespace http.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var http = {};

                    http.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.http
                         * @interface IConfig
                         * @property {Array.<string>|null} [host] Config host
                         * @property {string|null} [path] Config path
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.http
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.http.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            this.host = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config host.
                         * @member {Array.<string>} host
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @instance
                         */
                        Config.prototype.host = $util.emptyArray;

                        /**
                         * Config path.
                         * @member {string} path
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @instance
                         */
                        Config.prototype.path = "";

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {v2ray.core.transport.internet.http.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.http.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.http.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {v2ray.core.transport.internet.http.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.host != null && message.host.length)
                                for (var i = 0; i < message.host.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.host[i]);
                            if (message.path != null && message.hasOwnProperty("path"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.http.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {v2ray.core.transport.internet.http.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.http.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.http.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.host && message.host.length))
                                        message.host = [];
                                    message.host.push(reader.string());
                                    break;
                                case 2:
                                    message.path = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.http.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.host != null && message.hasOwnProperty("host")) {
                                if (!Array.isArray(message.host))
                                    return "host: array expected";
                                for (var i = 0; i < message.host.length; ++i)
                                    if (!$util.isString(message.host[i]))
                                        return "host: string[] expected";
                            }
                            if (message.path != null && message.hasOwnProperty("path"))
                                if (!$util.isString(message.path))
                                    return "path: string expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.http.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.http.Config)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.http.Config();
                            if (object.host) {
                                if (!Array.isArray(object.host))
                                    throw TypeError(".v2ray.core.transport.internet.http.Config.host: array expected");
                                message.host = [];
                                for (var i = 0; i < object.host.length; ++i)
                                    message.host[i] = String(object.host[i]);
                            }
                            if (object.path != null)
                                message.path = String(object.path);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @static
                         * @param {v2ray.core.transport.internet.http.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.host = [];
                            if (options.defaults)
                                object.path = "";
                            if (message.host && message.host.length) {
                                object.host = [];
                                for (var j = 0; j < message.host.length; ++j)
                                    object.host[j] = message.host[j];
                            }
                            if (message.path != null && message.hasOwnProperty("path"))
                                object.path = message.path;
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.http.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return http;
                })();

                internet.kcp = (function() {

                    /**
                     * Namespace kcp.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var kcp = {};

                    kcp.MTU = (function() {

                        /**
                         * Properties of a MTU.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface IMTU
                         * @property {number|null} [value] MTU value
                         */

                        /**
                         * Constructs a new MTU.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents a MTU.
                         * @implements IMTU
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.IMTU=} [properties] Properties to set
                         */
                        function MTU(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * MTU value.
                         * @member {number} value
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @instance
                         */
                        MTU.prototype.value = 0;

                        /**
                         * Creates a new MTU instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IMTU=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.MTU} MTU instance
                         */
                        MTU.create = function create(properties) {
                            return new MTU(properties);
                        };

                        /**
                         * Encodes the specified MTU message. Does not implicitly {@link v2ray.core.transport.internet.kcp.MTU.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IMTU} message MTU message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MTU.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified MTU message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.MTU.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IMTU} message MTU message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MTU.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a MTU message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.MTU} MTU
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MTU.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.MTU();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a MTU message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.MTU} MTU
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MTU.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a MTU message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        MTU.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates a MTU message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.MTU} MTU
                         */
                        MTU.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.MTU)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.MTU();
                            if (object.value != null)
                                message.value = object.value >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a MTU message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.MTU} message MTU
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        MTU.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this MTU to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.MTU
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        MTU.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return MTU;
                    })();

                    kcp.TTI = (function() {

                        /**
                         * Properties of a TTI.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface ITTI
                         * @property {number|null} [value] TTI value
                         */

                        /**
                         * Constructs a new TTI.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents a TTI.
                         * @implements ITTI
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.ITTI=} [properties] Properties to set
                         */
                        function TTI(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * TTI value.
                         * @member {number} value
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @instance
                         */
                        TTI.prototype.value = 0;

                        /**
                         * Creates a new TTI instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.ITTI=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.TTI} TTI instance
                         */
                        TTI.create = function create(properties) {
                            return new TTI(properties);
                        };

                        /**
                         * Encodes the specified TTI message. Does not implicitly {@link v2ray.core.transport.internet.kcp.TTI.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.ITTI} message TTI message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TTI.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified TTI message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.TTI.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.ITTI} message TTI message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TTI.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a TTI message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.TTI} TTI
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TTI.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.TTI();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a TTI message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.TTI} TTI
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TTI.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a TTI message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TTI.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates a TTI message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.TTI} TTI
                         */
                        TTI.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.TTI)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.TTI();
                            if (object.value != null)
                                message.value = object.value >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a TTI message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.TTI} message TTI
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TTI.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this TTI to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.TTI
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TTI.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return TTI;
                    })();

                    kcp.UplinkCapacity = (function() {

                        /**
                         * Properties of an UplinkCapacity.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface IUplinkCapacity
                         * @property {number|null} [value] UplinkCapacity value
                         */

                        /**
                         * Constructs a new UplinkCapacity.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents an UplinkCapacity.
                         * @implements IUplinkCapacity
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.IUplinkCapacity=} [properties] Properties to set
                         */
                        function UplinkCapacity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * UplinkCapacity value.
                         * @member {number} value
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @instance
                         */
                        UplinkCapacity.prototype.value = 0;

                        /**
                         * Creates a new UplinkCapacity instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IUplinkCapacity=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.UplinkCapacity} UplinkCapacity instance
                         */
                        UplinkCapacity.create = function create(properties) {
                            return new UplinkCapacity(properties);
                        };

                        /**
                         * Encodes the specified UplinkCapacity message. Does not implicitly {@link v2ray.core.transport.internet.kcp.UplinkCapacity.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IUplinkCapacity} message UplinkCapacity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UplinkCapacity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified UplinkCapacity message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.UplinkCapacity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IUplinkCapacity} message UplinkCapacity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UplinkCapacity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an UplinkCapacity message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.UplinkCapacity} UplinkCapacity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UplinkCapacity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.UplinkCapacity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an UplinkCapacity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.UplinkCapacity} UplinkCapacity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UplinkCapacity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an UplinkCapacity message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UplinkCapacity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates an UplinkCapacity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.UplinkCapacity} UplinkCapacity
                         */
                        UplinkCapacity.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.UplinkCapacity)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.UplinkCapacity();
                            if (object.value != null)
                                message.value = object.value >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from an UplinkCapacity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.UplinkCapacity} message UplinkCapacity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UplinkCapacity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this UplinkCapacity to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.UplinkCapacity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UplinkCapacity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return UplinkCapacity;
                    })();

                    kcp.DownlinkCapacity = (function() {

                        /**
                         * Properties of a DownlinkCapacity.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface IDownlinkCapacity
                         * @property {number|null} [value] DownlinkCapacity value
                         */

                        /**
                         * Constructs a new DownlinkCapacity.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents a DownlinkCapacity.
                         * @implements IDownlinkCapacity
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.IDownlinkCapacity=} [properties] Properties to set
                         */
                        function DownlinkCapacity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DownlinkCapacity value.
                         * @member {number} value
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @instance
                         */
                        DownlinkCapacity.prototype.value = 0;

                        /**
                         * Creates a new DownlinkCapacity instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IDownlinkCapacity=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.DownlinkCapacity} DownlinkCapacity instance
                         */
                        DownlinkCapacity.create = function create(properties) {
                            return new DownlinkCapacity(properties);
                        };

                        /**
                         * Encodes the specified DownlinkCapacity message. Does not implicitly {@link v2ray.core.transport.internet.kcp.DownlinkCapacity.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IDownlinkCapacity} message DownlinkCapacity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DownlinkCapacity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified DownlinkCapacity message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.DownlinkCapacity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IDownlinkCapacity} message DownlinkCapacity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DownlinkCapacity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DownlinkCapacity message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.DownlinkCapacity} DownlinkCapacity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DownlinkCapacity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.DownlinkCapacity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DownlinkCapacity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.DownlinkCapacity} DownlinkCapacity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DownlinkCapacity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DownlinkCapacity message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DownlinkCapacity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates a DownlinkCapacity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.DownlinkCapacity} DownlinkCapacity
                         */
                        DownlinkCapacity.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.DownlinkCapacity)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.DownlinkCapacity();
                            if (object.value != null)
                                message.value = object.value >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a DownlinkCapacity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.DownlinkCapacity} message DownlinkCapacity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DownlinkCapacity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this DownlinkCapacity to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.DownlinkCapacity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DownlinkCapacity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return DownlinkCapacity;
                    })();

                    kcp.WriteBuffer = (function() {

                        /**
                         * Properties of a WriteBuffer.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface IWriteBuffer
                         * @property {number|null} [size] WriteBuffer size
                         */

                        /**
                         * Constructs a new WriteBuffer.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents a WriteBuffer.
                         * @implements IWriteBuffer
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.IWriteBuffer=} [properties] Properties to set
                         */
                        function WriteBuffer(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * WriteBuffer size.
                         * @member {number} size
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @instance
                         */
                        WriteBuffer.prototype.size = 0;

                        /**
                         * Creates a new WriteBuffer instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IWriteBuffer=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.WriteBuffer} WriteBuffer instance
                         */
                        WriteBuffer.create = function create(properties) {
                            return new WriteBuffer(properties);
                        };

                        /**
                         * Encodes the specified WriteBuffer message. Does not implicitly {@link v2ray.core.transport.internet.kcp.WriteBuffer.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IWriteBuffer} message WriteBuffer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WriteBuffer.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.size != null && message.hasOwnProperty("size"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.size);
                            return writer;
                        };

                        /**
                         * Encodes the specified WriteBuffer message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.WriteBuffer.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IWriteBuffer} message WriteBuffer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WriteBuffer.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a WriteBuffer message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.WriteBuffer} WriteBuffer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WriteBuffer.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.WriteBuffer();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.size = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a WriteBuffer message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.WriteBuffer} WriteBuffer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WriteBuffer.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a WriteBuffer message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        WriteBuffer.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.size != null && message.hasOwnProperty("size"))
                                if (!$util.isInteger(message.size))
                                    return "size: integer expected";
                            return null;
                        };

                        /**
                         * Creates a WriteBuffer message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.WriteBuffer} WriteBuffer
                         */
                        WriteBuffer.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.WriteBuffer)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.WriteBuffer();
                            if (object.size != null)
                                message.size = object.size >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a WriteBuffer message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.WriteBuffer} message WriteBuffer
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        WriteBuffer.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.size = 0;
                            if (message.size != null && message.hasOwnProperty("size"))
                                object.size = message.size;
                            return object;
                        };

                        /**
                         * Converts this WriteBuffer to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.WriteBuffer
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        WriteBuffer.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return WriteBuffer;
                    })();

                    kcp.ReadBuffer = (function() {

                        /**
                         * Properties of a ReadBuffer.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface IReadBuffer
                         * @property {number|null} [size] ReadBuffer size
                         */

                        /**
                         * Constructs a new ReadBuffer.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents a ReadBuffer.
                         * @implements IReadBuffer
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.IReadBuffer=} [properties] Properties to set
                         */
                        function ReadBuffer(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ReadBuffer size.
                         * @member {number} size
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @instance
                         */
                        ReadBuffer.prototype.size = 0;

                        /**
                         * Creates a new ReadBuffer instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IReadBuffer=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.ReadBuffer} ReadBuffer instance
                         */
                        ReadBuffer.create = function create(properties) {
                            return new ReadBuffer(properties);
                        };

                        /**
                         * Encodes the specified ReadBuffer message. Does not implicitly {@link v2ray.core.transport.internet.kcp.ReadBuffer.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IReadBuffer} message ReadBuffer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReadBuffer.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.size != null && message.hasOwnProperty("size"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.size);
                            return writer;
                        };

                        /**
                         * Encodes the specified ReadBuffer message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.ReadBuffer.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IReadBuffer} message ReadBuffer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReadBuffer.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ReadBuffer message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.ReadBuffer} ReadBuffer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReadBuffer.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.ReadBuffer();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.size = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ReadBuffer message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.ReadBuffer} ReadBuffer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReadBuffer.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ReadBuffer message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReadBuffer.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.size != null && message.hasOwnProperty("size"))
                                if (!$util.isInteger(message.size))
                                    return "size: integer expected";
                            return null;
                        };

                        /**
                         * Creates a ReadBuffer message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.ReadBuffer} ReadBuffer
                         */
                        ReadBuffer.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.ReadBuffer)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.ReadBuffer();
                            if (object.size != null)
                                message.size = object.size >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a ReadBuffer message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.ReadBuffer} message ReadBuffer
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReadBuffer.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.size = 0;
                            if (message.size != null && message.hasOwnProperty("size"))
                                object.size = message.size;
                            return object;
                        };

                        /**
                         * Converts this ReadBuffer to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.ReadBuffer
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReadBuffer.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ReadBuffer;
                    })();

                    kcp.ConnectionReuse = (function() {

                        /**
                         * Properties of a ConnectionReuse.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface IConnectionReuse
                         * @property {boolean|null} [enable] ConnectionReuse enable
                         */

                        /**
                         * Constructs a new ConnectionReuse.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents a ConnectionReuse.
                         * @implements IConnectionReuse
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.IConnectionReuse=} [properties] Properties to set
                         */
                        function ConnectionReuse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ConnectionReuse enable.
                         * @member {boolean} enable
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @instance
                         */
                        ConnectionReuse.prototype.enable = false;

                        /**
                         * Creates a new ConnectionReuse instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IConnectionReuse=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.ConnectionReuse} ConnectionReuse instance
                         */
                        ConnectionReuse.create = function create(properties) {
                            return new ConnectionReuse(properties);
                        };

                        /**
                         * Encodes the specified ConnectionReuse message. Does not implicitly {@link v2ray.core.transport.internet.kcp.ConnectionReuse.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IConnectionReuse} message ConnectionReuse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ConnectionReuse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.enable != null && message.hasOwnProperty("enable"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enable);
                            return writer;
                        };

                        /**
                         * Encodes the specified ConnectionReuse message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.ConnectionReuse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IConnectionReuse} message ConnectionReuse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ConnectionReuse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ConnectionReuse message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.ConnectionReuse} ConnectionReuse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ConnectionReuse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.ConnectionReuse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.enable = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ConnectionReuse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.ConnectionReuse} ConnectionReuse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ConnectionReuse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ConnectionReuse message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ConnectionReuse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.enable != null && message.hasOwnProperty("enable"))
                                if (typeof message.enable !== "boolean")
                                    return "enable: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a ConnectionReuse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.ConnectionReuse} ConnectionReuse
                         */
                        ConnectionReuse.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.ConnectionReuse)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.ConnectionReuse();
                            if (object.enable != null)
                                message.enable = Boolean(object.enable);
                            return message;
                        };

                        /**
                         * Creates a plain object from a ConnectionReuse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.ConnectionReuse} message ConnectionReuse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ConnectionReuse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.enable = false;
                            if (message.enable != null && message.hasOwnProperty("enable"))
                                object.enable = message.enable;
                            return object;
                        };

                        /**
                         * Converts this ConnectionReuse to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.ConnectionReuse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ConnectionReuse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return ConnectionReuse;
                    })();

                    kcp.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @interface IConfig
                         * @property {v2ray.core.transport.internet.kcp.IMTU|null} [mtu] Config mtu
                         * @property {v2ray.core.transport.internet.kcp.ITTI|null} [tti] Config tti
                         * @property {v2ray.core.transport.internet.kcp.IUplinkCapacity|null} [uplinkCapacity] Config uplinkCapacity
                         * @property {v2ray.core.transport.internet.kcp.IDownlinkCapacity|null} [downlinkCapacity] Config downlinkCapacity
                         * @property {boolean|null} [congestion] Config congestion
                         * @property {v2ray.core.transport.internet.kcp.IWriteBuffer|null} [writeBuffer] Config writeBuffer
                         * @property {v2ray.core.transport.internet.kcp.IReadBuffer|null} [readBuffer] Config readBuffer
                         * @property {v2ray.core.common.serial.ITypedMessage|null} [headerConfig] Config headerConfig
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.kcp
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.kcp.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config mtu.
                         * @member {v2ray.core.transport.internet.kcp.IMTU|null|undefined} mtu
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.mtu = null;

                        /**
                         * Config tti.
                         * @member {v2ray.core.transport.internet.kcp.ITTI|null|undefined} tti
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.tti = null;

                        /**
                         * Config uplinkCapacity.
                         * @member {v2ray.core.transport.internet.kcp.IUplinkCapacity|null|undefined} uplinkCapacity
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.uplinkCapacity = null;

                        /**
                         * Config downlinkCapacity.
                         * @member {v2ray.core.transport.internet.kcp.IDownlinkCapacity|null|undefined} downlinkCapacity
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.downlinkCapacity = null;

                        /**
                         * Config congestion.
                         * @member {boolean} congestion
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.congestion = false;

                        /**
                         * Config writeBuffer.
                         * @member {v2ray.core.transport.internet.kcp.IWriteBuffer|null|undefined} writeBuffer
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.writeBuffer = null;

                        /**
                         * Config readBuffer.
                         * @member {v2ray.core.transport.internet.kcp.IReadBuffer|null|undefined} readBuffer
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.readBuffer = null;

                        /**
                         * Config headerConfig.
                         * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} headerConfig
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         */
                        Config.prototype.headerConfig = null;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.kcp.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.kcp.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.mtu != null && message.hasOwnProperty("mtu"))
                                $root.v2ray.core.transport.internet.kcp.MTU.encode(message.mtu, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.tti != null && message.hasOwnProperty("tti"))
                                $root.v2ray.core.transport.internet.kcp.TTI.encode(message.tti, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.uplinkCapacity != null && message.hasOwnProperty("uplinkCapacity"))
                                $root.v2ray.core.transport.internet.kcp.UplinkCapacity.encode(message.uplinkCapacity, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.downlinkCapacity != null && message.hasOwnProperty("downlinkCapacity"))
                                $root.v2ray.core.transport.internet.kcp.DownlinkCapacity.encode(message.downlinkCapacity, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.congestion != null && message.hasOwnProperty("congestion"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.congestion);
                            if (message.writeBuffer != null && message.hasOwnProperty("writeBuffer"))
                                $root.v2ray.core.transport.internet.kcp.WriteBuffer.encode(message.writeBuffer, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.readBuffer != null && message.hasOwnProperty("readBuffer"))
                                $root.v2ray.core.transport.internet.kcp.ReadBuffer.encode(message.readBuffer, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.headerConfig != null && message.hasOwnProperty("headerConfig"))
                                $root.v2ray.core.common.serial.TypedMessage.encode(message.headerConfig, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.kcp.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.kcp.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.kcp.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.mtu = $root.v2ray.core.transport.internet.kcp.MTU.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.tti = $root.v2ray.core.transport.internet.kcp.TTI.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.uplinkCapacity = $root.v2ray.core.transport.internet.kcp.UplinkCapacity.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.downlinkCapacity = $root.v2ray.core.transport.internet.kcp.DownlinkCapacity.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.congestion = reader.bool();
                                    break;
                                case 6:
                                    message.writeBuffer = $root.v2ray.core.transport.internet.kcp.WriteBuffer.decode(reader, reader.uint32());
                                    break;
                                case 7:
                                    message.readBuffer = $root.v2ray.core.transport.internet.kcp.ReadBuffer.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.headerConfig = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.kcp.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.mtu != null && message.hasOwnProperty("mtu")) {
                                var error = $root.v2ray.core.transport.internet.kcp.MTU.verify(message.mtu);
                                if (error)
                                    return "mtu." + error;
                            }
                            if (message.tti != null && message.hasOwnProperty("tti")) {
                                var error = $root.v2ray.core.transport.internet.kcp.TTI.verify(message.tti);
                                if (error)
                                    return "tti." + error;
                            }
                            if (message.uplinkCapacity != null && message.hasOwnProperty("uplinkCapacity")) {
                                var error = $root.v2ray.core.transport.internet.kcp.UplinkCapacity.verify(message.uplinkCapacity);
                                if (error)
                                    return "uplinkCapacity." + error;
                            }
                            if (message.downlinkCapacity != null && message.hasOwnProperty("downlinkCapacity")) {
                                var error = $root.v2ray.core.transport.internet.kcp.DownlinkCapacity.verify(message.downlinkCapacity);
                                if (error)
                                    return "downlinkCapacity." + error;
                            }
                            if (message.congestion != null && message.hasOwnProperty("congestion"))
                                if (typeof message.congestion !== "boolean")
                                    return "congestion: boolean expected";
                            if (message.writeBuffer != null && message.hasOwnProperty("writeBuffer")) {
                                var error = $root.v2ray.core.transport.internet.kcp.WriteBuffer.verify(message.writeBuffer);
                                if (error)
                                    return "writeBuffer." + error;
                            }
                            if (message.readBuffer != null && message.hasOwnProperty("readBuffer")) {
                                var error = $root.v2ray.core.transport.internet.kcp.ReadBuffer.verify(message.readBuffer);
                                if (error)
                                    return "readBuffer." + error;
                            }
                            if (message.headerConfig != null && message.hasOwnProperty("headerConfig")) {
                                var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.headerConfig);
                                if (error)
                                    return "headerConfig." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.kcp.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.kcp.Config)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.kcp.Config();
                            if (object.mtu != null) {
                                if (typeof object.mtu !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.kcp.Config.mtu: object expected");
                                message.mtu = $root.v2ray.core.transport.internet.kcp.MTU.fromObject(object.mtu);
                            }
                            if (object.tti != null) {
                                if (typeof object.tti !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.kcp.Config.tti: object expected");
                                message.tti = $root.v2ray.core.transport.internet.kcp.TTI.fromObject(object.tti);
                            }
                            if (object.uplinkCapacity != null) {
                                if (typeof object.uplinkCapacity !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.kcp.Config.uplinkCapacity: object expected");
                                message.uplinkCapacity = $root.v2ray.core.transport.internet.kcp.UplinkCapacity.fromObject(object.uplinkCapacity);
                            }
                            if (object.downlinkCapacity != null) {
                                if (typeof object.downlinkCapacity !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.kcp.Config.downlinkCapacity: object expected");
                                message.downlinkCapacity = $root.v2ray.core.transport.internet.kcp.DownlinkCapacity.fromObject(object.downlinkCapacity);
                            }
                            if (object.congestion != null)
                                message.congestion = Boolean(object.congestion);
                            if (object.writeBuffer != null) {
                                if (typeof object.writeBuffer !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.kcp.Config.writeBuffer: object expected");
                                message.writeBuffer = $root.v2ray.core.transport.internet.kcp.WriteBuffer.fromObject(object.writeBuffer);
                            }
                            if (object.readBuffer != null) {
                                if (typeof object.readBuffer !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.kcp.Config.readBuffer: object expected");
                                message.readBuffer = $root.v2ray.core.transport.internet.kcp.ReadBuffer.fromObject(object.readBuffer);
                            }
                            if (object.headerConfig != null) {
                                if (typeof object.headerConfig !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.kcp.Config.headerConfig: object expected");
                                message.headerConfig = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.headerConfig);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.kcp.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.mtu = null;
                                object.tti = null;
                                object.uplinkCapacity = null;
                                object.downlinkCapacity = null;
                                object.congestion = false;
                                object.writeBuffer = null;
                                object.readBuffer = null;
                                object.headerConfig = null;
                            }
                            if (message.mtu != null && message.hasOwnProperty("mtu"))
                                object.mtu = $root.v2ray.core.transport.internet.kcp.MTU.toObject(message.mtu, options);
                            if (message.tti != null && message.hasOwnProperty("tti"))
                                object.tti = $root.v2ray.core.transport.internet.kcp.TTI.toObject(message.tti, options);
                            if (message.uplinkCapacity != null && message.hasOwnProperty("uplinkCapacity"))
                                object.uplinkCapacity = $root.v2ray.core.transport.internet.kcp.UplinkCapacity.toObject(message.uplinkCapacity, options);
                            if (message.downlinkCapacity != null && message.hasOwnProperty("downlinkCapacity"))
                                object.downlinkCapacity = $root.v2ray.core.transport.internet.kcp.DownlinkCapacity.toObject(message.downlinkCapacity, options);
                            if (message.congestion != null && message.hasOwnProperty("congestion"))
                                object.congestion = message.congestion;
                            if (message.writeBuffer != null && message.hasOwnProperty("writeBuffer"))
                                object.writeBuffer = $root.v2ray.core.transport.internet.kcp.WriteBuffer.toObject(message.writeBuffer, options);
                            if (message.readBuffer != null && message.hasOwnProperty("readBuffer"))
                                object.readBuffer = $root.v2ray.core.transport.internet.kcp.ReadBuffer.toObject(message.readBuffer, options);
                            if (message.headerConfig != null && message.hasOwnProperty("headerConfig"))
                                object.headerConfig = $root.v2ray.core.common.serial.TypedMessage.toObject(message.headerConfig, options);
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.kcp.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return kcp;
                })();

                internet.quic = (function() {

                    /**
                     * Namespace quic.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var quic = {};

                    quic.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.quic
                         * @interface IConfig
                         * @property {string|null} [key] Config key
                         * @property {v2ray.core.common.protocol.ISecurityConfig|null} [security] Config security
                         * @property {v2ray.core.common.serial.ITypedMessage|null} [header] Config header
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.quic
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.quic.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config key.
                         * @member {string} key
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @instance
                         */
                        Config.prototype.key = "";

                        /**
                         * Config security.
                         * @member {v2ray.core.common.protocol.ISecurityConfig|null|undefined} security
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @instance
                         */
                        Config.prototype.security = null;

                        /**
                         * Config header.
                         * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} header
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @instance
                         */
                        Config.prototype.header = null;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {v2ray.core.transport.internet.quic.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.quic.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.quic.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {v2ray.core.transport.internet.quic.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && message.hasOwnProperty("key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                            if (message.security != null && message.hasOwnProperty("security"))
                                $root.v2ray.core.common.protocol.SecurityConfig.encode(message.security, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.header != null && message.hasOwnProperty("header"))
                                $root.v2ray.core.common.serial.TypedMessage.encode(message.header, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.quic.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {v2ray.core.transport.internet.quic.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.quic.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.quic.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.key = reader.string();
                                    break;
                                case 2:
                                    message.security = $root.v2ray.core.common.protocol.SecurityConfig.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.header = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.quic.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key"))
                                if (!$util.isString(message.key))
                                    return "key: string expected";
                            if (message.security != null && message.hasOwnProperty("security")) {
                                var error = $root.v2ray.core.common.protocol.SecurityConfig.verify(message.security);
                                if (error)
                                    return "security." + error;
                            }
                            if (message.header != null && message.hasOwnProperty("header")) {
                                var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.header);
                                if (error)
                                    return "header." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.quic.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.quic.Config)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.quic.Config();
                            if (object.key != null)
                                message.key = String(object.key);
                            if (object.security != null) {
                                if (typeof object.security !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.quic.Config.security: object expected");
                                message.security = $root.v2ray.core.common.protocol.SecurityConfig.fromObject(object.security);
                            }
                            if (object.header != null) {
                                if (typeof object.header !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.quic.Config.header: object expected");
                                message.header = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.header);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @static
                         * @param {v2ray.core.transport.internet.quic.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.key = "";
                                object.security = null;
                                object.header = null;
                            }
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = message.key;
                            if (message.security != null && message.hasOwnProperty("security"))
                                object.security = $root.v2ray.core.common.protocol.SecurityConfig.toObject(message.security, options);
                            if (message.header != null && message.hasOwnProperty("header"))
                                object.header = $root.v2ray.core.common.serial.TypedMessage.toObject(message.header, options);
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.quic.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return quic;
                })();

                internet.tcp = (function() {

                    /**
                     * Namespace tcp.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var tcp = {};

                    tcp.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.tcp
                         * @interface IConfig
                         * @property {v2ray.core.common.serial.ITypedMessage|null} [headerSettings] Config headerSettings
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.tcp
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.tcp.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config headerSettings.
                         * @member {v2ray.core.common.serial.ITypedMessage|null|undefined} headerSettings
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @instance
                         */
                        Config.prototype.headerSettings = null;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tcp.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.tcp.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.tcp.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tcp.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.headerSettings != null && message.hasOwnProperty("headerSettings"))
                                $root.v2ray.core.common.serial.TypedMessage.encode(message.headerSettings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.tcp.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tcp.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.tcp.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.tcp.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.headerSettings = $root.v2ray.core.common.serial.TypedMessage.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.tcp.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.headerSettings != null && message.hasOwnProperty("headerSettings")) {
                                var error = $root.v2ray.core.common.serial.TypedMessage.verify(message.headerSettings);
                                if (error)
                                    return "headerSettings." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.tcp.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.tcp.Config)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.tcp.Config();
                            if (object.headerSettings != null) {
                                if (typeof object.headerSettings !== "object")
                                    throw TypeError(".v2ray.core.transport.internet.tcp.Config.headerSettings: object expected");
                                message.headerSettings = $root.v2ray.core.common.serial.TypedMessage.fromObject(object.headerSettings);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tcp.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.headerSettings = null;
                            if (message.headerSettings != null && message.hasOwnProperty("headerSettings"))
                                object.headerSettings = $root.v2ray.core.common.serial.TypedMessage.toObject(message.headerSettings, options);
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.tcp.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return tcp;
                })();

                internet.tls = (function() {

                    /**
                     * Namespace tls.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var tls = {};

                    tls.Certificate = (function() {

                        /**
                         * Properties of a Certificate.
                         * @memberof v2ray.core.transport.internet.tls
                         * @interface ICertificate
                         * @property {Uint8Array|null} [Certificate] Certificate Certificate
                         * @property {Uint8Array|null} [Key] Certificate Key
                         * @property {v2ray.core.transport.internet.tls.Certificate.Usage|null} [usage] Certificate usage
                         */

                        /**
                         * Constructs a new Certificate.
                         * @memberof v2ray.core.transport.internet.tls
                         * @classdesc Represents a Certificate.
                         * @implements ICertificate
                         * @constructor
                         * @param {v2ray.core.transport.internet.tls.ICertificate=} [properties] Properties to set
                         */
                        function Certificate(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Certificate Certificate.
                         * @member {Uint8Array} Certificate
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @instance
                         */
                        Certificate.prototype.Certificate = $util.newBuffer([]);

                        /**
                         * Certificate Key.
                         * @member {Uint8Array} Key
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @instance
                         */
                        Certificate.prototype.Key = $util.newBuffer([]);

                        /**
                         * Certificate usage.
                         * @member {v2ray.core.transport.internet.tls.Certificate.Usage} usage
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @instance
                         */
                        Certificate.prototype.usage = 0;

                        /**
                         * Creates a new Certificate instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {v2ray.core.transport.internet.tls.ICertificate=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.tls.Certificate} Certificate instance
                         */
                        Certificate.create = function create(properties) {
                            return new Certificate(properties);
                        };

                        /**
                         * Encodes the specified Certificate message. Does not implicitly {@link v2ray.core.transport.internet.tls.Certificate.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {v2ray.core.transport.internet.tls.ICertificate} message Certificate message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Certificate.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.Certificate != null && message.hasOwnProperty("Certificate"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.Certificate);
                            if (message.Key != null && message.hasOwnProperty("Key"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.Key);
                            if (message.usage != null && message.hasOwnProperty("usage"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.usage);
                            return writer;
                        };

                        /**
                         * Encodes the specified Certificate message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.tls.Certificate.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {v2ray.core.transport.internet.tls.ICertificate} message Certificate message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Certificate.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Certificate message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.tls.Certificate} Certificate
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Certificate.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.tls.Certificate();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.Certificate = reader.bytes();
                                    break;
                                case 2:
                                    message.Key = reader.bytes();
                                    break;
                                case 3:
                                    message.usage = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Certificate message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.tls.Certificate} Certificate
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Certificate.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Certificate message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Certificate.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.Certificate != null && message.hasOwnProperty("Certificate"))
                                if (!(message.Certificate && typeof message.Certificate.length === "number" || $util.isString(message.Certificate)))
                                    return "Certificate: buffer expected";
                            if (message.Key != null && message.hasOwnProperty("Key"))
                                if (!(message.Key && typeof message.Key.length === "number" || $util.isString(message.Key)))
                                    return "Key: buffer expected";
                            if (message.usage != null && message.hasOwnProperty("usage"))
                                switch (message.usage) {
                                default:
                                    return "usage: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates a Certificate message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.tls.Certificate} Certificate
                         */
                        Certificate.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.tls.Certificate)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.tls.Certificate();
                            if (object.Certificate != null)
                                if (typeof object.Certificate === "string")
                                    $util.base64.decode(object.Certificate, message.Certificate = $util.newBuffer($util.base64.length(object.Certificate)), 0);
                                else if (object.Certificate.length)
                                    message.Certificate = object.Certificate;
                            if (object.Key != null)
                                if (typeof object.Key === "string")
                                    $util.base64.decode(object.Key, message.Key = $util.newBuffer($util.base64.length(object.Key)), 0);
                                else if (object.Key.length)
                                    message.Key = object.Key;
                            switch (object.usage) {
                            case "ENCIPHERMENT":
                            case 0:
                                message.usage = 0;
                                break;
                            case "AUTHORITY_VERIFY":
                            case 1:
                                message.usage = 1;
                                break;
                            case "AUTHORITY_ISSUE":
                            case 2:
                                message.usage = 2;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Certificate message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @static
                         * @param {v2ray.core.transport.internet.tls.Certificate} message Certificate
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Certificate.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.Certificate = "";
                                else {
                                    object.Certificate = [];
                                    if (options.bytes !== Array)
                                        object.Certificate = $util.newBuffer(object.Certificate);
                                }
                                if (options.bytes === String)
                                    object.Key = "";
                                else {
                                    object.Key = [];
                                    if (options.bytes !== Array)
                                        object.Key = $util.newBuffer(object.Key);
                                }
                                object.usage = options.enums === String ? "ENCIPHERMENT" : 0;
                            }
                            if (message.Certificate != null && message.hasOwnProperty("Certificate"))
                                object.Certificate = options.bytes === String ? $util.base64.encode(message.Certificate, 0, message.Certificate.length) : options.bytes === Array ? Array.prototype.slice.call(message.Certificate) : message.Certificate;
                            if (message.Key != null && message.hasOwnProperty("Key"))
                                object.Key = options.bytes === String ? $util.base64.encode(message.Key, 0, message.Key.length) : options.bytes === Array ? Array.prototype.slice.call(message.Key) : message.Key;
                            if (message.usage != null && message.hasOwnProperty("usage"))
                                object.usage = options.enums === String ? $root.v2ray.core.transport.internet.tls.Certificate.Usage[message.usage] : message.usage;
                            return object;
                        };

                        /**
                         * Converts this Certificate to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.tls.Certificate
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Certificate.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Usage enum.
                         * @name v2ray.core.transport.internet.tls.Certificate.Usage
                         * @enum {string}
                         * @property {number} ENCIPHERMENT=0 ENCIPHERMENT value
                         * @property {number} AUTHORITY_VERIFY=1 AUTHORITY_VERIFY value
                         * @property {number} AUTHORITY_ISSUE=2 AUTHORITY_ISSUE value
                         */
                        Certificate.Usage = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ENCIPHERMENT"] = 0;
                            values[valuesById[1] = "AUTHORITY_VERIFY"] = 1;
                            values[valuesById[2] = "AUTHORITY_ISSUE"] = 2;
                            return values;
                        })();

                        return Certificate;
                    })();

                    tls.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.tls
                         * @interface IConfig
                         * @property {boolean|null} [allowInsecure] Config allowInsecure
                         * @property {boolean|null} [allowInsecureCiphers] Config allowInsecureCiphers
                         * @property {Array.<v2ray.core.transport.internet.tls.ICertificate>|null} [certificate] Config certificate
                         * @property {string|null} [serverName] Config serverName
                         * @property {Array.<string>|null} [nextProtocol] Config nextProtocol
                         * @property {boolean|null} [disableSessionResumption] Config disableSessionResumption
                         * @property {boolean|null} [disableSystemRoot] Config disableSystemRoot
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.tls
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.tls.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            this.certificate = [];
                            this.nextProtocol = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config allowInsecure.
                         * @member {boolean} allowInsecure
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         */
                        Config.prototype.allowInsecure = false;

                        /**
                         * Config allowInsecureCiphers.
                         * @member {boolean} allowInsecureCiphers
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         */
                        Config.prototype.allowInsecureCiphers = false;

                        /**
                         * Config certificate.
                         * @member {Array.<v2ray.core.transport.internet.tls.ICertificate>} certificate
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         */
                        Config.prototype.certificate = $util.emptyArray;

                        /**
                         * Config serverName.
                         * @member {string} serverName
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         */
                        Config.prototype.serverName = "";

                        /**
                         * Config nextProtocol.
                         * @member {Array.<string>} nextProtocol
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         */
                        Config.prototype.nextProtocol = $util.emptyArray;

                        /**
                         * Config disableSessionResumption.
                         * @member {boolean} disableSessionResumption
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         */
                        Config.prototype.disableSessionResumption = false;

                        /**
                         * Config disableSystemRoot.
                         * @member {boolean} disableSystemRoot
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         */
                        Config.prototype.disableSystemRoot = false;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tls.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.tls.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.tls.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tls.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.allowInsecure != null && message.hasOwnProperty("allowInsecure"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.allowInsecure);
                            if (message.certificate != null && message.certificate.length)
                                for (var i = 0; i < message.certificate.length; ++i)
                                    $root.v2ray.core.transport.internet.tls.Certificate.encode(message.certificate[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.serverName != null && message.hasOwnProperty("serverName"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.serverName);
                            if (message.nextProtocol != null && message.nextProtocol.length)
                                for (var i = 0; i < message.nextProtocol.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.nextProtocol[i]);
                            if (message.allowInsecureCiphers != null && message.hasOwnProperty("allowInsecureCiphers"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.allowInsecureCiphers);
                            if (message.disableSessionResumption != null && message.hasOwnProperty("disableSessionResumption"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disableSessionResumption);
                            if (message.disableSystemRoot != null && message.hasOwnProperty("disableSystemRoot"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.disableSystemRoot);
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.tls.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tls.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.tls.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.tls.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.allowInsecure = reader.bool();
                                    break;
                                case 5:
                                    message.allowInsecureCiphers = reader.bool();
                                    break;
                                case 2:
                                    if (!(message.certificate && message.certificate.length))
                                        message.certificate = [];
                                    message.certificate.push($root.v2ray.core.transport.internet.tls.Certificate.decode(reader, reader.uint32()));
                                    break;
                                case 3:
                                    message.serverName = reader.string();
                                    break;
                                case 4:
                                    if (!(message.nextProtocol && message.nextProtocol.length))
                                        message.nextProtocol = [];
                                    message.nextProtocol.push(reader.string());
                                    break;
                                case 6:
                                    message.disableSessionResumption = reader.bool();
                                    break;
                                case 7:
                                    message.disableSystemRoot = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.tls.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.allowInsecure != null && message.hasOwnProperty("allowInsecure"))
                                if (typeof message.allowInsecure !== "boolean")
                                    return "allowInsecure: boolean expected";
                            if (message.allowInsecureCiphers != null && message.hasOwnProperty("allowInsecureCiphers"))
                                if (typeof message.allowInsecureCiphers !== "boolean")
                                    return "allowInsecureCiphers: boolean expected";
                            if (message.certificate != null && message.hasOwnProperty("certificate")) {
                                if (!Array.isArray(message.certificate))
                                    return "certificate: array expected";
                                for (var i = 0; i < message.certificate.length; ++i) {
                                    var error = $root.v2ray.core.transport.internet.tls.Certificate.verify(message.certificate[i]);
                                    if (error)
                                        return "certificate." + error;
                                }
                            }
                            if (message.serverName != null && message.hasOwnProperty("serverName"))
                                if (!$util.isString(message.serverName))
                                    return "serverName: string expected";
                            if (message.nextProtocol != null && message.hasOwnProperty("nextProtocol")) {
                                if (!Array.isArray(message.nextProtocol))
                                    return "nextProtocol: array expected";
                                for (var i = 0; i < message.nextProtocol.length; ++i)
                                    if (!$util.isString(message.nextProtocol[i]))
                                        return "nextProtocol: string[] expected";
                            }
                            if (message.disableSessionResumption != null && message.hasOwnProperty("disableSessionResumption"))
                                if (typeof message.disableSessionResumption !== "boolean")
                                    return "disableSessionResumption: boolean expected";
                            if (message.disableSystemRoot != null && message.hasOwnProperty("disableSystemRoot"))
                                if (typeof message.disableSystemRoot !== "boolean")
                                    return "disableSystemRoot: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.tls.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.tls.Config)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.tls.Config();
                            if (object.allowInsecure != null)
                                message.allowInsecure = Boolean(object.allowInsecure);
                            if (object.allowInsecureCiphers != null)
                                message.allowInsecureCiphers = Boolean(object.allowInsecureCiphers);
                            if (object.certificate) {
                                if (!Array.isArray(object.certificate))
                                    throw TypeError(".v2ray.core.transport.internet.tls.Config.certificate: array expected");
                                message.certificate = [];
                                for (var i = 0; i < object.certificate.length; ++i) {
                                    if (typeof object.certificate[i] !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.tls.Config.certificate: object expected");
                                    message.certificate[i] = $root.v2ray.core.transport.internet.tls.Certificate.fromObject(object.certificate[i]);
                                }
                            }
                            if (object.serverName != null)
                                message.serverName = String(object.serverName);
                            if (object.nextProtocol) {
                                if (!Array.isArray(object.nextProtocol))
                                    throw TypeError(".v2ray.core.transport.internet.tls.Config.nextProtocol: array expected");
                                message.nextProtocol = [];
                                for (var i = 0; i < object.nextProtocol.length; ++i)
                                    message.nextProtocol[i] = String(object.nextProtocol[i]);
                            }
                            if (object.disableSessionResumption != null)
                                message.disableSessionResumption = Boolean(object.disableSessionResumption);
                            if (object.disableSystemRoot != null)
                                message.disableSystemRoot = Boolean(object.disableSystemRoot);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @static
                         * @param {v2ray.core.transport.internet.tls.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.certificate = [];
                                object.nextProtocol = [];
                            }
                            if (options.defaults) {
                                object.allowInsecure = false;
                                object.serverName = "";
                                object.allowInsecureCiphers = false;
                                object.disableSessionResumption = false;
                                object.disableSystemRoot = false;
                            }
                            if (message.allowInsecure != null && message.hasOwnProperty("allowInsecure"))
                                object.allowInsecure = message.allowInsecure;
                            if (message.certificate && message.certificate.length) {
                                object.certificate = [];
                                for (var j = 0; j < message.certificate.length; ++j)
                                    object.certificate[j] = $root.v2ray.core.transport.internet.tls.Certificate.toObject(message.certificate[j], options);
                            }
                            if (message.serverName != null && message.hasOwnProperty("serverName"))
                                object.serverName = message.serverName;
                            if (message.nextProtocol && message.nextProtocol.length) {
                                object.nextProtocol = [];
                                for (var j = 0; j < message.nextProtocol.length; ++j)
                                    object.nextProtocol[j] = message.nextProtocol[j];
                            }
                            if (message.allowInsecureCiphers != null && message.hasOwnProperty("allowInsecureCiphers"))
                                object.allowInsecureCiphers = message.allowInsecureCiphers;
                            if (message.disableSessionResumption != null && message.hasOwnProperty("disableSessionResumption"))
                                object.disableSessionResumption = message.disableSessionResumption;
                            if (message.disableSystemRoot != null && message.hasOwnProperty("disableSystemRoot"))
                                object.disableSystemRoot = message.disableSystemRoot;
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.tls.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return tls;
                })();

                internet.udp = (function() {

                    /**
                     * Namespace udp.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var udp = {};

                    udp.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.udp
                         * @interface IConfig
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.udp
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.udp.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.udp.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.udp.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.udp.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.udp.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.udp.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.udp.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.udp.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.udp.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.udp.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.udp.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.udp.Config)
                                return object;
                            return new $root.v2ray.core.transport.internet.udp.Config();
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @static
                         * @param {v2ray.core.transport.internet.udp.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.udp.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return udp;
                })();

                internet.websocket = (function() {

                    /**
                     * Namespace websocket.
                     * @memberof v2ray.core.transport.internet
                     * @namespace
                     */
                    var websocket = {};

                    websocket.Header = (function() {

                        /**
                         * Properties of a Header.
                         * @memberof v2ray.core.transport.internet.websocket
                         * @interface IHeader
                         * @property {string|null} [key] Header key
                         * @property {string|null} [value] Header value
                         */

                        /**
                         * Constructs a new Header.
                         * @memberof v2ray.core.transport.internet.websocket
                         * @classdesc Represents a Header.
                         * @implements IHeader
                         * @constructor
                         * @param {v2ray.core.transport.internet.websocket.IHeader=} [properties] Properties to set
                         */
                        function Header(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Header key.
                         * @member {string} key
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @instance
                         */
                        Header.prototype.key = "";

                        /**
                         * Header value.
                         * @member {string} value
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @instance
                         */
                        Header.prototype.value = "";

                        /**
                         * Creates a new Header instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.IHeader=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.websocket.Header} Header instance
                         */
                        Header.create = function create(properties) {
                            return new Header(properties);
                        };

                        /**
                         * Encodes the specified Header message. Does not implicitly {@link v2ray.core.transport.internet.websocket.Header.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.IHeader} message Header message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Header.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && message.hasOwnProperty("key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified Header message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.websocket.Header.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.IHeader} message Header message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Header.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Header message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.websocket.Header} Header
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Header.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.websocket.Header();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.key = reader.string();
                                    break;
                                case 2:
                                    message.value = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Header message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.websocket.Header} Header
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Header.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Header message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Header.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key"))
                                if (!$util.isString(message.key))
                                    return "key: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            return null;
                        };

                        /**
                         * Creates a Header message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.websocket.Header} Header
                         */
                        Header.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.websocket.Header)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.websocket.Header();
                            if (object.key != null)
                                message.key = String(object.key);
                            if (object.value != null)
                                message.value = String(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Header message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.Header} message Header
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Header.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.key = "";
                                object.value = "";
                            }
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = message.key;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this Header to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.websocket.Header
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Header.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Header;
                    })();

                    websocket.Config = (function() {

                        /**
                         * Properties of a Config.
                         * @memberof v2ray.core.transport.internet.websocket
                         * @interface IConfig
                         * @property {string|null} [path] Config path
                         * @property {Array.<v2ray.core.transport.internet.websocket.IHeader>|null} [header] Config header
                         */

                        /**
                         * Constructs a new Config.
                         * @memberof v2ray.core.transport.internet.websocket
                         * @classdesc Represents a Config.
                         * @implements IConfig
                         * @constructor
                         * @param {v2ray.core.transport.internet.websocket.IConfig=} [properties] Properties to set
                         */
                        function Config(properties) {
                            this.header = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Config path.
                         * @member {string} path
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @instance
                         */
                        Config.prototype.path = "";

                        /**
                         * Config header.
                         * @member {Array.<v2ray.core.transport.internet.websocket.IHeader>} header
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @instance
                         */
                        Config.prototype.header = $util.emptyArray;

                        /**
                         * Creates a new Config instance using the specified properties.
                         * @function create
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.IConfig=} [properties] Properties to set
                         * @returns {v2ray.core.transport.internet.websocket.Config} Config instance
                         */
                        Config.create = function create(properties) {
                            return new Config(properties);
                        };

                        /**
                         * Encodes the specified Config message. Does not implicitly {@link v2ray.core.transport.internet.websocket.Config.verify|verify} messages.
                         * @function encode
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.path != null && message.hasOwnProperty("path"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                            if (message.header != null && message.header.length)
                                for (var i = 0; i < message.header.length; ++i)
                                    $root.v2ray.core.transport.internet.websocket.Header.encode(message.header[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Config message, length delimited. Does not implicitly {@link v2ray.core.transport.internet.websocket.Config.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.IConfig} message Config message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Config.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer.
                         * @function decode
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {v2ray.core.transport.internet.websocket.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.v2ray.core.transport.internet.websocket.Config();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2:
                                    message.path = reader.string();
                                    break;
                                case 3:
                                    if (!(message.header && message.header.length))
                                        message.header = [];
                                    message.header.push($root.v2ray.core.transport.internet.websocket.Header.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Config message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {v2ray.core.transport.internet.websocket.Config} Config
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Config.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Config message.
                         * @function verify
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Config.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.path != null && message.hasOwnProperty("path"))
                                if (!$util.isString(message.path))
                                    return "path: string expected";
                            if (message.header != null && message.hasOwnProperty("header")) {
                                if (!Array.isArray(message.header))
                                    return "header: array expected";
                                for (var i = 0; i < message.header.length; ++i) {
                                    var error = $root.v2ray.core.transport.internet.websocket.Header.verify(message.header[i]);
                                    if (error)
                                        return "header." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a Config message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {v2ray.core.transport.internet.websocket.Config} Config
                         */
                        Config.fromObject = function fromObject(object) {
                            if (object instanceof $root.v2ray.core.transport.internet.websocket.Config)
                                return object;
                            var message = new $root.v2ray.core.transport.internet.websocket.Config();
                            if (object.path != null)
                                message.path = String(object.path);
                            if (object.header) {
                                if (!Array.isArray(object.header))
                                    throw TypeError(".v2ray.core.transport.internet.websocket.Config.header: array expected");
                                message.header = [];
                                for (var i = 0; i < object.header.length; ++i) {
                                    if (typeof object.header[i] !== "object")
                                        throw TypeError(".v2ray.core.transport.internet.websocket.Config.header: object expected");
                                    message.header[i] = $root.v2ray.core.transport.internet.websocket.Header.fromObject(object.header[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Config message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @static
                         * @param {v2ray.core.transport.internet.websocket.Config} message Config
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Config.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.header = [];
                            if (options.defaults)
                                object.path = "";
                            if (message.path != null && message.hasOwnProperty("path"))
                                object.path = message.path;
                            if (message.header && message.header.length) {
                                object.header = [];
                                for (var j = 0; j < message.header.length; ++j)
                                    object.header[j] = $root.v2ray.core.transport.internet.websocket.Header.toObject(message.header[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Config to JSON.
                         * @function toJSON
                         * @memberof v2ray.core.transport.internet.websocket.Config
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Config.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Config;
                    })();

                    return websocket;
                })();

                return internet;
            })();

            return transport;
        })();

        return core;
    })();

    return v2ray;
})();

module.exports = $root;
